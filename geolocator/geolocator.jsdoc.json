[
  {
    "comment": "/**\n * Geolocator library that provides methods for getting geo-location information,\n * geocoding, address look-ups, distance & durations, timezone information and more...\n * This library makes use of HTML5 position feautures, implements Google APIs\n * and other services.\n *\n * Although some calls might work without a key, it is generally required by\n * most Goolge APIs (such as Time Zone API). To get a free (or premium) key,\n * {@link https://developers.google.com/maps/documentation/javascript/|click here}.\n * After getting a key, you can enable multiple APIs for it. Make sure you\n * {@link https://console.developers.google.com|enable}\n * all the APIs supported by Geolocator.\n *\n * @license MIT\n * @copyright 2016, Onur Yıldırım (onur@cutepilot.com)\n */",
    "meta": {
      "range": [
        2766,
        55416
      ],
      "filename": "geolocator.js",
      "lineno": 92,
      "path": "/Users/oy/developer/javascript/geolocator/src/core",
      "code": {
        "id": "astnode100000084",
        "name": "geolocator",
        "type": "ClassDeclaration",
        "paramnames": []
      }
    },
    "classdesc": "Geolocator library that provides methods for getting geo-location information,\ngeocoding, address look-ups, distance & durations, timezone information and more...\nThis library makes use of HTML5 position feautures, implements Google APIs\nand other services.\n\nAlthough some calls might work without a key, it is generally required by\nmost Goolge APIs (such as Time Zone API). To get a free (or premium) key,\n{@link https://developers.google.com/maps/documentation/javascript/|click here}.\nAfter getting a key, you can enable multiple APIs for it. Make sure you\n{@link https://console.developers.google.com|enable}\nall the APIs supported by Geolocator.",
    "license": "MIT",
    "copyright": "2016, Onur Yıldırım (onur@cutepilot.com)",
    "name": "geolocator",
    "longname": "geolocator",
    "kind": "class",
    "scope": "global",
    "$longname": "geolocator",
    "$members": [
      {
        "comment": "/**\n     * Calculates the distance between two geographic points.\n     *\n     * @param {Object} options - Required. Calculation and display options.\n     *     @param {Object} options.from - Required.\n     *     Object containing the `latitude` and `longitude` of original location.\n     *     @param {Object} options.to - Required.\n     *     Object containing the `latitude` and `longitude` of destination.\n     *     @param {String} options.formula - Optional. Default: `geolocator.DistanceFormula.HAVERSINE`.\n     *     The algorithm or formula to calculate the distance.\n     *     See [DistanceFormula](geolocator.{enums}.md#geolocator.DistanceFormula) enumeration.\n     *     @param {Number} options.unitSystem - Optional. Default: `geolocator.UnitSystem.METRIC`.\n     *     Preferred unit system to use when displaying distance.\n     *     See [UnitSystem](geolocator.{enums}.md#geolocator.UnitSystem) enumeration.\n     * @returns {Number} - The calculated distance.\n     *\n     * @example\n     * // Calculate distance from London to Paris.\n     * var result = geolocator.calcDistance({\n     *     from: {\n     *         latitude: 51.5085300,\n     *         longitude: -0.1257400\n     *     },\n     *     to: {\n     *         latitude: 48.8534100,\n     *         longitude: 2.3488000\n     *     },\n     *     formula: geolocator.DistanceFormula.HAVERSINE,\n     *     unitSystem: geolocator.UnitSystem.METRIC\n     * });\n     * // result: 366.41656039126093 (kilometers)\n     */",
        "meta": {
          "range": [
            50224,
            51613
          ],
          "filename": "geolocator.js",
          "lineno": 1172,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100001596",
            "name": "geolocator.calcDistance",
            "type": "MethodDefinition",
            "paramnames": [
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Calculates the distance between two geographic points.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Required. Calculation and display options.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Required.\n    Object containing the `latitude` and `longitude` of original location.",
            "name": "options.from"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Required.\n    Object containing the `latitude` and `longitude` of destination.",
            "name": "options.to"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Optional. Default: `geolocator.DistanceFormula.HAVERSINE`.\n    The algorithm or formula to calculate the distance.\n    See [DistanceFormula](geolocator.{enums}.md#geolocator.DistanceFormula) enumeration.",
            "name": "options.formula"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Optional. Default: `geolocator.UnitSystem.METRIC`.\n    Preferred unit system to use when displaying distance.\n    See [UnitSystem](geolocator.{enums}.md#geolocator.UnitSystem) enumeration.",
            "name": "options.unitSystem"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "- The calculated distance."
          }
        ],
        "examples": [
          "// Calculate distance from London to Paris.\nvar result = geolocator.calcDistance({\n    from: {\n        latitude: 51.5085300,\n        longitude: -0.1257400\n    },\n    to: {\n        latitude: 48.8534100,\n        longitude: 2.3488000\n    },\n    formula: geolocator.DistanceFormula.HAVERSINE,\n    unitSystem: geolocator.UnitSystem.METRIC\n});\n// result: 366.41656039126093 (kilometers)"
        ],
        "name": "calcDistance",
        "longname": "geolocator.calcDistance",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.calcDistance"
      },
      {
        "comment": "/**\n     * Sets or gets the geolocator configuration object.\n     *\n     * @param {Object} options - Optional. Configuration object.\n     * If omitted, this method returns the current configuration.\n     *     @param {String} options.language - Default: `\"en\"`.\n     *     Language to be used for API requests that supports language configurations.\n     *     This is generally used for Google APIs.\n     *     See {@link https://developers.google.com/maps/faq#languagesupport|supported languages}..\n     *     @param {Boolean} options.https - Default: `true`.\n     *     As Google recommends; using HTTPS encryption makes your site more secure,\n     *     and more resistant to snooping or tampering.\n     *     If set to `true`, the API calls are made over HTTPS, at all times.\n     *     Setting to `false` will switch to HTTP (even if the page is on HTTPS).\n     *     And if set to `null`, current protocol will be used.\n     *     Note that some APIs might not work with HTTP such as Google Maps TimeZone API.\n     *     @param {Object} options.google - Google specific options.\n     *         @param {String} options.google.version - Default: `\"3.22\"`.\n     *         Google Maps API version to be used (with `geolocator.createMap()`)\n     *         method. The default version value is tested and works with Geolocator.\n     *         You can set a greater value or the latest version number and it\n     *         should work; but it's not guaranteed.\n     *         Find out the {@link https://developers.google.com/maps/documentation/javascript/versions|latest version here}.\n     *         @param {String} options.google.key - Default: `\"\"`.\n     *         API key to be used with Google API calls. Although some calls might\n     *         work without a key, it is generally required by most Goolge APIs.\n     *         To get a free (or premium) key,\n     *         {@link https://developers.google.com/maps/documentation/javascript/|click here}.\n     *\n     * @returns {Object} - Returns the current or updated configuration object.\n     *\n     * @example\n     * geolocator.config({\n     *     language: 'en',\n     *     google: {\n     *         key: 'YOUR-KEY'\n     *     }\n     * });\n     */",
        "meta": {
          "range": [
            8003,
            8228
          ],
          "filename": "geolocator.js",
          "lineno": 241,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100000147",
            "name": "geolocator.config",
            "type": "MethodDefinition",
            "paramnames": [
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets or gets the geolocator configuration object.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Optional. Configuration object.\nIf omitted, this method returns the current configuration.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Default: `\"en\"`.\n    Language to be used for API requests that supports language configurations.\n    This is generally used for Google APIs.\n    See {@link https://developers.google.com/maps/faq#languagesupport|supported languages}..",
            "name": "options.language"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Default: `true`.\n    As Google recommends; using HTTPS encryption makes your site more secure,\n    and more resistant to snooping or tampering.\n    If set to `true`, the API calls are made over HTTPS, at all times.\n    Setting to `false` will switch to HTTP (even if the page is on HTTPS).\n    And if set to `null`, current protocol will be used.\n    Note that some APIs might not work with HTTP such as Google Maps TimeZone API.",
            "name": "options.https"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Google specific options.",
            "name": "options.google"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Default: `\"3.22\"`.\n        Google Maps API version to be used (with `geolocator.createMap()`)\n        method. The default version value is tested and works with Geolocator.\n        You can set a greater value or the latest version number and it\n        should work; but it's not guaranteed.\n        Find out the {@link https://developers.google.com/maps/documentation/javascript/versions|latest version here}.",
            "name": "options.google.version"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Default: `\"\"`.\n        API key to be used with Google API calls. Although some calls might\n        work without a key, it is generally required by most Goolge APIs.\n        To get a free (or premium) key,\n        {@link https://developers.google.com/maps/documentation/javascript/|click here}.",
            "name": "options.google.key"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "- Returns the current or updated configuration object."
          }
        ],
        "examples": [
          "geolocator.config({\n    language: 'en',\n    google: {\n        key: 'YOUR-KEY'\n    }\n});"
        ],
        "name": "config",
        "longname": "geolocator.config",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.config"
      },
      {
        "comment": "/**\n     * Enumerates formulas/algorithms for calculating the distance between two\n     * latitude/longitude points.\n     * See [details](geolocator.{enums}.md#geolocator.DistanceFormula).\n     * @see {@link geolocator.(enums).md|All Enumerations}\n     * @enum {String}\n     * @readonly\n     * @static\n     */",
        "meta": {
          "range": [
            5618,
            5692
          ],
          "filename": "geolocator.js",
          "lineno": 194,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100000139",
            "name": "geolocator.DistanceFormula",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Enumerates formulas/algorithms for calculating the distance between two\nlatitude/longitude points.\nSee [details](geolocator.{enums}.md#geolocator.DistanceFormula).",
        "see": [
          "{@link geolocator.(enums).md|All Enumerations}"
        ],
        "kind": "member",
        "isEnum": true,
        "type": {
          "names": [
            "String"
          ]
        },
        "readonly": true,
        "scope": "static",
        "name": "DistanceFormula",
        "longname": "geolocator.DistanceFormula",
        "memberof": "geolocator",
        "$longname": "geolocator.DistanceFormula"
      },
      {
        "comment": "/**\n     * Ensures Google Maps API is loaded. If not, this will load all of the\n     * main Javascript objects and symbols for use in the Maps API.\n     *\n     * Note that, Google Maps API is loaded only when needed. For example,\n     * the DistanceMatrix API does not support Web Service requests and\n     * requires this API to be loaded. However, the TimeZone API requests are\n     * made throught the Web Service without requiring a `google` object\n     * within DOM.\n     *\n     * Also note that this will not re-load the API if `google.maps` object\n     * already exists. In this case, the `callback` is still executed and\n     * no errors are passed.\n     *\n     * You can use the following overload to omit the `key` argument altogether:\n     *\n     * `geolocator.ensureGoogleLoaded(callback)`\n     *\n     *\n     * @param {String} key - Optional. Default: `undefined`.\n     * Google API key.\n     * @param {Function} callback - Callback function to be executed when\n     * the operation ends.\n     * @returns {void}\n     */",
        "meta": {
          "range": [
            53832,
            54452
          ],
          "filename": "geolocator.js",
          "lineno": 1269,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100001935",
            "name": "geolocator.ensureGoogleLoaded",
            "type": "MethodDefinition",
            "paramnames": [
              "key",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Ensures Google Maps API is loaded. If not, this will load all of the\nmain Javascript objects and symbols for use in the Maps API.\n\nNote that, Google Maps API is loaded only when needed. For example,\nthe DistanceMatrix API does not support Web Service requests and\nrequires this API to be loaded. However, the TimeZone API requests are\nmade throught the Web Service without requiring a `google` object\nwithin DOM.\n\nAlso note that this will not re-load the API if `google.maps` object\nalready exists. In this case, the `callback` is still executed and\nno errors are passed.\n\nYou can use the following overload to omit the `key` argument altogether:\n\n`geolocator.ensureGoogleLoaded(callback)`",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Optional. Default: `undefined`.\nGoogle API key.",
            "name": "key"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Callback function to be executed when\nthe operation ends.",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "name": "ensureGoogleLoaded",
        "longname": "geolocator.ensureGoogleLoaded",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.ensureGoogleLoaded"
      },
      {
        "comment": "/**\n     * Geolocator Error class that provides a common type of error object for\n     * the various APIs implemented in Geolocator. All callbacks of Geolocator\n     * will include an instance of this object as the first argument; if the\n     * corresponding operation fails. Also all thrown errors will be an instance\n     * of this object. This object also enumerates the Geolocator Error codes\n     * with its enumerable properties.\n     * See [details](geolocator.error.md).\n     * @see {@link geolocator.error.md|GeolocatorError}\n     * @type {GeolocatorError}\n     * @readonly\n     * @static\n     */",
        "meta": {
          "range": [
            3707,
            3765
          ],
          "filename": "geolocator.js",
          "lineno": 121,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100000093",
            "name": "geolocator.Error",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Geolocator Error class that provides a common type of error object for\nthe various APIs implemented in Geolocator. All callbacks of Geolocator\nwill include an instance of this object as the first argument; if the\ncorresponding operation fails. Also all thrown errors will be an instance\nof this object. This object also enumerates the Geolocator Error codes\nwith its enumerable properties.\nSee [details](geolocator.error.md).",
        "see": [
          "{@link geolocator.error.md|GeolocatorError}"
        ],
        "type": {
          "names": [
            "GeolocatorError"
          ]
        },
        "readonly": true,
        "scope": "static",
        "name": "Error",
        "longname": "geolocator.Error",
        "kind": "member",
        "memberof": "geolocator",
        "$longname": "geolocator.Error"
      },
      {
        "comment": "/**\n     * Converts a given address (or address components) into geographic\n     * coordinates (i.e. latitude, longitude).\n     * @see {@link https://developers.google.com/maps/documentation/geocoding/intro|Google Maps Geocoding API}\n     * @see {@link https://developers.google.com/maps/documentation/geocoding/usage-limits|Usage Limits}\n     *\n     * @param {String|Object} options - Required. Either the address to geocode\n     * or geocoding options with the following properties.\n     *     @param {String} options.address - Required. The street address to\n     *     geocode, in the format used by the national postal service of the\n     *     country concerned. Additional address elements such as business\n     *     names and unit, suite or floor numbers should be avoided. Note that\n     *     any address component (route, locality, administrativeArea,\n     *     postalCode and country) should be specified either in address or\n     *     the corresponding property - not both. Doing so may result in\n     *     `ZERO_RESULTS`.\n     *     @param {String} options.route - Optional. Default: `undefined`\n     *     \tLong or short name of a route.\n     *     @param {String} options.locality - Optional. Default: `undefined`\n     *     \tLocality and sublocality of the location.\n     *     @param {String} options.administrativeArea - Optional. Default: `undefined`\n     *     \tAdministrative area of the location.\n     *     @param {String} options.postalCode - Optional. Default: `undefined`\n     *     \tPostal code of the location.\n     *     @param {String} options.country - Optional. Default: `undefined`\n     *     \tA country name or a two letter ISO 3166-1 country code.\n     *     @param {String} options.region - Optional. Default: `undefined`\n     *     \tThe region code, specified as a ccTLD (\"top-level domain\")\n     *     \ttwo-character value. e.g.: `\"fr\"` for France.\n     *     @param {Array|Object} options.bounds - Optional. Default: `undefined`\n     *     \tThe bounding box of the viewport within which to bias geocode\n     *     \tresults more prominently. e.g.:\n     *     \t`[ southwestLat:Number, southwestLng:Number, northeastLat:Number, northeastLng:Number ]`\n     *      @param {Boolean} options.raw - Optional. Default: `false`\n     *     \tWhether to return the raw Google API result.\n     * @param {Function} callback - Required. Callback function to be executed\n     * when the request completes. This takes 2 arguments:\n     * `function (err, location) { ... }`\n     * Note: set `options.raw` to `true` to get the raw Google API results.\n     * @returns {void}\n     *\n     * @example\n     * var address = '1600 Amphitheatre Parkway, CA';\n     * geolocator.geocode(address, function (err, location) {\n     *     console.log(err || location);\n     * });\n     *\n     * // location:\n     * {\n     *     coords: {\n     *         latitude: 37.4224764,\n     *         longitude: -122.0842499\n     *     },\n     *     address: {\n     *         commonName: \"\",\n     *         street: \"Amphitheatre Pkwy\",\n     *         route: \"Amphitheatre Pkwy\",\n     *         streetNumber: \"1600\",\n     *         neighborhood: \"\",\n     *         town: \"\",\n     *         city: \"Mountain View\",\n     *         region: \"Santa Clara County\",\n     *         state: \"California\",\n     *         stateCode: \"CA\",\n     *         postalCode: \"94043\",\n     *         country: \"United States\",\n     *         countryCode: \"US\"\n     *     },\n     *     formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n     *     type: \"ROOFTOP\",\n     *     placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n     *     timestamp: 1456795956380\n     * }\n     */",
        "meta": {
          "range": [
            35090,
            35827
          ],
          "filename": "geolocator.js",
          "lineno": 823,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100000846",
            "name": "geolocator.geocode",
            "type": "MethodDefinition",
            "paramnames": [
              "options",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Converts a given address (or address components) into geographic\ncoordinates (i.e. latitude, longitude).",
        "see": [
          "{@link https://developers.google.com/maps/documentation/geocoding/intro|Google Maps Geocoding API}",
          "{@link https://developers.google.com/maps/documentation/geocoding/usage-limits|Usage Limits}"
        ],
        "params": [
          {
            "type": {
              "names": [
                "String",
                "Object"
              ]
            },
            "description": "Required. Either the address to geocode\nor geocoding options with the following properties.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Required. The street address to\n    geocode, in the format used by the national postal service of the\n    country concerned. Additional address elements such as business\n    names and unit, suite or floor numbers should be avoided. Note that\n    any address component (route, locality, administrativeArea,\n    postalCode and country) should be specified either in address or\n    the corresponding property - not both. Doing so may result in\n    `ZERO_RESULTS`.",
            "name": "options.address"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Optional. Default: `undefined`\n    \tLong or short name of a route.",
            "name": "options.route"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Optional. Default: `undefined`\n    \tLocality and sublocality of the location.",
            "name": "options.locality"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Optional. Default: `undefined`\n    \tAdministrative area of the location.",
            "name": "options.administrativeArea"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Optional. Default: `undefined`\n    \tPostal code of the location.",
            "name": "options.postalCode"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Optional. Default: `undefined`\n    \tA country name or a two letter ISO 3166-1 country code.",
            "name": "options.country"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Optional. Default: `undefined`\n    \tThe region code, specified as a ccTLD (\"top-level domain\")\n    \ttwo-character value. e.g.: `\"fr\"` for France.",
            "name": "options.region"
          },
          {
            "type": {
              "names": [
                "Array",
                "Object"
              ]
            },
            "description": "Optional. Default: `undefined`\n    \tThe bounding box of the viewport within which to bias geocode\n    \tresults more prominently. e.g.:\n    \t`[ southwestLat:Number, southwestLng:Number, northeastLat:Number, northeastLng:Number ]`",
            "name": "options.bounds"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Optional. Default: `false`\n    \tWhether to return the raw Google API result.",
            "name": "options.raw"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Required. Callback function to be executed\nwhen the request completes. This takes 2 arguments:\n`function (err, location) { ... }`\nNote: set `options.raw` to `true` to get the raw Google API results.",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "examples": [
          "var address = '1600 Amphitheatre Parkway, CA';\ngeolocator.geocode(address, function (err, location) {\n    console.log(err || location);\n});\n\n// location:\n{\n    coords: {\n        latitude: 37.4224764,\n        longitude: -122.0842499\n    },\n    address: {\n        commonName: \"\",\n        street: \"Amphitheatre Pkwy\",\n        route: \"Amphitheatre Pkwy\",\n        streetNumber: \"1600\",\n        neighborhood: \"\",\n        town: \"\",\n        city: \"Mountain View\",\n        region: \"Santa Clara County\",\n        state: \"California\",\n        stateCode: \"CA\",\n        postalCode: \"94043\",\n        country: \"United States\",\n        countryCode: \"US\"\n    },\n    formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n    type: \"ROOFTOP\",\n    placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n    timestamp: 1456795956380\n}"
        ],
        "name": "geocode",
        "longname": "geolocator.geocode",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.geocode"
      },
      {
        "comment": "/**\n     * Gets the distance and duration values based on the recommended route\n     * between start and end points.\n     * @see {@link https://developers.google.com/maps/documentation/distance-matrix/intro|Google Maps Distance Matrix API}\n     * @see {@link https://developers.google.com/maps/documentation/distance-matrix/usage-limits|Usage Limits}\n     *\n     * @param {Object} options - Required. Distance matrix options.\n     *     @param {String|Object|Array} options.origins - Required.\n     *     One or more addresses and/or an object of latitude/longitude\n     *     values, from which to calculate distance and time. If you pass an\n     *     address as a string, the service will geocode the string and\n     *     convert it to a latitude/longitude coordinate to calculate distances.\n     *     Following are valid examples:\n     * <pre>\n     * options.origins = 'London';\n     * options.origins = ['London', 'Paris'];\n     * options.origins = { latitude: 51.5085300, longitude: -0.1257400 };\n     * options.origins = [{ latitude: 51.5085300, longitude: -0.1257400 }, { latitude: 48.8534100, longitude: 2.3488000 }];\n     * </pre>\n     *     @param {String|Object|Array} options.destinations - Required.\n     *     One or more addresses and/or an object of latitude/longitude\n     *     values, from which to calculate distance and time. If you pass an\n     *     address as a string, the service will geocode the string and\n     *     convert it to a latitude/longitude coordinate to calculate distances.\n     *     @param {String} options.travelMode - Optional. Default: `geolocator.TravelMode.DRIVING`.\n     *     Type of routing requested.\n     *     @param {String} options.avoidFerries - Optional. Default: `undefined`.\n     *     If true, instructs the Distance Matrix service to avoid ferries where possible.\n     *     @param {String} options.avoidHighways - Optional. Default: `undefined`.\n     *     If true, instructs the Distance Matrix service to avoid highways where possible.\n     *     @param {String} options.avoidTolls - Optional. Default: `undefined`.\n     *     If true, instructs the Distance Matrix service to avoid toll roads where possible.\n     *     @param {Number} options.unitSystem - Optional. Default: `geolocator.UnitSystem.METRIC`.\n     *     Preferred unit system to use when displaying distance.\n     *     @param {String} options.region - Optional. Default: `undefined`.\n     *     Region code used as a bias for geocoding requests.\n     * @param {Boolean} options.raw - Optional. Default: `false`.\n     * Whether to return the raw Google API result.\n     * @param {Function} callback - Required. Callback function to be executed\n     * when the request completes, in the following signature:\n     * `function (err, result) { ... }`\n     * Note: set `options.raw` to `true` to get the raw Google API result.\n     * @returns {void}\n     *\n     * @example\n     * var options = {\n     *     origins: [{ latitude: 51.5085300, longitude: -0.1257400 }],\n     *     destinations: [{ latitude: 48.8534100, longitude: 2.3488000 }],\n     *     travelMode: geolocator.TravelMode.DRIVING,\n     *     unitSystem: geolocator.UnitSystem.METRIC\n     * };\n     * geolocator.getDistanceMatrix(options, function (err, result) {\n     *     console.log(err || result);\n     * });\n     *\n     * // result:\n     * [\n     * \t{\n     * \t\tfrom: \"449 Duncannon St, London WC2R 0DZ, UK\",\n     * \t\tto: \"1 Parvis Notre-Dame - Pl. Jean-Paul II, 75004 Paris-4E-Arrondissement, France\",\n     * \t\tdistance: {\n     * \t\t\tvalue: 475104,\n     * \t\t\ttext: \"475 km\"\n     * \t\t},\n     * \t\tduration: {\n     * \t\t\tvalue: 20193,\n     * \t\t\ttext: \"5 hours 37 mins\"\n     * \t\t},\n     * \t\tfare: undefined,\n     * \t\ttimestamp: 1456795956380\n     * \t}\n     * ]\n     */",
        "meta": {
          "range": [
            46983,
            48729
          ],
          "filename": "geolocator.js",
          "lineno": 1100,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100001355",
            "name": "geolocator.getDistanceMatrix",
            "type": "MethodDefinition",
            "paramnames": [
              "options",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Gets the distance and duration values based on the recommended route\nbetween start and end points.",
        "see": [
          "{@link https://developers.google.com/maps/documentation/distance-matrix/intro|Google Maps Distance Matrix API}",
          "{@link https://developers.google.com/maps/documentation/distance-matrix/usage-limits|Usage Limits}"
        ],
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Required. Distance matrix options.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "String",
                "Object",
                "Array"
              ]
            },
            "description": "Required.\n    One or more addresses and/or an object of latitude/longitude\n    values, from which to calculate distance and time. If you pass an\n    address as a string, the service will geocode the string and\n    convert it to a latitude/longitude coordinate to calculate distances.\n    Following are valid examples:\n<pre>\noptions.origins = 'London';\noptions.origins = ['London', 'Paris'];\noptions.origins = { latitude: 51.5085300, longitude: -0.1257400 };\noptions.origins = [{ latitude: 51.5085300, longitude: -0.1257400 }, { latitude: 48.8534100, longitude: 2.3488000 }];\n</pre>",
            "name": "options.origins"
          },
          {
            "type": {
              "names": [
                "String",
                "Object",
                "Array"
              ]
            },
            "description": "Required.\n    One or more addresses and/or an object of latitude/longitude\n    values, from which to calculate distance and time. If you pass an\n    address as a string, the service will geocode the string and\n    convert it to a latitude/longitude coordinate to calculate distances.",
            "name": "options.destinations"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Optional. Default: `geolocator.TravelMode.DRIVING`.\n    Type of routing requested.",
            "name": "options.travelMode"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Optional. Default: `undefined`.\n    If true, instructs the Distance Matrix service to avoid ferries where possible.",
            "name": "options.avoidFerries"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Optional. Default: `undefined`.\n    If true, instructs the Distance Matrix service to avoid highways where possible.",
            "name": "options.avoidHighways"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Optional. Default: `undefined`.\n    If true, instructs the Distance Matrix service to avoid toll roads where possible.",
            "name": "options.avoidTolls"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Optional. Default: `geolocator.UnitSystem.METRIC`.\n    Preferred unit system to use when displaying distance.",
            "name": "options.unitSystem"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Optional. Default: `undefined`.\n    Region code used as a bias for geocoding requests.",
            "name": "options.region"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Optional. Default: `false`.\nWhether to return the raw Google API result.",
            "name": "options.raw"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Required. Callback function to be executed\nwhen the request completes, in the following signature:\n`function (err, result) { ... }`\nNote: set `options.raw` to `true` to get the raw Google API result.",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "examples": [
          "var options = {\n    origins: [{ latitude: 51.5085300, longitude: -0.1257400 }],\n    destinations: [{ latitude: 48.8534100, longitude: 2.3488000 }],\n    travelMode: geolocator.TravelMode.DRIVING,\n    unitSystem: geolocator.UnitSystem.METRIC\n};\ngeolocator.getDistanceMatrix(options, function (err, result) {\n    console.log(err || result);\n});\n\n// result:\n[\n\t{\n\t\tfrom: \"449 Duncannon St, London WC2R 0DZ, UK\",\n\t\tto: \"1 Parvis Notre-Dame - Pl. Jean-Paul II, 75004 Paris-4E-Arrondissement, France\",\n\t\tdistance: {\n\t\t\tvalue: 475104,\n\t\t\ttext: \"475 km\"\n\t\t},\n\t\tduration: {\n\t\t\tvalue: 20193,\n\t\t\ttext: \"5 hours 37 mins\"\n\t\t},\n\t\tfare: undefined,\n\t\ttimestamp: 1456795956380\n\t}\n]"
        ],
        "name": "getDistanceMatrix",
        "longname": "geolocator.getDistanceMatrix",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.getDistanceMatrix"
      },
      {
        "comment": "/**\n     * Gets the current public IP of the client.\n     *\n     * @param {Function} callback - Required. Callback function to be executed\n     * when the request completes, in the following signature:\n     * `function (err, result) { ... }`\n     * @returns {void}\n     *\n     * @example\n     * geolocator.getIP(function (err, result) {\n     *     console.log(err || result);\n     * });\n     * // result:\n     * {\n     *     ip: \"176.232.71.155\",\n     *     timestamp: 1457573683427\n     * }\n     */",
        "meta": {
          "range": [
            52123,
            52790
          ],
          "filename": "geolocator.js",
          "lineno": 1221,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100001841",
            "name": "geolocator.getIP",
            "type": "MethodDefinition",
            "paramnames": [
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Gets the current public IP of the client.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Required. Callback function to be executed\nwhen the request completes, in the following signature:\n`function (err, result) { ... }`",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "examples": [
          "geolocator.getIP(function (err, result) {\n    console.log(err || result);\n});\n// result:\n{\n    ip: \"176.232.71.155\",\n    timestamp: 1457573683427\n}"
        ],
        "name": "getIP",
        "longname": "geolocator.getIP",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.getIP"
      },
      {
        "comment": "/**\n     * Gets timezone information for the given coordinates.\n     * @see {@link https://developers.google.com/maps/documentation/timezone/intro|Google Maps TimeZone API}\n     * @see {@link https://developers.google.com/maps/documentation/timezone/usage-limits|Usage Limits}\n     *\n     * @param {Object} options - Required. Time zone options.\n     *     @param {Number} options.latitude - Required. Latitude of location.\n     *     @param {Number} options.longitude - Required. Longitude of location.\n     *     @param {Number} options.timestamp - Optional. Default: (Current timestamp).\n     *     Specifies the desired time as seconds since midnight, January 1,\n     *     1970 UTC. This is used to determine whether or not Daylight\n     *     Savings should be applied.\n     *     @param {Boolean} options.raw - Optional. Default: `false`.\n     *     Whether to return the raw Google API result.\n     * @param {Function} callback - Required. Callback function to be executed\n     * when the request completes, in the following signature:\n     * `function (err, timezone) { ... }`\n     * Note: set `options.raw` to `true` to get the raw Google API result.\n     * @returns {void}\n     *\n     * @example\n     * var options = {\n     *     latitude: 48.8534100,\n     *     longitude: 2.3488000\n     * };\n     * geolocator.getTimeZone(options, function (err, timezone) {\n     *     console.log(err || timezone);\n     * });\n     *\n     * // timezone:\n     * {\n     *     id: \"Europe/Paris\",\n     *     name: \"Central European Standard Time\",\n     *     abbr: \"CEST\",\n     *     dstOffset: 0,\n     *     rawOffset: 3600,\n     *     timestamp: 1455733120\n     * }\n     */",
        "meta": {
          "range": [
            41207,
            43211
          ],
          "filename": "geolocator.js",
          "lineno": 974,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100001097",
            "name": "geolocator.getTimeZone",
            "type": "MethodDefinition",
            "paramnames": [
              "options",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Gets timezone information for the given coordinates.",
        "see": [
          "{@link https://developers.google.com/maps/documentation/timezone/intro|Google Maps TimeZone API}",
          "{@link https://developers.google.com/maps/documentation/timezone/usage-limits|Usage Limits}"
        ],
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Required. Time zone options.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Required. Latitude of location.",
            "name": "options.latitude"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Required. Longitude of location.",
            "name": "options.longitude"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Optional. Default: (Current timestamp).\n    Specifies the desired time as seconds since midnight, January 1,\n    1970 UTC. This is used to determine whether or not Daylight\n    Savings should be applied.",
            "name": "options.timestamp"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Optional. Default: `false`.\n    Whether to return the raw Google API result.",
            "name": "options.raw"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Required. Callback function to be executed\nwhen the request completes, in the following signature:\n`function (err, timezone) { ... }`\nNote: set `options.raw` to `true` to get the raw Google API result.",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "examples": [
          "var options = {\n    latitude: 48.8534100,\n    longitude: 2.3488000\n};\ngeolocator.getTimeZone(options, function (err, timezone) {\n    console.log(err || timezone);\n});\n\n// timezone:\n{\n    id: \"Europe/Paris\",\n    name: \"Central European Standard Time\",\n    abbr: \"CEST\",\n    dstOffset: 0,\n    rawOffset: 3600,\n    timestamp: 1455733120\n}"
        ],
        "name": "getTimeZone",
        "longname": "geolocator.getTimeZone",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.getTimeZone"
      },
      {
        "comment": "/**\n     * Checks whether HTML5 Geolocation API is supported.\n     *\n     * @return {Boolean}\n     */",
        "meta": {
          "range": [
            55316,
            55413
          ],
          "filename": "geolocator.js",
          "lineno": 1326,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002031",
            "name": "geolocator.isGeolocationSupported",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Checks whether HTML5 Geolocation API is supported.",
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            }
          }
        ],
        "name": "isGeolocationSupported",
        "longname": "geolocator.isGeolocationSupported",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.isGeolocationSupported"
      },
      {
        "comment": "/**\n     * Checks whether the given value is an instance of `GeolocatorError`.\n     *\n     * @param {*} obj - Object to be checked.\n     * @return {Boolean}\n     */",
        "meta": {
          "range": [
            55112,
            55204
          ],
          "filename": "geolocator.js",
          "lineno": 1317,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002020",
            "name": "geolocator.isGeolocatorError",
            "type": "MethodDefinition",
            "paramnames": [
              "obj"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Checks whether the given value is an instance of `GeolocatorError`.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "Object to be checked.",
            "name": "obj"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            }
          }
        ],
        "name": "isGeolocatorError",
        "longname": "geolocator.isGeolocatorError",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.isGeolocatorError"
      },
      {
        "comment": "/**\n     * Checks whether the Google Maps API is loaded.\n     *\n     * @returns {Boolean} - Returns `true` if already loaded.\n     */",
        "meta": {
          "range": [
            54596,
            54679
          ],
          "filename": "geolocator.js",
          "lineno": 1297,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100001997",
            "name": "geolocator.isGoogleLoaded",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Checks whether the Google Maps API is loaded.",
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "- Returns `true` if already loaded."
          }
        ],
        "name": "isGoogleLoaded",
        "longname": "geolocator.isGoogleLoaded",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.isGoogleLoaded"
      },
      {
        "comment": "/**\n     * Checks whether the type of the given object is an HTML5 `PositionError`.\n     *\n     * @param {*} obj - Object to be checked.\n     * @return {Boolean}\n     */",
        "meta": {
          "range": [
            54859,
            54937
          ],
          "filename": "geolocator.js",
          "lineno": 1307,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002009",
            "name": "geolocator.isPositionError",
            "type": "MethodDefinition",
            "paramnames": [
              "obj"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Checks whether the type of the given object is an HTML5 `PositionError`.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "Object to be checked.",
            "name": "obj"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            }
          }
        ],
        "name": "isPositionError",
        "longname": "geolocator.isPositionError",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.isPositionError"
      },
      {
        "comment": "/**\n     * Locates the user's location via HTML5 geolocation. This may\n     * require/prompt for user's permission. If the permission is granted we'll\n     * get the most accurate location information. Otherwise, we'll fallback to\n     * locating via user's IP (if enabled).\n     *\n     * Note that HTML5 Geolocation feature no more allows insecure origins.\n     * See {@link https://goo.gl/rStTGz|this} for more details.\n     * This means if you don't call this method from an HTTPS page, it will\n     * fail. And if `options.considerIp` is enabled, this will locate by IP.\n     *\n     *\n     * @param {Object} options - Optional. HTML5 geo-location settings with some\n     * additional options.\n     *     @param {Boolean} options.enableHighAccuracy - Optional. Default: `true`.\n     *     Specifies whether the device should provide the most accurate\n     *     position it can. Note that setting this to `true` might consume more\n     *     CPU and/or battery power; and result in slower response times.\n     *     @param {Number} options.timeout - Optional. Default: `6000`.\n     *     HTML5 position timeout setting in milliseconds. Setting this to\n     *     `Infinity` means that Geolocator won't return until the position\n     *     is available.\n     *     @param {Number} options.maximumAge - Optional. Default: `0`.\n     *     HTML5 position maximum age. Indicates the maximum age in\n     *     milliseconds of a possible cached position that is acceptable to\n     *     return. `0` means, the device cannot use a cached position and must\n     *     attempt to retrieve the real current position. If set to `Infinity`\n     *     the device must return a cached position regardless of its age.\n     *     @param {Boolean} options.considerIp - Optional. Default: `false`.\n     *     Specifies whether to fallback to IP geolocation if the HTML5\n     *     geolocation fails (e.g. user rejection).\n     *     @param {Boolean} options.addressLookup - Optional. Default: `false`.\n     *     Specifies whether to run a reverse-geocode operation for the fetched\n     *     coordinates to retrieve detailed address information. Note that this\n     *     means an additional request which requires a Google API key to be set\n     *     in the Geolocator configuration. See `{@link geolocator.config}`.\n     *     @param {Boolean} options.timezone - Optional. Default: `false`.\n     *     Specifies whether to also fetch the time zone information for the\n     *     receieved coordinates. Note that this means an additional request\n     *     which requires a Google API key to be set in the Geolocator\n     *     configuration. See `{@link geolocator.config}`.\n     * @param {Function} callback - Required. Callback function to be executed\n     * when the request completes. This takes 2 arguments:\n     * `function (err, location) { ... }`\n     *\n     * @returns {void}\n     *\n     * @example\n     * var options = {\n     *     enableHighAccuracy: true,\n     *     timeout: 6000,\n     *     maximumAge: 0,\n     *     considerIp: true,\n     *     addressLookup: true,\n     *     timezone: true\n     * };\n     * geolocator.locate(options, function (err, location) {\n     *     console.log(err || location);\n     * });\n     *\n     * // location:\n     * {\n     *     coords: {\n     *         latitude: 37.4224764,\n     *         longitude: -122.0842499,\n     *         accuracy: 30,\n     *         altitude: null,\n     *         altitudeAccuracy: null,\n     *         heading: null,\n     *         speed: null\n     *     },\n     *     address: {\n     *         commonName: \"\",\n     *         street: \"Amphitheatre Pkwy\",\n     *         route: \"Amphitheatre Pkwy\",\n     *         streetNumber: \"1600\",\n     *         neighborhood: \"\",\n     *         town: \"\",\n     *         city: \"Mountain View\",\n     *         region: \"Santa Clara County\",\n     *         state: \"California\",\n     *         stateCode: \"CA\",\n     *         postalCode: \"94043\",\n     *         country: \"United States\",\n     *         countryCode: \"US\"\n     *     },\n     *     formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n     *     type: \"ROOFTOP\",\n     *     placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n     *     timezone: {\n     *         id: \"America/Los_Angeles\",\n     *         name: \"Pacific Standard Time\",\n     *         abbr: \"PST\",\n     *         dstOffset: 0,\n     *         rawOffset: -28800\n     *     },\n     *     timestamp: 1456795956380\n     * }\n     */",
        "meta": {
          "range": [
            12705,
            13758
          ],
          "filename": "geolocator.js",
          "lineno": 348,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100000174",
            "name": "geolocator.locate",
            "type": "MethodDefinition",
            "paramnames": [
              "options",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Locates the user's location via HTML5 geolocation. This may\nrequire/prompt for user's permission. If the permission is granted we'll\nget the most accurate location information. Otherwise, we'll fallback to\nlocating via user's IP (if enabled).\n\nNote that HTML5 Geolocation feature no more allows insecure origins.\nSee {@link https://goo.gl/rStTGz|this} for more details.\nThis means if you don't call this method from an HTTPS page, it will\nfail. And if `options.considerIp` is enabled, this will locate by IP.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Optional. HTML5 geo-location settings with some\nadditional options.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Optional. Default: `true`.\n    Specifies whether the device should provide the most accurate\n    position it can. Note that setting this to `true` might consume more\n    CPU and/or battery power; and result in slower response times.",
            "name": "options.enableHighAccuracy"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Optional. Default: `6000`.\n    HTML5 position timeout setting in milliseconds. Setting this to\n    `Infinity` means that Geolocator won't return until the position\n    is available.",
            "name": "options.timeout"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Optional. Default: `0`.\n    HTML5 position maximum age. Indicates the maximum age in\n    milliseconds of a possible cached position that is acceptable to\n    return. `0` means, the device cannot use a cached position and must\n    attempt to retrieve the real current position. If set to `Infinity`\n    the device must return a cached position regardless of its age.",
            "name": "options.maximumAge"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Optional. Default: `false`.\n    Specifies whether to fallback to IP geolocation if the HTML5\n    geolocation fails (e.g. user rejection).",
            "name": "options.considerIp"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Optional. Default: `false`.\n    Specifies whether to run a reverse-geocode operation for the fetched\n    coordinates to retrieve detailed address information. Note that this\n    means an additional request which requires a Google API key to be set\n    in the Geolocator configuration. See `{@link geolocator.config}`.",
            "name": "options.addressLookup"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Optional. Default: `false`.\n    Specifies whether to also fetch the time zone information for the\n    receieved coordinates. Note that this means an additional request\n    which requires a Google API key to be set in the Geolocator\n    configuration. See `{@link geolocator.config}`.",
            "name": "options.timezone"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Required. Callback function to be executed\nwhen the request completes. This takes 2 arguments:\n`function (err, location) { ... }`",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "examples": [
          "var options = {\n    enableHighAccuracy: true,\n    timeout: 6000,\n    maximumAge: 0,\n    considerIp: true,\n    addressLookup: true,\n    timezone: true\n};\ngeolocator.locate(options, function (err, location) {\n    console.log(err || location);\n});\n\n// location:\n{\n    coords: {\n        latitude: 37.4224764,\n        longitude: -122.0842499,\n        accuracy: 30,\n        altitude: null,\n        altitudeAccuracy: null,\n        heading: null,\n        speed: null\n    },\n    address: {\n        commonName: \"\",\n        street: \"Amphitheatre Pkwy\",\n        route: \"Amphitheatre Pkwy\",\n        streetNumber: \"1600\",\n        neighborhood: \"\",\n        town: \"\",\n        city: \"Mountain View\",\n        region: \"Santa Clara County\",\n        state: \"California\",\n        stateCode: \"CA\",\n        postalCode: \"94043\",\n        country: \"United States\",\n        countryCode: \"US\"\n    },\n    formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n    type: \"ROOFTOP\",\n    placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n    timezone: {\n        id: \"America/Los_Angeles\",\n        name: \"Pacific Standard Time\",\n        abbr: \"PST\",\n        dstOffset: 0,\n        rawOffset: -28800\n    },\n    timestamp: 1456795956380\n}"
        ],
        "name": "locate",
        "longname": "geolocator.locate",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.locate"
      },
      {
        "comment": "/**\n     * Locates the user's location by IP using the given IP-Geo-Source.\n     *\n     * @param {Object} options - Required. Locate options.\n     *     @param {Boolean} options.addressLookup - Optional. Default: `false`.\n     *     Specifies whether to run a reverse-geocode operation for the fetched\n     *     coordinates to retrieve detailed address information. Since no\n     *     precise address can be fetched from an IP addres; you should only\n     *     enable this if the IP Geo-Source returns no useful address\n     *     information other than coordinates. Also, note that this means an\n     *     additional request which requires a Google API key to be set in the\n     *     Geolocator configuration. See `{@link geolocator.config}`.\n     *     @param {Boolean} options.timezone - Optional. Default: `false`.\n     *     Specifies whether to also fetch the time zone information for the\n     *     receieved coordinates. Note that this means an additional request\n     *     which requires a Google API key to be set in the Geolocator\n     *     configuration. See `{@link geolocator.config}`.\n     * @param {Function} callback - Callback function to be executed when the\n     * request completes. This takes 2 arguments:\n     * `function (err, location) { ... }`\n     * @returns {void}\n     */",
        "meta": {
          "range": [
            20961,
            22156
          ],
          "filename": "geolocator.js",
          "lineno": 525,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100000493",
            "name": "geolocator.locateByIP",
            "type": "MethodDefinition",
            "paramnames": [
              "options",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Locates the user's location by IP using the given IP-Geo-Source.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Required. Locate options.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Optional. Default: `false`.\n    Specifies whether to run a reverse-geocode operation for the fetched\n    coordinates to retrieve detailed address information. Since no\n    precise address can be fetched from an IP addres; you should only\n    enable this if the IP Geo-Source returns no useful address\n    information other than coordinates. Also, note that this means an\n    additional request which requires a Google API key to be set in the\n    Geolocator configuration. See `{@link geolocator.config}`.",
            "name": "options.addressLookup"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Optional. Default: `false`.\n    Specifies whether to also fetch the time zone information for the\n    receieved coordinates. Note that this means an additional request\n    which requires a Google API key to be set in the Geolocator\n    configuration. See `{@link geolocator.config}`.",
            "name": "options.timezone"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Callback function to be executed when the\nrequest completes. This takes 2 arguments:\n`function (err, location) { ... }`",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "name": "locateByIP",
        "longname": "geolocator.locateByIP",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.locateByIP"
      },
      {
        "comment": "/**\n     * Returns a location and accuracy radius based on information about cell\n     * towers and WiFi nodes that the mobile client can detect; via the Google\n     * Maps Geolocation API.\n     * @see {@link https://developers.google.com/maps/documentation/geolocation/intro|Google Maps Geolocation API}\n     * @see {@link https://developers.google.com/maps/documentation/geolocation/usage-limits|Usage Limits}\n     *\n     * @param {Object} options - Optional. Default: `undefined`.\n     * Geolocation options.\n     *     @param {Number} options.homeMobileCountryCode - Optional. Default: `undefined`.\n     *     The mobile country code (MCC) for the device's home network.\n     *     @param {Number} options.homeMobileNetworkCode - Optional. Default: `undefined`.\n     *     The mobile network code (MNC) for the device's home network.\n     *     @param {String} options.radioType - Optional. Default: `undefined`.\n     *     The mobile radio type. See `{@link geolocator.RadioType}` enumeration\n     *     for possible values. While this field is optional, it should be\n     *     included if a value is available, for more accurate results.\n     *     @param {string} options.carrier - Optional. Default: `undefined`.\n     *     The carrier name. e.g. \"Vodafone\"\n     *     @param {Boolean} options.considerIp - Optional. Default: `false`.\n     *     Specifies whether to fallback to IP geolocation if wifi and cell\n     *     tower signals are not available. Note that the IP address in the\n     *     request header may not be the IP of the device. Set `considerIp` to\n     *     false to disable fall back.\n     *     @param {Array} options.cellTowers - Optional. Default: `undefined`.\n     *     An array of cell tower objects.\n     *     See {@link https://developers.google.com/maps/documentation/geolocation/intro#cell_tower_object|Cell tower objects} for details.\n     *     @param {Array} options.wifiAccessPoints - Optional. Default: `undefined`.\n     *     An array of WiFi access point objects.\n     *     See {@link https://developers.google.com/maps/documentation/geolocation/intro#wifi_access_point_object|WiFi access point objects} for details.\n     *     @param {Boolean} options.addressLookup - Optional. Default: `false`.\n     *     Specifies whether to run a reverse-geocode operation for the fetched\n     *     coordinates to retrieve detailed address information. Note that this\n     *     means an additional request which requires a Google API key to be set\n     *     in the Geolocator configuration. See `{@link geolocator.config}`.\n     *     @param {Boolean} options.timezone - Optional. Default: `false`.\n     *     Specifies whether to also fetch the time zone information for the\n     *     receieved coordinates. Note that this means an additional request\n     *     which requires a Google API key to be set in the Geolocator\n     *     configuration. See `{@link geolocator.config}`.\n     *     @param {Boolean} options.raw - Optional. Default: `false`\n     *     \tWhether to return the raw Google API result.\n     * @param {Function} callback - Required. Callback function to be executed\n     * when the request completes. This takes 2 arguments:\n     * `function (err, location) { ... }`\n     *\n     * @returns {void}\n     *\n     * @example\n     * var options = {\n     *     homeMobileCountryCode: 310,\n     *     homeMobileNetworkCode: 410,\n     *     carrier: 'Vodafone',\n     *     radioType: geolocator.RadioType.GSM,\n     *     considerIp: true,\n     *     addressLookup: false,\n     *     timezone: false\n     * };\n     * geolocator.locateByMobile(options, function (err, location) {\n     *     console.log(err || location);\n     * });\n     */",
        "meta": {
          "range": [
            17458,
            19642
          ],
          "filename": "geolocator.js",
          "lineno": 437,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100000286",
            "name": "geolocator.locateByMobile",
            "type": "MethodDefinition",
            "paramnames": [
              "options",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns a location and accuracy radius based on information about cell\ntowers and WiFi nodes that the mobile client can detect; via the Google\nMaps Geolocation API.",
        "see": [
          "{@link https://developers.google.com/maps/documentation/geolocation/intro|Google Maps Geolocation API}",
          "{@link https://developers.google.com/maps/documentation/geolocation/usage-limits|Usage Limits}"
        ],
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Optional. Default: `undefined`.\nGeolocation options.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Optional. Default: `undefined`.\n    The mobile country code (MCC) for the device's home network.",
            "name": "options.homeMobileCountryCode"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Optional. Default: `undefined`.\n    The mobile network code (MNC) for the device's home network.",
            "name": "options.homeMobileNetworkCode"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Optional. Default: `undefined`.\n    The mobile radio type. See `{@link geolocator.RadioType}` enumeration\n    for possible values. While this field is optional, it should be\n    included if a value is available, for more accurate results.",
            "name": "options.radioType"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Optional. Default: `undefined`.\n    The carrier name. e.g. \"Vodafone\"",
            "name": "options.carrier"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Optional. Default: `false`.\n    Specifies whether to fallback to IP geolocation if wifi and cell\n    tower signals are not available. Note that the IP address in the\n    request header may not be the IP of the device. Set `considerIp` to\n    false to disable fall back.",
            "name": "options.considerIp"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Optional. Default: `undefined`.\n    An array of cell tower objects.\n    See {@link https://developers.google.com/maps/documentation/geolocation/intro#cell_tower_object|Cell tower objects} for details.",
            "name": "options.cellTowers"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Optional. Default: `undefined`.\n    An array of WiFi access point objects.\n    See {@link https://developers.google.com/maps/documentation/geolocation/intro#wifi_access_point_object|WiFi access point objects} for details.",
            "name": "options.wifiAccessPoints"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Optional. Default: `false`.\n    Specifies whether to run a reverse-geocode operation for the fetched\n    coordinates to retrieve detailed address information. Note that this\n    means an additional request which requires a Google API key to be set\n    in the Geolocator configuration. See `{@link geolocator.config}`.",
            "name": "options.addressLookup"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Optional. Default: `false`.\n    Specifies whether to also fetch the time zone information for the\n    receieved coordinates. Note that this means an additional request\n    which requires a Google API key to be set in the Geolocator\n    configuration. See `{@link geolocator.config}`.",
            "name": "options.timezone"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Optional. Default: `false`\n    \tWhether to return the raw Google API result.",
            "name": "options.raw"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Required. Callback function to be executed\nwhen the request completes. This takes 2 arguments:\n`function (err, location) { ... }`",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "examples": [
          "var options = {\n    homeMobileCountryCode: 310,\n    homeMobileNetworkCode: 410,\n    carrier: 'Vodafone',\n    radioType: geolocator.RadioType.GSM,\n    considerIp: true,\n    addressLookup: false,\n    timezone: false\n};\ngeolocator.locateByMobile(options, function (err, location) {\n    console.log(err || location);\n});"
        ],
        "name": "locateByMobile",
        "longname": "geolocator.locateByMobile",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.locateByMobile"
      },
      {
        "comment": "/**\n     * Enumerates Google API location types.\n     * See [details](geolocator.{enums}.md#geolocator.LocationType).\n     * @see {@link geolocator.(enums).md|All Enumerations}\n     * @enum {String}\n     * @readonly\n     * @static\n     */",
        "meta": {
          "range": [
            4311,
            4379
          ],
          "filename": "geolocator.js",
          "lineno": 145,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100000107",
            "name": "geolocator.LocationType",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Enumerates Google API location types.\nSee [details](geolocator.{enums}.md#geolocator.LocationType).",
        "see": [
          "{@link geolocator.(enums).md|All Enumerations}"
        ],
        "kind": "member",
        "isEnum": true,
        "type": {
          "names": [
            "String"
          ]
        },
        "readonly": true,
        "scope": "static",
        "name": "LocationType",
        "longname": "geolocator.LocationType",
        "memberof": "geolocator",
        "$longname": "geolocator.LocationType"
      },
      {
        "comment": "/**\n     * Enumerates mobile radio types.\n     * See [details](geolocator.{enums}.md#geolocator.RadioType).\n     * @see {@link geolocator.(enums).md|All Enumerations}\n     * @enum {String}\n     * @readonly\n     * @static\n     */",
        "meta": {
          "range": [
            5236,
            5298
          ],
          "filename": "geolocator.js",
          "lineno": 181,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100000131",
            "name": "geolocator.RadioType",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Enumerates mobile radio types.\nSee [details](geolocator.{enums}.md#geolocator.RadioType).",
        "see": [
          "{@link geolocator.(enums).md|All Enumerations}"
        ],
        "kind": "member",
        "isEnum": true,
        "type": {
          "names": [
            "String"
          ]
        },
        "readonly": true,
        "scope": "static",
        "name": "RadioType",
        "longname": "geolocator.RadioType",
        "memberof": "geolocator",
        "$longname": "geolocator.RadioType"
      },
      {
        "comment": "/**\n     * Converts the given geographic coordinates into a human-readable address\n     * information.\n     * @see {@link https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding|Google Maps (Reverse) Geocoding API}\n     * @see {@link https://developers.google.com/maps/documentation/geocoding/usage-limits|Usage Limits}\n     * @alias geolocator.addressLookup\n     *\n     * @param {Object|String} options - Required. Either the `placeId` of the\n     * location or Reverse Geocoding options with the following properties.\n     *     @param {Number} options.latitude - Required if `placeId` is omitted.\n     *     Latitude of the target location.\n     *     @param {Number} options.longitude - Required if `placeId` is omitted.\n     *     Longitude of the target location.\n     *     @param {String} options.placeId - Required if `latitude` and `longitude`\n     *     are omitted. The place ID of the place for which you wish to\n     *     obtain the human-readable address. The place ID is a unique\n     *     identifier that can be used with other Google APIs. Note that if\n     *     `placeId` is set, `latitude` and `longitude` are ignored.\n     *     @param {Boolean} options.raw - Optional. Default: `false`.\n     *     Whether to return the raw Google API result.\n     * @param {Function} callback - Required. Callback function to be executed\n     * when the request completes. This takes 2 arguments:\n     * `function (err, location) { ... }`\n     * Note: set `options.raw` to `true` to get the raw Google API results.\n     * @returns {void}\n     *\n     * @example\n     * var coords = {\n     *     latitude: 37.4224764,\n     *     longitude: -122.0842499\n     * };\n     * geolocator.reverseGeocode(coords, function (err, location) {\n     *     console.log(err || location);\n     * });\n     *\n     * // location:\n     * {\n     *     coords: {\n     *         latitude: 37.4224764,\n     *         longitude: -122.0842499\n     *     },\n     *     address: {\n     *         commonName: \"\",\n     *         street: \"Amphitheatre Pkwy\",\n     *         route: \"Amphitheatre Pkwy\",\n     *         streetNumber: \"1600\",\n     *         neighborhood: \"\",\n     *         town: \"\",\n     *         city: \"Mountain View\",\n     *         region: \"Santa Clara County\",\n     *         state: \"California\",\n     *         stateCode: \"CA\",\n     *         postalCode: \"94043\",\n     *         country: \"United States\",\n     *         countryCode: \"US\"\n     *     },\n     *     formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n     *     type: \"ROOFTOP\",\n     *     placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n     *     timestamp: 1456795956380\n     * }\n     */",
        "meta": {
          "range": [
            38530,
            39528
          ],
          "filename": "geolocator.js",
          "lineno": 907,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100000953",
            "name": "geolocator.reverseGeocode",
            "type": "MethodDefinition",
            "paramnames": [
              "options",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Converts the given geographic coordinates into a human-readable address\ninformation.",
        "see": [
          "{@link https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding|Google Maps (Reverse) Geocoding API}",
          "{@link https://developers.google.com/maps/documentation/geocoding/usage-limits|Usage Limits}"
        ],
        "alias": "geolocator.addressLookup",
        "params": [
          {
            "type": {
              "names": [
                "Object",
                "String"
              ]
            },
            "description": "Required. Either the `placeId` of the\nlocation or Reverse Geocoding options with the following properties.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Required if `placeId` is omitted.\n    Latitude of the target location.",
            "name": "options.latitude"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Required if `placeId` is omitted.\n    Longitude of the target location.",
            "name": "options.longitude"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Required if `latitude` and `longitude`\n    are omitted. The place ID of the place for which you wish to\n    obtain the human-readable address. The place ID is a unique\n    identifier that can be used with other Google APIs. Note that if\n    `placeId` is set, `latitude` and `longitude` are ignored.",
            "name": "options.placeId"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Optional. Default: `false`.\n    Whether to return the raw Google API result.",
            "name": "options.raw"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Required. Callback function to be executed\nwhen the request completes. This takes 2 arguments:\n`function (err, location) { ... }`\nNote: set `options.raw` to `true` to get the raw Google API results.",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "examples": [
          "var coords = {\n    latitude: 37.4224764,\n    longitude: -122.0842499\n};\ngeolocator.reverseGeocode(coords, function (err, location) {\n    console.log(err || location);\n});\n\n// location:\n{\n    coords: {\n        latitude: 37.4224764,\n        longitude: -122.0842499\n    },\n    address: {\n        commonName: \"\",\n        street: \"Amphitheatre Pkwy\",\n        route: \"Amphitheatre Pkwy\",\n        streetNumber: \"1600\",\n        neighborhood: \"\",\n        town: \"\",\n        city: \"Mountain View\",\n        region: \"Santa Clara County\",\n        state: \"California\",\n        stateCode: \"CA\",\n        postalCode: \"94043\",\n        country: \"United States\",\n        countryCode: \"US\"\n    },\n    formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n    type: \"ROOFTOP\",\n    placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n    timestamp: 1456795956380\n}"
        ],
        "name": "addressLookup",
        "longname": "geolocator.addressLookup",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.reverseGeocode"
      },
      {
        "comment": "/**\n     * Sets the IP Geo-Source to be used for fetching location information\n     * by user's IP; which is internally used by `geolocator.locateByIP()`\n     * method.\n     *\n     * @param {Object} options - Required. IP Geo-Source options.\n     *     @param {String} options.provider - Optional. Default: `undefined`.\n     *     Source or service provider's name.\n     *     @param {String} options.url - Required.\n     *     Source URL without the callback query parameter. The callback name\n     *     (if supported) should be set via `options.callbackParam`. Also, make\n     *     sure the service supports the protocol you use in the URL. If it\n     *     supports both HTTP and HTTPS, you can omit the protocol. In this\n     *     case, it will be determined via Geolocator configuration.\n     *     See `{@link geolocator.config}`.\n     *     NOTE: Do not forget to include your API key in the query parameters of the\n     *     URL, if you have one.\n     *     @param {String} options.callbackParam - Optional. Default: `undefined`.\n     *     If JSON callback is supported, pass the name of the callback\n     *     parameter, defined by the provider.\n     *     @param {Object} options.globalVar - Optional. Default: `undefined`.\n     *     Set this instead of `options.callbackParam` if the service does not\n     *     support JSON callbacks, but weirdly set a global variable in the\n     *     document. For example, if the response is `Geo = { lat, lng }`, you\n     *     should set this to `\"Geo\"`.\n     *     @param {Object} options.schema - Optional. Default: `undefined`.\n     *     Schema object to be used to re-structure the response returned from\n     *     the service. Set the response object's keys as values of a custom\n     *     object to map the format you like. For example; let's say you\n     *     want all responses in the following format: `{ latitude, longitude }`\n     *     and want to omit all other properties of the response.\n     *     If the service returns a response like\n     *     `{ lat: 40.112233, lng: 10.112233, otherProp: 'hello' }`.\n     *     Then you should set the following schema:\n     *     `{ latitude: 'lat', longitude: 'lng' }`.\n     *\n     * @return {geolocator}\n     */",
        "meta": {
          "range": [
            24968,
            25695
          ],
          "filename": "geolocator.js",
          "lineno": 618,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100000593",
            "name": "geolocator.setIPGeoSource",
            "type": "MethodDefinition",
            "paramnames": [
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the IP Geo-Source to be used for fetching location information\nby user's IP; which is internally used by `geolocator.locateByIP()`\nmethod.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Required. IP Geo-Source options.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Optional. Default: `undefined`.\n    Source or service provider's name.",
            "name": "options.provider"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Required.\n    Source URL without the callback query parameter. The callback name\n    (if supported) should be set via `options.callbackParam`. Also, make\n    sure the service supports the protocol you use in the URL. If it\n    supports both HTTP and HTTPS, you can omit the protocol. In this\n    case, it will be determined via Geolocator configuration.\n    See `{@link geolocator.config}`.\n    NOTE: Do not forget to include your API key in the query parameters of the\n    URL, if you have one.",
            "name": "options.url"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Optional. Default: `undefined`.\n    If JSON callback is supported, pass the name of the callback\n    parameter, defined by the provider.",
            "name": "options.callbackParam"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Optional. Default: `undefined`.\n    Set this instead of `options.callbackParam` if the service does not\n    support JSON callbacks, but weirdly set a global variable in the\n    document. For example, if the response is `Geo = { lat, lng }`, you\n    should set this to `\"Geo\"`.",
            "name": "options.globalVar"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Optional. Default: `undefined`.\n    Schema object to be used to re-structure the response returned from\n    the service. Set the response object's keys as values of a custom\n    object to map the format you like. For example; let's say you\n    want all responses in the following format: `{ latitude, longitude }`\n    and want to omit all other properties of the response.\n    If the service returns a response like\n    `{ lat: 40.112233, lng: 10.112233, otherProp: 'hello' }`.\n    Then you should set the following schema:\n    `{ latitude: 'lat', longitude: 'lng' }`.",
            "name": "options.schema"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "geolocator"
              ]
            }
          }
        ],
        "name": "setIPGeoSource",
        "longname": "geolocator.setIPGeoSource",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.setIPGeoSource"
      },
      {
        "comment": "/**\n     * Enumerates Google API status codes.\n     * See [details](geolocator.{enums}.md#geolocator.Status).\n     * @see {@link geolocator.(enums).md|All Enumerations}\n     * @enum {String}\n     * @readonly\n     * @static\n     */",
        "meta": {
          "range": [
            4006,
            4062
          ],
          "filename": "geolocator.js",
          "lineno": 133,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100000099",
            "name": "geolocator.Status",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Enumerates Google API status codes.\nSee [details](geolocator.{enums}.md#geolocator.Status).",
        "see": [
          "{@link geolocator.(enums).md|All Enumerations}"
        ],
        "kind": "member",
        "isEnum": true,
        "type": {
          "names": [
            "String"
          ]
        },
        "readonly": true,
        "scope": "static",
        "name": "Status",
        "longname": "geolocator.Status",
        "memberof": "geolocator",
        "$longname": "geolocator.Status"
      },
      {
        "comment": "/**\n     * Enumerates Google API travel modes.\n     * See [details](geolocator.{enums}.md#geolocator.TravelMode).\n     * @see {@link geolocator.(enums).md|All Enumerations}\n     * @enum {String}\n     * @readonly\n     * @static\n     */",
        "meta": {
          "range": [
            4624,
            4688
          ],
          "filename": "geolocator.js",
          "lineno": 157,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100000115",
            "name": "geolocator.TravelMode",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Enumerates Google API travel modes.\nSee [details](geolocator.{enums}.md#geolocator.TravelMode).",
        "see": [
          "{@link geolocator.(enums).md|All Enumerations}"
        ],
        "kind": "member",
        "isEnum": true,
        "type": {
          "names": [
            "String"
          ]
        },
        "readonly": true,
        "scope": "static",
        "name": "TravelMode",
        "longname": "geolocator.TravelMode",
        "memberof": "geolocator",
        "$longname": "geolocator.TravelMode"
      },
      {
        "comment": "/**\n     * Enumerates Google API unit systems.\n     * See [details](geolocator.{enums}.md#geolocator.UnitSystem).\n     * @see {@link geolocator.(enums).md|All Enumerations}\n     * @enum {Number}\n     * @readonly\n     * @static\n     */",
        "meta": {
          "range": [
            4933,
            4997
          ],
          "filename": "geolocator.js",
          "lineno": 169,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100000123",
            "name": "geolocator.UnitSystem",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Enumerates Google API unit systems.\nSee [details](geolocator.{enums}.md#geolocator.UnitSystem).",
        "see": [
          "{@link geolocator.(enums).md|All Enumerations}"
        ],
        "kind": "member",
        "isEnum": true,
        "type": {
          "names": [
            "Number"
          ]
        },
        "readonly": true,
        "scope": "static",
        "name": "UnitSystem",
        "longname": "geolocator.UnitSystem",
        "memberof": "geolocator",
        "$longname": "geolocator.UnitSystem"
      },
      {
        "comment": "/**\n     * Geo-utility constants and methods.\n     * See [detailed documentation](geolocator.utils.md).\n     * @type {Object}\n     * @mixes geoUtils\n     */",
        "meta": {
          "range": [
            3040,
            3091
          ],
          "filename": "geolocator.js",
          "lineno": 104,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100000087",
            "name": "geolocator.utils",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Geo-utility constants and methods.\nSee [detailed documentation](geolocator.utils.md).",
        "type": {
          "names": [
            "Object"
          ]
        },
        "mixes": [
          "geoUtils"
        ],
        "name": "utils",
        "longname": "geolocator.utils",
        "kind": "member",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.utils"
      },
      {
        "comment": "/**\n     * Registers a handler for watching the user's location via HTML5\n     * geolocation; that is triggered each time the position of the device\n     * changes. This may require/prompt for user's permission.\n     *\n     * @param {Object} options - Optional. HTML5 geo-location settings.\n     *     @param {Boolean} options.enableHighAccuracy - Optional. Default: `true`.\n     *     Specifies whether the device should provide the most accurate\n     *     position it can. Note that setting this to `true` might consume more\n     *     CPU and/or battery power; and result in slower response times.\n     *     @param {Number} options.timeout - Optional. Default: `6000`.\n     *     HTML5 position timeout setting in milliseconds. Setting this to\n     *     `Infinity` means that Geolocator won't return until the position\n     *     is available.\n     *     @param {Number} options.maximumAge - Optional. Default: `0`.\n     *     HTML5 position maximum age. Indicates the maximum age in\n     *     milliseconds of a possible cached position that is acceptable to\n     *     return. `0` means, the device cannot use a cached position and must\n     *     attempt to retrieve the real current position. If set to `Infinity`\n     *     the device must return a cached position regardless of its age.\n     *     @param {Object} options.target - Optional. Default: `undefined`.\n     *     Object that defines the target location and settings; that when the\n     *     location is reached, the watcher will auto-clear itself and invoke\n     *     the callback.\n     *     @param {Number} options.target.latitude - Required.\n     *     The `latitude` of the target location.\n     *     @param {Number} options.target.longitude - Required.\n     *     The `longitude` of the target location.\n     *     @param {Number} options.target.radius - Optional. Default: `0.5`.\n     *     The radius, in other words; the minimum distance (in kilometers or\n     *     miles) to the target point that should be reached.\n     *     @param {Number} options.target.unitSystem - Optional. Default: `geolocator.UnitSystem.METRIC`.\n     *     Unit system to be used for target radius.\n     *     See `{@link geolocator.UnitSystem}` enumeration for possible values.\n     * @param {Function} callback - Required. Callback function to be executed\n     * when the request completes. This takes 2 arguments:\n     * `function (err, position) { ... }`. If `options.target` is set, the\n     * `position` argument will also include a `targetReached:Boolean` property.\n     *\n     * @returns {Object} - A watcher object that provides a\n     * `.clear(delay:Number)` method to clear the watcher when needed.\n     * The `delay` argument can be set (in milliseconds) to clear in a later\n     * time. Omitting this argument will clear the watcher immediately.\n     * You should always call this method, except if you've set up a target;\n     * which will auto-clear the watcher when reached.\n     *\n     * @example\n     * // Watch my position for 5 minutes.\n     * var options = { enableHighAccuracy: true, timeout: 6000, maximumAge: 0 };\n     * var watcher = geolocator.watch(options, function (err, location) {\n     *     console.log(err || location);\n     * });\n     * console.log(watcher.id); // ID of the watcher\n     * watcher.clear(300000); // clear after 5 minutes.\n     *\n     * // Watch my position until I'm 350 meters near Disneyland Park.\n     * options.target = {\n     *     latitude: 33.8120918,\n     *     longitude: -117.9233569,\n     *     radius: 0.35,\n     *     unitSystem: geolocator.UnitSystem.METRIC\n     * };\n     * watcher = geolocator.watch(options, function (err, location) {\n     *     if (location.targetReached) {\n     *         console.log(watcher.id); // null — watcher is cleared.\n     *     } else {\n     *         console.log(watcher.id); // 2 — watcher is active.\n     *     }\n     * });\n     */",
        "meta": {
          "range": [
            29600,
            31414
          ],
          "filename": "geolocator.js",
          "lineno": 701,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100000646",
            "name": "geolocator.watch",
            "type": "MethodDefinition",
            "paramnames": [
              "options",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Registers a handler for watching the user's location via HTML5\ngeolocation; that is triggered each time the position of the device\nchanges. This may require/prompt for user's permission.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Optional. HTML5 geo-location settings.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Optional. Default: `true`.\n    Specifies whether the device should provide the most accurate\n    position it can. Note that setting this to `true` might consume more\n    CPU and/or battery power; and result in slower response times.",
            "name": "options.enableHighAccuracy"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Optional. Default: `6000`.\n    HTML5 position timeout setting in milliseconds. Setting this to\n    `Infinity` means that Geolocator won't return until the position\n    is available.",
            "name": "options.timeout"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Optional. Default: `0`.\n    HTML5 position maximum age. Indicates the maximum age in\n    milliseconds of a possible cached position that is acceptable to\n    return. `0` means, the device cannot use a cached position and must\n    attempt to retrieve the real current position. If set to `Infinity`\n    the device must return a cached position regardless of its age.",
            "name": "options.maximumAge"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Optional. Default: `undefined`.\n    Object that defines the target location and settings; that when the\n    location is reached, the watcher will auto-clear itself and invoke\n    the callback.",
            "name": "options.target"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Required.\n    The `latitude` of the target location.",
            "name": "options.target.latitude"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Required.\n    The `longitude` of the target location.",
            "name": "options.target.longitude"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Optional. Default: `0.5`.\n    The radius, in other words; the minimum distance (in kilometers or\n    miles) to the target point that should be reached.",
            "name": "options.target.radius"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Optional. Default: `geolocator.UnitSystem.METRIC`.\n    Unit system to be used for target radius.\n    See `{@link geolocator.UnitSystem}` enumeration for possible values.",
            "name": "options.target.unitSystem"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Required. Callback function to be executed\nwhen the request completes. This takes 2 arguments:\n`function (err, position) { ... }`. If `options.target` is set, the\n`position` argument will also include a `targetReached:Boolean` property.",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "- A watcher object that provides a\n`.clear(delay:Number)` method to clear the watcher when needed.\nThe `delay` argument can be set (in milliseconds) to clear in a later\ntime. Omitting this argument will clear the watcher immediately.\nYou should always call this method, except if you've set up a target;\nwhich will auto-clear the watcher when reached."
          }
        ],
        "examples": [
          "// Watch my position for 5 minutes.\nvar options = { enableHighAccuracy: true, timeout: 6000, maximumAge: 0 };\nvar watcher = geolocator.watch(options, function (err, location) {\n    console.log(err || location);\n});\nconsole.log(watcher.id); // ID of the watcher\nwatcher.clear(300000); // clear after 5 minutes.\n\n// Watch my position until I'm 350 meters near Disneyland Park.\noptions.target = {\n    latitude: 33.8120918,\n    longitude: -117.9233569,\n    radius: 0.35,\n    unitSystem: geolocator.UnitSystem.METRIC\n};\nwatcher = geolocator.watch(options, function (err, location) {\n    if (location.targetReached) {\n        console.log(watcher.id); // null — watcher is cleared.\n    } else {\n        console.log(watcher.id); // 2 — watcher is active.\n    }\n});"
        ],
        "name": "watch",
        "longname": "geolocator.watch",
        "kind": "function",
        "memberof": "geolocator",
        "scope": "static",
        "$longname": "geolocator.watch"
      }
    ]
  },
  {
    "comment": "/**\n * Geolocator Error class that provides a common type of error object for the\n * various APIs implemented in Geolocator. All callbacks of Geolocator will\n * include an instance of this object as the first argument; if the\n * corresponding operation fails. Also all thrown errors will be an instance of\n * this object. This object also enumerates the Geolocator Error codes with its\n * enumerable properties. This object can be publicly accessed via\n * `geolocator.Error`.\n */",
    "meta": {
      "range": [
        515,
        8547
      ],
      "filename": "geo.error.js",
      "lineno": 12,
      "path": "/Users/oy/developer/javascript/geolocator/src/core",
      "code": {
        "id": "astnode100002257",
        "name": "GeolocatorError",
        "type": "ClassDeclaration",
        "paramnames": [
          "code",
          "message"
        ]
      }
    },
    "classdesc": "Geolocator Error class that provides a common type of error object for the\nvarious APIs implemented in Geolocator. All callbacks of Geolocator will\ninclude an instance of this object as the first argument; if the\ncorresponding operation fails. Also all thrown errors will be an instance of\nthis object. This object also enumerates the Geolocator Error codes with its\nenumerable properties. This object can be publicly accessed via\n`geolocator.Error`.",
    "name": "GeolocatorError",
    "longname": "GeolocatorError",
    "kind": "class",
    "scope": "global",
    "description": "Costructs a new instance of `geolocator.Error`.",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Optional. Default: `geolocator.Error.UNKNOWN_ERROR`.\nAny valid Geolocator Error code.",
        "name": "code"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Optional.\nError message. If omitted, this will be set to `code`.",
        "name": "message"
      }
    ],
    "$longname": "GeolocatorError",
    "$members": [
      {
        "comment": "/**\n     * Creates a new instance of `geolocator.Error` from the given value.\n     * @memberof GeolocatorError\n     *\n     * @param {*} err - Optional. Value to be transformed.\n     * This is used to determine the proper error code for the created\n     * instance. If an `Error` or `Object` is passed, its `message` property is\n     * checked if it matches any of the valid error codes. If omitted or no\n     * match is found, error code `geolocator.Error.UNKNOWN_ERROR` will be used\n     * as default.\n     * @returns {GeolocatorError}\n     *\n     * @example\n     * var error = geolocator.Error.create();\n     * console.log(error.code); // \"UNKNOWN_ERROR\"\n     * error = geolocator.Error.create(geolocator.Error.GEOLOCATION_NOT_SUPPORTED);\n     * console.log(error.code); // \"GEOLOCATION_NOT_SUPPORTED\"\n     */",
        "meta": {
          "range": [
            2892,
            4012
          ],
          "filename": "geo.error.js",
          "lineno": 76,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002355",
            "name": "GeolocatorError.create",
            "type": "MethodDefinition",
            "paramnames": [
              "err"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Creates a new instance of `geolocator.Error` from the given value.",
        "memberof": "GeolocatorError",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "Optional. Value to be transformed.\nThis is used to determine the proper error code for the created\ninstance. If an `Error` or `Object` is passed, its `message` property is\nchecked if it matches any of the valid error codes. If omitted or no\nmatch is found, error code `geolocator.Error.UNKNOWN_ERROR` will be used\nas default.",
            "name": "err"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "GeolocatorError"
              ]
            }
          }
        ],
        "examples": [
          "var error = geolocator.Error.create();\nconsole.log(error.code); // \"UNKNOWN_ERROR\"\nerror = geolocator.Error.create(geolocator.Error.GEOLOCATION_NOT_SUPPORTED);\nconsole.log(error.code); // \"GEOLOCATION_NOT_SUPPORTED\""
        ],
        "name": "create",
        "longname": "GeolocatorError.create",
        "kind": "function",
        "scope": "static",
        "$longname": "GeolocatorError.create"
      },
      {
        "comment": "/**\n * Indicates that you've exceeded your daily limit for Google API(s).\n * @type {String}\n */",
        "meta": {
          "range": [
            11716,
            11777
          ],
          "filename": "geo.error.js",
          "lineno": 323,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002876",
            "name": "GeolocatorError.DAILY_LIMIT_EXCEEDED",
            "type": "Literal",
            "value": "DAILY_LIMIT_EXCEEDED",
            "paramnames": []
          }
        },
        "description": "Indicates that you've exceeded your daily limit for Google API(s).",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "DAILY_LIMIT_EXCEEDED",
        "longname": "GeolocatorError.DAILY_LIMIT_EXCEEDED",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.DAILY_LIMIT_EXCEEDED"
      },
      {
        "comment": "/**\n     * Creates a new instance of `geolocator.Error` from the given Google API\n     * response object. Since Geolocator implements various Google APIs,\n     * we might receive responses if different structures. For example,\n     * some APIs return a response object with a `status:String` property\n     * (such as the TimeZone API) and some return responses with an\n     * `error:Object` property. This method will determine the correct reason or\n     * message and return a consistent error object.\n     * @memberof GeolocatorError\n     *\n     * @param {Object|String} response - Required.\n     * Google API response (Object) or status (String) to be transformed.\n     * @returns {GeolocatorError}\n     *\n     * @example\n     * var error = geolocator.Error.fromGoogleResponse(googleResponse);\n     * console.log(error.code); // \"GOOGLE_KEY_INVALID\"\n     */",
        "meta": {
          "range": [
            4883,
            7733
          ],
          "filename": "geo.error.js",
          "lineno": 126,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002490",
            "name": "GeolocatorError.fromGoogleResponse",
            "type": "MethodDefinition",
            "paramnames": [
              "response"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Creates a new instance of `geolocator.Error` from the given Google API\nresponse object. Since Geolocator implements various Google APIs,\nwe might receive responses if different structures. For example,\nsome APIs return a response object with a `status:String` property\n(such as the TimeZone API) and some return responses with an\n`error:Object` property. This method will determine the correct reason or\nmessage and return a consistent error object.",
        "memberof": "GeolocatorError",
        "params": [
          {
            "type": {
              "names": [
                "Object",
                "String"
              ]
            },
            "description": "Required.\nGoogle API response (Object) or status (String) to be transformed.",
            "name": "response"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "GeolocatorError"
              ]
            }
          }
        ],
        "examples": [
          "var error = geolocator.Error.fromGoogleResponse(googleResponse);\nconsole.log(error.code); // \"GOOGLE_KEY_INVALID\""
        ],
        "name": "fromGoogleResponse",
        "longname": "GeolocatorError.fromGoogleResponse",
        "kind": "function",
        "scope": "static",
        "$longname": "GeolocatorError.fromGoogleResponse"
      },
      {
        "comment": "/**\n *  Indicates that HTML5 Geolocation API is not supported by the browser.\n *  @type {String}\n */",
        "meta": {
          "range": [
            9394,
            9465
          ],
          "filename": "geo.error.js",
          "lineno": 253,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002804",
            "name": "GeolocatorError.GEOLOCATION_NOT_SUPPORTED",
            "type": "Literal",
            "value": "GEOLOCATION_NOT_SUPPORTED",
            "paramnames": []
          }
        },
        "description": "Indicates that HTML5 Geolocation API is not supported by the browser.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "GEOLOCATION_NOT_SUPPORTED",
        "longname": "GeolocatorError.GEOLOCATION_NOT_SUPPORTED",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.GEOLOCATION_NOT_SUPPORTED"
      },
      {
        "comment": "/**\n * Indicates that Google API could not be loaded.\n * @type {String}\n */",
        "meta": {
          "range": [
            11032,
            11087
          ],
          "filename": "geo.error.js",
          "lineno": 305,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002858",
            "name": "GeolocatorError.GOOGLE_API_FAILED",
            "type": "Literal",
            "value": "GOOGLE_API_FAILED",
            "paramnames": []
          }
        },
        "description": "Indicates that Google API could not be loaded.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "GOOGLE_API_FAILED",
        "longname": "GeolocatorError.GOOGLE_API_FAILED",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.GOOGLE_API_FAILED"
      },
      {
        "comment": "/**\n * Indicates that your Google API key is not valid. Please ensure that you've\n * included the entire key, and that you've either purchased the API or have\n * enabled billing and activated the API to obtain the free quota.\n * @type {String}\n */",
        "meta": {
          "range": [
            12027,
            12084
          ],
          "filename": "geo.error.js",
          "lineno": 330,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002882",
            "name": "GeolocatorError.GOOGLE_KEY_INVALID",
            "type": "Literal",
            "value": "GOOGLE_KEY_INVALID",
            "paramnames": []
          }
        },
        "description": "Indicates that your Google API key is not valid. Please ensure that you've\nincluded the entire key, and that you've either purchased the API or have\nenabled billing and activated the API to obtain the free quota.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "GOOGLE_KEY_INVALID",
        "longname": "GeolocatorError.GOOGLE_KEY_INVALID",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.GOOGLE_KEY_INVALID"
      },
      {
        "comment": "/**\n * Indicates that an internal error (such as XHR cross-domain, etc) has occured.\n * @type {String}\n */",
        "meta": {
          "range": [
            13082,
            13131
          ],
          "filename": "geo.error.js",
          "lineno": 363,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002918",
            "name": "GeolocatorError.INTERNAL_ERROR",
            "type": "Literal",
            "value": "INTERNAL_ERROR",
            "paramnames": []
          }
        },
        "description": "Indicates that an internal error (such as XHR cross-domain, etc) has occured.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "INTERNAL_ERROR",
        "longname": "GeolocatorError.INTERNAL_ERROR",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.INTERNAL_ERROR"
      },
      {
        "comment": "/**\n *  Indicates that IP Geo-Source is not set or invalid.\n *  @type {String}\n */",
        "meta": {
          "range": [
            9550,
            9613
          ],
          "filename": "geo.error.js",
          "lineno": 258,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002810",
            "name": "GeolocatorError.INVALID_IP_GEO_SOURCE",
            "type": "Literal",
            "value": "INVALID_IP_GEO_SOURCE",
            "paramnames": []
          }
        },
        "description": "Indicates that IP Geo-Source is not set or invalid.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "INVALID_IP_GEO_SOURCE",
        "longname": "GeolocatorError.INVALID_IP_GEO_SOURCE",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.INVALID_IP_GEO_SOURCE"
      },
      {
        "comment": "/**\n * Indicates that the request had one or more invalid parameters.\n * @type {String}\n */",
        "meta": {
          "range": [
            10341,
            10398
          ],
          "filename": "geo.error.js",
          "lineno": 282,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002834",
            "name": "GeolocatorError.INVALID_PARAMETERS",
            "type": "Literal",
            "value": "INVALID_PARAMETERS",
            "paramnames": []
          }
        },
        "description": "Indicates that the request had one or more invalid parameters.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "INVALID_PARAMETERS",
        "longname": "GeolocatorError.INVALID_PARAMETERS",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.INVALID_PARAMETERS"
      },
      {
        "comment": "/**\n * Generally indicates that the query (address, components or latlng)\n * is missing.\n * @type {String}\n */",
        "meta": {
          "range": [
            10649,
            10700
          ],
          "filename": "geo.error.js",
          "lineno": 293,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002846",
            "name": "GeolocatorError.INVALID_REQUEST",
            "type": "Literal",
            "value": "INVALID_REQUEST",
            "paramnames": []
          }
        },
        "description": "Generally indicates that the query (address, components or latlng)\nis missing.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "INVALID_REQUEST",
        "longname": "GeolocatorError.INVALID_REQUEST",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.INVALID_REQUEST"
      },
      {
        "comment": "/**\n * Indicates that the service returned invalid response.\n * @type {String}\n */",
        "meta": {
          "range": [
            10483,
            10536
          ],
          "filename": "geo.error.js",
          "lineno": 287,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002840",
            "name": "GeolocatorError.INVALID_RESPONSE",
            "type": "Literal",
            "value": "INVALID_RESPONSE",
            "paramnames": []
          }
        },
        "description": "Indicates that the service returned invalid response.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "INVALID_RESPONSE",
        "longname": "GeolocatorError.INVALID_RESPONSE",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.INVALID_RESPONSE"
      },
      {
        "comment": "/**\n     *  Checks whether the given value is an instance of `GeolocatorError`.\n     *  @memberof GeolocatorError\n     *\n     *  @param {*} err - Object to be checked.\n     *  @returns {Boolean}\n     */",
        "meta": {
          "range": [
            7946,
            8030
          ],
          "filename": "geo.error.js",
          "lineno": 207,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002693",
            "name": "GeolocatorError.isGeolocatorError",
            "type": "MethodDefinition",
            "paramnames": [
              "err"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Checks whether the given value is an instance of `GeolocatorError`.",
        "memberof": "GeolocatorError",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "Object to be checked.",
            "name": "err"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            }
          }
        ],
        "name": "isGeolocatorError",
        "longname": "GeolocatorError.isGeolocatorError",
        "kind": "function",
        "scope": "static",
        "$longname": "GeolocatorError.isGeolocatorError"
      },
      {
        "comment": "/**\n     *  Checks whether the given value is a valid Geolocator Error code.\n     *  @memberof GeolocatorError\n     *\n     *  @param {String} errorCode - Error code to be checked.\n     *  @returns {Boolean}\n     */",
        "meta": {
          "range": [
            8255,
            8545
          ],
          "filename": "geo.error.js",
          "lineno": 218,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002702",
            "name": "GeolocatorError.isValidErrorCode",
            "type": "MethodDefinition",
            "paramnames": [
              "errorCode"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Checks whether the given value is a valid Geolocator Error code.",
        "memberof": "GeolocatorError",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Error code to be checked.",
            "name": "errorCode"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            }
          }
        ],
        "name": "isValidErrorCode",
        "longname": "GeolocatorError.isValidErrorCode",
        "kind": "function",
        "scope": "static",
        "$longname": "GeolocatorError.isValidErrorCode"
      },
      {
        "comment": "/**\n * Indicates that the request contained more than 25 origins,\n * or more than 25 destinations.\n * @type {String}\n */",
        "meta": {
          "range": [
            12491,
            12558
          ],
          "filename": "geo.error.js",
          "lineno": 343,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002894",
            "name": "GeolocatorError.MAX_DIMENSIONS_EXCEEDED",
            "type": "Literal",
            "value": "MAX_DIMENSIONS_EXCEEDED",
            "paramnames": []
          }
        },
        "description": "Indicates that the request contained more than 25 origins,\nor more than 25 destinations.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "MAX_DIMENSIONS_EXCEEDED",
        "longname": "GeolocatorError.MAX_DIMENSIONS_EXCEEDED",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.MAX_DIMENSIONS_EXCEEDED"
      },
      {
        "comment": "/**\n * Indicates that maximum number of elements limit is exceeded. For\n * example, for the Distance Matrix API; occurs when the product of\n * origins and destinations exceeds the per-query limit.\n * @type {String}\n */",
        "meta": {
          "range": [
            12305,
            12368
          ],
          "filename": "geo.error.js",
          "lineno": 337,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002888",
            "name": "GeolocatorError.MAX_ELEMENTS_EXCEEDED",
            "type": "Literal",
            "value": "MAX_ELEMENTS_EXCEEDED",
            "paramnames": []
          }
        },
        "description": "Indicates that maximum number of elements limit is exceeded. For\nexample, for the Distance Matrix API; occurs when the product of\norigins and destinations exceeds the per-query limit.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "MAX_ELEMENTS_EXCEEDED",
        "longname": "GeolocatorError.MAX_ELEMENTS_EXCEEDED",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.MAX_ELEMENTS_EXCEEDED"
      },
      {
        "comment": "/**\n * Indicates that the request contained more than allowed waypoints.\n * @type {String}\n */",
        "meta": {
          "range": [
            12655,
            12720
          ],
          "filename": "geo.error.js",
          "lineno": 348,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002900",
            "name": "GeolocatorError.MAX_WAYPOINTS_EXCEEDED",
            "type": "Literal",
            "value": "MAX_WAYPOINTS_EXCEEDED",
            "paramnames": []
          }
        },
        "description": "Indicates that the request contained more than allowed waypoints.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "MAX_WAYPOINTS_EXCEEDED",
        "longname": "GeolocatorError.MAX_WAYPOINTS_EXCEEDED",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.MAX_WAYPOINTS_EXCEEDED"
      },
      {
        "comment": "/**\n * Indicates that the requested resource could not be found.\n * @type {String}\n */",
        "meta": {
          "range": [
            12934,
            12973
          ],
          "filename": "geo.error.js",
          "lineno": 358,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002912",
            "name": "GeolocatorError.NOT_FOUND",
            "type": "Literal",
            "value": "NOT_FOUND",
            "paramnames": []
          }
        },
        "description": "Indicates that the requested resource could not be found.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "NOT_FOUND",
        "longname": "GeolocatorError.NOT_FOUND",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.NOT_FOUND"
      },
      {
        "comment": "/**\n * Indicates that you are over your Google API quota.\n * @type {String}\n */",
        "meta": {
          "range": [
            11169,
            11222
          ],
          "filename": "geo.error.js",
          "lineno": 310,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002864",
            "name": "GeolocatorError.OVER_QUERY_LIMIT",
            "type": "Literal",
            "value": "OVER_QUERY_LIMIT",
            "paramnames": []
          }
        },
        "description": "Indicates that you are over your Google API quota.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "OVER_QUERY_LIMIT",
        "longname": "GeolocatorError.OVER_QUERY_LIMIT",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.OVER_QUERY_LIMIT"
      },
      {
        "comment": "/**\n * Indicates that the request body is not valid JSON.\n * @type {String}\n */",
        "meta": {
          "range": [
            12802,
            12845
          ],
          "filename": "geo.error.js",
          "lineno": 353,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002906",
            "name": "GeolocatorError.PARSE_ERROR",
            "type": "Literal",
            "value": "PARSE_ERROR",
            "paramnames": []
          }
        },
        "description": "Indicates that the request body is not valid JSON.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "PARSE_ERROR",
        "longname": "GeolocatorError.PARSE_ERROR",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.PARSE_ERROR"
      },
      {
        "comment": "/**\n *  The acquisition of the geolocation information failed because the\n *  page didn't have the permission to do it.\n *  @type {String}\n */",
        "meta": {
          "range": [
            9758,
            9813
          ],
          "filename": "geo.error.js",
          "lineno": 264,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002816",
            "name": "GeolocatorError.PERMISSION_DENIED",
            "type": "Literal",
            "value": "PERMISSION_DENIED",
            "paramnames": []
          }
        },
        "description": "The acquisition of the geolocation information failed because the\n page didn't have the permission to do it.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "PERMISSION_DENIED",
        "longname": "GeolocatorError.PERMISSION_DENIED",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.PERMISSION_DENIED"
      },
      {
        "comment": "/**\n *  The acquisition of the geolocation failed because at least one\n *  internal source of position returned an internal error.\n *  @type {String}\n */",
        "meta": {
          "range": [
            9969,
            10030
          ],
          "filename": "geo.error.js",
          "lineno": 270,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002822",
            "name": "GeolocatorError.POSITION_UNAVAILABLE",
            "type": "Literal",
            "value": "POSITION_UNAVAILABLE",
            "paramnames": []
          }
        },
        "description": "The acquisition of the geolocation failed because at least one\n internal source of position returned an internal error.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "POSITION_UNAVAILABLE",
        "longname": "GeolocatorError.POSITION_UNAVAILABLE",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.POSITION_UNAVAILABLE"
      },
      {
        "comment": "/**\n * Indicates that the request was denied by the service.\n * This will generally occur because of a missing API key or because the request\n * is sent over HTTP instead of HTTPS.\n * @type {String}\n */",
        "meta": {
          "range": [
            10905,
            10954
          ],
          "filename": "geo.error.js",
          "lineno": 300,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002852",
            "name": "GeolocatorError.REQUEST_DENIED",
            "type": "Literal",
            "value": "REQUEST_DENIED",
            "paramnames": []
          }
        },
        "description": "Indicates that the request was denied by the service.\nThis will generally occur because of a missing API key or because the request\nis sent over HTTP instead of HTTPS.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "REQUEST_DENIED",
        "longname": "GeolocatorError.REQUEST_DENIED",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.REQUEST_DENIED"
      },
      {
        "comment": "/**\n *  The time allowed to acquire the geolocation, defined by\n *  PositionOptions.timeout information was reached before\n *  the information was obtained.\n *  @type {String}\n */",
        "meta": {
          "range": [
            10212,
            10247
          ],
          "filename": "geo.error.js",
          "lineno": 277,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002828",
            "name": "GeolocatorError.TIMEOUT",
            "type": "Literal",
            "value": "TIMEOUT",
            "paramnames": []
          }
        },
        "description": "The time allowed to acquire the geolocation, defined by\n PositionOptions.timeout information was reached before\n the information was obtained.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "TIMEOUT",
        "longname": "GeolocatorError.TIMEOUT",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.TIMEOUT"
      },
      {
        "comment": "/**\n * Indicates that an unknown error has occured.\n * @type {String}\n */",
        "meta": {
          "range": [
            13207,
            13254
          ],
          "filename": "geo.error.js",
          "lineno": 368,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002924",
            "name": "GeolocatorError.UNKNOWN_ERROR",
            "type": "Literal",
            "value": "UNKNOWN_ERROR",
            "paramnames": []
          }
        },
        "description": "Indicates that an unknown error has occured.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "UNKNOWN_ERROR",
        "longname": "GeolocatorError.UNKNOWN_ERROR",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.UNKNOWN_ERROR"
      },
      {
        "comment": "/**\n * Indicates that you've exceeded the requests per second per user limit that\n * you configured in the Google Developers Console. This limit should be\n * configured to prevent a single or small group of users from exhausting your\n * daily quota, while still allowing reasonable access to all users.\n * @type {String}\n */",
        "meta": {
          "range": [
            11549,
            11618
          ],
          "filename": "geo.error.js",
          "lineno": 318,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002870",
            "name": "GeolocatorError.USER_RATE_LIMIT_EXCEEDED",
            "type": "Literal",
            "value": "USER_RATE_LIMIT_EXCEEDED",
            "paramnames": []
          }
        },
        "description": "Indicates that you've exceeded the requests per second per user limit that\nyou configured in the Google Developers Console. This limit should be\nconfigured to prevent a single or small group of users from exhausting your\ndaily quota, while still allowing reasonable access to all users.",
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "USER_RATE_LIMIT_EXCEEDED",
        "longname": "GeolocatorError.USER_RATE_LIMIT_EXCEEDED",
        "kind": "member",
        "memberof": "GeolocatorError",
        "scope": "static",
        "$longname": "GeolocatorError.USER_RATE_LIMIT_EXCEEDED"
      }
    ],
    "$constructor": {
      "comment": "/**\n     * Costructs a new instance of `geolocator.Error`.\n     * @param {String} code - Optional. Default: `geolocator.Error.UNKNOWN_ERROR`.\n     * Any valid Geolocator Error code.\n     * @param {String} message - Optional.\n     * Error message. If omitted, this will be set to `code`.\n     * @returns {GeolocatorError}\n     * @example\n     * var error = new geolocator.Error(geolocator.Error.GEOLOCATION_NOT_SUPPORTED);\n     * console.log(error.code); // \"GEOLOCATION_NOT_SUPPORTED\"\n     * console.log(error instanceof geolocator.Error); // true\n     */",
      "meta": {
        "range": [
          1153,
          2070
        ],
        "filename": "geo.error.js",
        "lineno": 26,
        "path": "/Users/oy/developer/javascript/geolocator/src/core",
        "code": {
          "id": "astnode100002260",
          "name": "GeolocatorError",
          "type": "MethodDefinition",
          "paramnames": [
            "code",
            "message"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Costructs a new instance of `geolocator.Error`.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Optional. Default: `geolocator.Error.UNKNOWN_ERROR`.\nAny valid Geolocator Error code.",
          "name": "code"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Optional.\nError message. If omitted, this will be set to `code`.",
          "name": "message"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "GeolocatorError"
            ]
          }
        }
      ],
      "examples": [
        "var error = new geolocator.Error(geolocator.Error.GEOLOCATION_NOT_SUPPORTED);\nconsole.log(error.code); // \"GEOLOCATION_NOT_SUPPORTED\"\nconsole.log(error instanceof geolocator.Error); // true"
      ],
      "name": "GeolocatorError",
      "longname": "GeolocatorError",
      "kind": "class",
      "scope": "global",
      "undocumented": true,
      "$longname": "GeolocatorError"
    }
  },
  {
    "comment": "/**\n     * Google Distance Matrix API endpoint.\n     * @type {String}\n     */",
    "meta": {
      "range": [
        1453,
        1529
      ],
      "filename": "geolocator.js",
      "lineno": 49,
      "path": "/Users/oy/developer/javascript/geolocator/src/core",
      "code": {
        "id": "astnode100000039",
        "name": "GOOGLE_DISTANCE_MATRIX",
        "type": "Literal",
        "value": "//maps.googleapis.com/maps/api/distancematrix/json"
      }
    },
    "description": "Google Distance Matrix API endpoint.",
    "type": {
      "names": [
        "String"
      ]
    },
    "name": "GOOGLE_DISTANCE_MATRIX",
    "longname": "URL.GOOGLE_DISTANCE_MATRIX",
    "kind": "member",
    "memberof": "URL",
    "scope": "static",
    "defaultvalue": "//maps.googleapis.com/maps/api/distancematrix/json",
    "$longname": "URL.GOOGLE_DISTANCE_MATRIX"
  },
  {
    "comment": "/**\n     * Google Geocode API endpoint.\n     * @type {String}\n     */",
    "meta": {
      "range": [
        1160,
        1221
      ],
      "filename": "geolocator.js",
      "lineno": 39,
      "path": "/Users/oy/developer/javascript/geolocator/src/core",
      "code": {
        "id": "astnode100000035",
        "name": "GOOGLE_GEOCODE",
        "type": "Literal",
        "value": "//maps.googleapis.com/maps/api/geocode/json"
      }
    },
    "description": "Google Geocode API endpoint.",
    "type": {
      "names": [
        "String"
      ]
    },
    "name": "GOOGLE_GEOCODE",
    "longname": "URL.GOOGLE_GEOCODE",
    "kind": "member",
    "memberof": "URL",
    "scope": "static",
    "defaultvalue": "//maps.googleapis.com/maps/api/geocode/json",
    "$longname": "URL.GOOGLE_GEOCODE"
  },
  {
    "comment": "/**\n     * Google Geolocation API endpoint.\n     * @type {String}\n     */",
    "meta": {
      "range": [
        1013,
        1080
      ],
      "filename": "geolocator.js",
      "lineno": 34,
      "path": "/Users/oy/developer/javascript/geolocator/src/core",
      "code": {
        "id": "astnode100000033",
        "name": "GOOGLE_GEOLOCATION",
        "type": "Literal",
        "value": "//www.googleapis.com/geolocation/v1/geolocate"
      }
    },
    "description": "Google Geolocation API endpoint.",
    "type": {
      "names": [
        "String"
      ]
    },
    "name": "GOOGLE_GEOLOCATION",
    "longname": "URL.GOOGLE_GEOLOCATION",
    "kind": "member",
    "memberof": "URL",
    "scope": "static",
    "defaultvalue": "//www.googleapis.com/geolocation/v1/geolocate",
    "$longname": "URL.GOOGLE_GEOLOCATION"
  },
  {
    "comment": "/**\n     * Google Maps API bootstrap endpoint that loads all of the main\n     * Javascript objects and symbols for use in the Maps API.\n     * Some Maps API features are also available in self-contained\n     * libraries which are not loaded unless you specifically request them.\n     * See {@link https://developers.google.com/maps/documentation/javascript/libraries|details}.\n     * @type {String}\n     */",
    "meta": {
      "range": [
        877,
        929
      ],
      "filename": "geolocator.js",
      "lineno": 29,
      "path": "/Users/oy/developer/javascript/geolocator/src/core",
      "code": {
        "id": "astnode100000031",
        "name": "GOOGLE_MAPS_API",
        "type": "Literal",
        "value": "//maps.googleapis.com/maps/api/js"
      }
    },
    "description": "Google Maps API bootstrap endpoint that loads all of the main\nJavascript objects and symbols for use in the Maps API.\nSome Maps API features are also available in self-contained\nlibraries which are not loaded unless you specifically request them.\nSee {@link https://developers.google.com/maps/documentation/javascript/libraries|details}.",
    "type": {
      "names": [
        "String"
      ]
    },
    "name": "GOOGLE_MAPS_API",
    "longname": "URL.GOOGLE_MAPS_API",
    "kind": "member",
    "memberof": "URL",
    "scope": "static",
    "defaultvalue": "//maps.googleapis.com/maps/api/js",
    "$longname": "URL.GOOGLE_MAPS_API"
  },
  {
    "comment": "/**\n     * Google TimeZone API endpoint.\n     * @type {String}\n     */",
    "meta": {
      "range": [
        1302,
        1365
      ],
      "filename": "geolocator.js",
      "lineno": 44,
      "path": "/Users/oy/developer/javascript/geolocator/src/core",
      "code": {
        "id": "astnode100000037",
        "name": "GOOGLE_TIMEZONE",
        "type": "Literal",
        "value": "//maps.googleapis.com/maps/api/timezone/json"
      }
    },
    "description": "Google TimeZone API endpoint.",
    "type": {
      "names": [
        "String"
      ]
    },
    "name": "GOOGLE_TIMEZONE",
    "longname": "URL.GOOGLE_TIMEZONE",
    "kind": "member",
    "memberof": "URL",
    "scope": "static",
    "defaultvalue": "//maps.googleapis.com/maps/api/timezone/json",
    "$longname": "URL.GOOGLE_TIMEZONE"
  },
  {
    "comment": "/**\n     *  Public IP retrieval (free) service.\n     *  @type {String}\n     */",
    "meta": {
      "range": [
        427,
        460
      ],
      "filename": "geolocator.js",
      "lineno": 20,
      "path": "/Users/oy/developer/javascript/geolocator/src/core",
      "code": {
        "id": "astnode100000029",
        "name": "IP",
        "type": "Literal",
        "value": "//api.ipify.org?format=json"
      }
    },
    "description": "Public IP retrieval (free) service.",
    "type": {
      "names": [
        "String"
      ]
    },
    "name": "IP",
    "longname": "URL.IP",
    "kind": "member",
    "memberof": "URL",
    "scope": "static",
    "defaultvalue": "//api.ipify.org?format=json",
    "$longname": "URL.IP"
  },
  {
    "comment": "/**\n * Geo-utility constants and methods.\n * This object can be publicly accessed via `geolocator.utils`.\n * @namespace utils\n * @type {Object}\n * @readonly\n *\n * @license MIT\n * @copyright 2016, Onur Yıldırım (onur@cutepilot.com)\n */",
    "meta": {
      "range": [
        1,
        235
      ],
      "filename": "geo.utils.js",
      "lineno": 2,
      "path": "/Users/oy/developer/javascript/geolocator/src/core",
      "code": {}
    },
    "description": "Geo-utility constants and methods.\nThis object can be publicly accessed via `geolocator.utils`.",
    "kind": "namespace",
    "name": "utils",
    "type": {
      "names": [
        "Object"
      ]
    },
    "readonly": true,
    "license": "MIT",
    "copyright": "2016, Onur Yıldırım (onur@cutepilot.com)",
    "longname": "utils",
    "scope": "global",
    "$longname": "utils",
    "$members": [
      {
        "comment": "/**\n     * Converts decimal coordinates (either lat or lng) to degrees, minutes, seconds.\n     * @memberof! utils\n     *\n     * @param {Number} dec - Decimals to be converted.\n     * @param {Boolean} isLng - Optional. Default: `false`.\n     * Indicates whether the given decimals is longitude.\n     * @returns {String} - Degrees, minutes, seconds.\n     */",
        "meta": {
          "range": [
            2018,
            2851
          ],
          "filename": "geo.utils.js",
          "lineno": 90,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002980",
            "name": "decToDegMinSec",
            "type": "FunctionExpression"
          },
          "vars": {
            "sign": "utils.decToDegMinSec~sign",
            "sn": "utils.decToDegMinSec~sn",
            "we": "utils.decToDegMinSec~we",
            "nsew": "utils.decToDegMinSec~nsew",
            "absValue": "utils.decToDegMinSec~absValue"
          }
        },
        "description": "Converts decimal coordinates (either lat or lng) to degrees, minutes, seconds.",
        "forceMemberof": true,
        "memberof": "utils",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Decimals to be converted.",
            "name": "dec"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Optional. Default: `false`.\nIndicates whether the given decimals is longitude.",
            "name": "isLng"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "- Degrees, minutes, seconds."
          }
        ],
        "name": "decToDegMinSec",
        "longname": "utils.decToDegMinSec",
        "kind": "function",
        "scope": "static",
        "$longname": "utils.decToDegMinSec"
      },
      {
        "comment": "/**\n     * Converts degrees to radians.\n     * @memberof! utils\n     *\n     * @param {Number} deg - Degrees to be converted.\n     * @returns {Number} - Radians.\n     */",
        "meta": {
          "range": [
            1337,
            1404
          ],
          "filename": "geo.utils.js",
          "lineno": 66,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002956",
            "name": "degToRad",
            "type": "FunctionExpression"
          }
        },
        "description": "Converts degrees to radians.",
        "forceMemberof": true,
        "memberof": "utils",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Degrees to be converted.",
            "name": "deg"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "- Radians."
          }
        ],
        "name": "degToRad",
        "longname": "utils.degToRad",
        "kind": "function",
        "scope": "static",
        "$longname": "utils.degToRad"
      },
      {
        "comment": "/**\n     * Radius of earth in kilometers.\n     * @memberof! utils\n     *\n     * @type {Number}\n     */",
        "meta": {
          "range": [
            455,
            476
          ],
          "filename": "geo.utils.js",
          "lineno": 24,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002936",
            "name": "EARTH_RADIUS_KM",
            "type": "Literal",
            "value": 6371
          }
        },
        "description": "Radius of earth in kilometers.",
        "forceMemberof": true,
        "memberof": "utils",
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "EARTH_RADIUS_KM",
        "longname": "utils.EARTH_RADIUS_KM",
        "kind": "member",
        "scope": "static",
        "$longname": "utils.EARTH_RADIUS_KM"
      },
      {
        "comment": "/**\n     * Radius of earth in miles.\n     * @memberof! utils\n     *\n     * @type {Number}\n     */",
        "meta": {
          "range": [
            584,
            605
          ],
          "filename": "geo.utils.js",
          "lineno": 31,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002938",
            "name": "EARTH_RADIUS_MI",
            "type": "Literal",
            "value": 3959
          }
        },
        "description": "Radius of earth in miles.",
        "forceMemberof": true,
        "memberof": "utils",
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "EARTH_RADIUS_MI",
        "longname": "utils.EARTH_RADIUS_MI",
        "kind": "member",
        "scope": "static",
        "$longname": "utils.EARTH_RADIUS_MI"
      },
      {
        "comment": "/**\n     * Converts kilometers to miles.\n     * @memberof! utils\n     *\n     * @param {Number} km - Kilometers to be converted.\n     * @returns {Number} - Miles.\n     */",
        "meta": {
          "range": [
            880,
            928
          ],
          "filename": "geo.utils.js",
          "lineno": 44,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002940",
            "name": "kmToMi",
            "type": "FunctionExpression"
          }
        },
        "description": "Converts kilometers to miles.",
        "forceMemberof": true,
        "memberof": "utils",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Kilometers to be converted.",
            "name": "km"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "- Miles."
          }
        ],
        "name": "kmToMi",
        "longname": "utils.kmToMi",
        "kind": "function",
        "scope": "static",
        "$longname": "utils.kmToMi"
      },
      {
        "comment": "/**\n     * Converts miles to kilometers.\n     * @memberof! utils\n     *\n     * @param {Number} mi - Miles to be converted.\n     * @returns {Number} - Kilometers.\n     */",
        "meta": {
          "range": [
            1109,
            1157
          ],
          "filename": "geo.utils.js",
          "lineno": 55,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002948",
            "name": "miToKm",
            "type": "FunctionExpression"
          }
        },
        "description": "Converts miles to kilometers.",
        "forceMemberof": true,
        "memberof": "utils",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Miles to be converted.",
            "name": "mi"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "- Kilometers."
          }
        ],
        "name": "miToKm",
        "longname": "utils.miToKm",
        "kind": "function",
        "scope": "static",
        "$longname": "utils.miToKm"
      },
      {
        "comment": "/**\n     * Converts radians to degrees.\n     * @memberof! utils\n     *\n     * @param {Number} rad - Radians to be converted.\n     * @returns {Number} - Degrees.\n     */",
        "meta": {
          "range": [
            1584,
            1651
          ],
          "filename": "geo.utils.js",
          "lineno": 77,
          "path": "/Users/oy/developer/javascript/geolocator/src/core",
          "code": {
            "id": "astnode100002968",
            "name": "radToDeg",
            "type": "FunctionExpression"
          }
        },
        "description": "Converts radians to degrees.",
        "forceMemberof": true,
        "memberof": "utils",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Radians to be converted.",
            "name": "rad"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "- Degrees."
          }
        ],
        "name": "radToDeg",
        "longname": "utils.radToDeg",
        "kind": "function",
        "scope": "static",
        "$longname": "utils.radToDeg"
      }
    ]
  }
]