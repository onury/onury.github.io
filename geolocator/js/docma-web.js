/*! dustjs-linkedin - v2.7.2
* http://dustjs.com/
* Copyright (c) 2015 Aleksander Williams; Released under the MIT License */
!function(a,b){"function"==typeof define&&define.amd&&define.amd.dust===!0?define("dust.core",[],b):"object"==typeof exports?module.exports=b():a.dust=b()}(this,function(){function getTemplate(a,b){return a?"function"==typeof a&&a.template?a.template:dust.isTemplateFn(a)?a:b!==!1?dust.cache[a]:void 0:void 0}function load(a,b,c){if(!a)return b.setError(new Error("No template or template name provided to render"));var d=getTemplate(a,dust.config.cache);return d?d(b,Context.wrap(c,d.templateName)):dust.onLoad?b.map(function(b){function d(a,d){var f;if(a)return b.setError(a);if(f=getTemplate(d,!1)||getTemplate(e,dust.config.cache),!f){if(!dust.compile)return b.setError(new Error("Dust compiler not available"));f=dust.loadSource(dust.compile(d,e))}f(b,Context.wrap(c,f.templateName)).end()}var e=a;3===dust.onLoad.length?dust.onLoad(e,c.options,d):dust.onLoad(e,d)}):b.setError(new Error("Template Not Found: "+a))}function Context(a,b,c,d,e){void 0===a||a instanceof Stack||(a=new Stack(a)),this.stack=a,this.global=b,this.options=c,this.blocks=d,this.templateName=e}function getWithResolvedData(a,b,c){return function(d){return a.push(d)._get(b,c)}}function Stack(a,b,c,d){this.tail=b,this.isObject=a&&"object"==typeof a,this.head=a,this.index=c,this.of=d}function Stub(a){this.head=new Chunk(this),this.callback=a,this.out=""}function Stream(){this.head=new Chunk(this)}function Chunk(a,b,c){this.root=a,this.next=b,this.data=[],this.flushable=!1,this.taps=c}function Tap(a,b){this.head=a,this.tail=b}var dust={version:"2.7.2"},NONE="NONE",ERROR="ERROR",WARN="WARN",INFO="INFO",DEBUG="DEBUG",EMPTY_FUNC=function(){};dust.config={whitespace:!1,amd:!1,cjs:!1,cache:!0},dust._aliases={write:"w",end:"e",map:"m",render:"r",reference:"f",section:"s",exists:"x",notexists:"nx",block:"b",partial:"p",helper:"h"},function(){var a,b,c={DEBUG:0,INFO:1,WARN:2,ERROR:3,NONE:4};"undefined"!=typeof console&&console.log?(a=console.log,b="function"==typeof a?function(){a.apply(console,arguments)}:function(){a(Array.prototype.slice.apply(arguments).join(" "))}):b=EMPTY_FUNC,dust.log=function(a,d){d=d||INFO,c[d]>=c[dust.debugLevel]&&b("[DUST:"+d+"]",a)},dust.debugLevel=NONE,"undefined"!=typeof process&&process.env&&/\bdust\b/.test(process.env.DEBUG)&&(dust.debugLevel=DEBUG)}(),dust.helpers={},dust.cache={},dust.register=function(a,b){a&&(b.templateName=a,dust.config.cache!==!1&&(dust.cache[a]=b))},dust.render=function(a,b,c){var d=new Stub(c).head;try{load(a,d,b).end()}catch(e){d.setError(e)}},dust.stream=function(a,b){var c=new Stream,d=c.head;return dust.nextTick(function(){try{load(a,d,b).end()}catch(c){d.setError(c)}}),c},dust.loadSource=function(source){return eval(source)},dust.isArray=Array.isArray?Array.isArray:function(a){return"[object Array]"===Object.prototype.toString.call(a)},dust.nextTick=function(){return function(a){setTimeout(a,0)}}(),dust.isEmpty=function(a){return 0===a?!1:dust.isArray(a)&&!a.length?!0:!a},dust.isEmptyObject=function(a){var b;if(null===a)return!1;if(void 0===a)return!1;if(a.length>0)return!1;for(b in a)if(Object.prototype.hasOwnProperty.call(a,b))return!1;return!0},dust.isTemplateFn=function(a){return"function"==typeof a&&a.__dustBody},dust.isThenable=function(a){return a&&"object"==typeof a&&"function"==typeof a.then},dust.isStreamable=function(a){return a&&"function"==typeof a.on&&"function"==typeof a.pipe},dust.filter=function(a,b,c,d){var e,f,g,h;if(c)for(e=0,f=c.length;f>e;e++)g=c[e],g.length&&(h=dust.filters[g],"s"===g?b=null:"function"==typeof h?a=h(a,d):dust.log("Invalid filter `"+g+"`",WARN));return b&&(a=dust.filters[b](a,d)),a},dust.filters={h:function(a){return dust.escapeHtml(a)},j:function(a){return dust.escapeJs(a)},u:encodeURI,uc:encodeURIComponent,js:function(a){return dust.escapeJSON(a)},jp:function(a){return JSON?JSON.parse(a):(dust.log("JSON is undefined; could not parse `"+a+"`",WARN),a)}},dust.makeBase=dust.context=function(a,b){return new Context(void 0,a,b)},Context.wrap=function(a,b){return a instanceof Context?a:new Context(a,{},{},null,b)},Context.prototype.get=function(a,b){return"string"==typeof a&&("."===a[0]&&(b=!0,a=a.substr(1)),a=a.split(".")),this._get(b,a)},Context.prototype._get=function(a,b){var c,d,e,f,g,h=this.stack||{},i=1;if(d=b[0],e=b.length,a&&0===e)f=h,h=h.head;else{if(a)h&&(h=h.head?h.head[d]:void 0);else{for(;h&&(!h.isObject||(f=h.head,c=h.head[d],void 0===c));)h=h.tail;h=void 0!==c?c:this.global&&this.global[d]}for(;h&&e>i;){if(dust.isThenable(h))return h.then(getWithResolvedData(this,a,b.slice(i)));f=h,h=h[b[i]],i++}}return"function"==typeof h?(g=function(){try{return h.apply(f,arguments)}catch(a){throw dust.log(a,ERROR),a}},g.__dustBody=!!h.__dustBody,g):(void 0===h&&dust.log("Cannot find reference `{"+b.join(".")+"}` in template `"+this.getTemplateName()+"`",INFO),h)},Context.prototype.getPath=function(a,b){return this._get(a,b)},Context.prototype.push=function(a,b,c){return void 0===a?(dust.log("Not pushing an undefined variable onto the context",INFO),this):this.rebase(new Stack(a,this.stack,b,c))},Context.prototype.pop=function(){var a=this.current();return this.stack=this.stack&&this.stack.tail,a},Context.prototype.rebase=function(a){return new Context(a,this.global,this.options,this.blocks,this.getTemplateName())},Context.prototype.clone=function(){var a=this.rebase();return a.stack=this.stack,a},Context.prototype.current=function(){return this.stack&&this.stack.head},Context.prototype.getBlock=function(a){var b,c,d;if("function"==typeof a&&(a=a(new Chunk,this).data.join("")),b=this.blocks,!b)return dust.log("No blocks for context `"+a+"` in template `"+this.getTemplateName()+"`",DEBUG),!1;for(c=b.length;c--;)if(d=b[c][a])return d;return dust.log("Malformed template `"+this.getTemplateName()+"` was missing one or more blocks."),!1},Context.prototype.shiftBlocks=function(a){var b,c=this.blocks;return a?(b=c?c.concat([a]):[a],new Context(this.stack,this.global,this.options,b,this.getTemplateName())):this},Context.prototype.resolve=function(a){var b;return"function"!=typeof a?a:(b=(new Chunk).render(a,this),b instanceof Chunk?b.data.join(""):b)},Context.prototype.getTemplateName=function(){return this.templateName},Stub.prototype.flush=function(){for(var a=this.head;a;){if(!a.flushable)return a.error?(this.callback(a.error),dust.log("Rendering failed with error `"+a.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.out+=a.data.join(""),a=a.next,this.head=a}this.callback(null,this.out)},Stream.prototype.flush=function(){for(var a=this.head;a;){if(!a.flushable)return a.error?(this.emit("error",a.error),this.emit("end"),dust.log("Streaming failed with error `"+a.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.emit("data",a.data.join("")),a=a.next,this.head=a}this.emit("end")},Stream.prototype.emit=function(a,b){var c,d,e=this.events||{},f=e[a]||[];if(!f.length)return dust.log("Stream broadcasting, but no listeners for `"+a+"`",DEBUG),!1;for(f=f.slice(0),c=0,d=f.length;d>c;c++)f[c](b);return!0},Stream.prototype.on=function(a,b){var c=this.events=this.events||{},d=c[a]=c[a]||[];return"function"!=typeof b?dust.log("No callback function provided for `"+a+"` event listener",WARN):d.push(b),this},Stream.prototype.pipe=function(a){if("function"!=typeof a.write||"function"!=typeof a.end)return dust.log("Incompatible stream passed to `pipe`",WARN),this;var b=!1;return"function"==typeof a.emit&&a.emit("pipe",this),"function"==typeof a.on&&a.on("error",function(){b=!0}),this.on("data",function(c){if(!b)try{a.write(c,"utf8")}catch(d){dust.log(d,ERROR)}}).on("end",function(){if(!b)try{a.end(),b=!0}catch(c){dust.log(c,ERROR)}})},Chunk.prototype.write=function(a){var b=this.taps;return b&&(a=b.go(a)),this.data.push(a),this},Chunk.prototype.end=function(a){return a&&this.write(a),this.flushable=!0,this.root.flush(),this},Chunk.prototype.map=function(a){var b=new Chunk(this.root,this.next,this.taps),c=new Chunk(this.root,b,this.taps);this.next=c,this.flushable=!0;try{a(c)}catch(d){dust.log(d,ERROR),c.setError(d)}return b},Chunk.prototype.tap=function(a){var b=this.taps;return this.taps=b?b.push(a):new Tap(a),this},Chunk.prototype.untap=function(){return this.taps=this.taps.tail,this},Chunk.prototype.render=function(a,b){return a(this,b)},Chunk.prototype.reference=function(a,b,c,d){return"function"==typeof a?(a=a.apply(b.current(),[this,b,null,{auto:c,filters:d}]),a instanceof Chunk?a:this.reference(a,b,c,d)):dust.isThenable(a)?this.await(a,b,null,c,d):dust.isStreamable(a)?this.stream(a,b,null,c,d):dust.isEmpty(a)?this:this.write(dust.filter(a,c,d,b))},Chunk.prototype.section=function(a,b,c,d){var e,f,g,h=c.block,i=c["else"],j=this;if("function"==typeof a&&!dust.isTemplateFn(a)){try{a=a.apply(b.current(),[this,b,c,d])}catch(k){return dust.log(k,ERROR),this.setError(k)}if(a instanceof Chunk)return a}if(dust.isEmptyObject(c))return j;if(dust.isEmptyObject(d)||(b=b.push(d)),dust.isArray(a)){if(h){if(f=a.length,f>0){for(g=b.stack&&b.stack.head||{},g.$len=f,e=0;f>e;e++)g.$idx=e,j=h(j,b.push(a[e],e,f));return g.$idx=void 0,g.$len=void 0,j}if(i)return i(this,b)}}else{if(dust.isThenable(a))return this.await(a,b,c);if(dust.isStreamable(a))return this.stream(a,b,c);if(a===!0){if(h)return h(this,b)}else if(a||0===a){if(h)return h(this,b.push(a))}else if(i)return i(this,b)}return dust.log("Section without corresponding key in template `"+b.getTemplateName()+"`",DEBUG),this},Chunk.prototype.exists=function(a,b,c){var d=c.block,e=c["else"];if(dust.isEmpty(a)){if(e)return e(this,b)}else{if(d)return d(this,b);dust.log("No block for exists check in template `"+b.getTemplateName()+"`",DEBUG)}return this},Chunk.prototype.notexists=function(a,b,c){var d=c.block,e=c["else"];if(dust.isEmpty(a)){if(d)return d(this,b);dust.log("No block for not-exists check in template `"+b.getTemplateName()+"`",DEBUG)}else if(e)return e(this,b);return this},Chunk.prototype.block=function(a,b,c){var d=a||c.block;return d?d(this,b):this},Chunk.prototype.partial=function(a,b,c,d){var e;return void 0===d&&(d=c,c=b),dust.isEmptyObject(d)||(c=c.clone(),e=c.pop(),c=c.push(d).push(e)),dust.isTemplateFn(a)?this.capture(a,b,function(a,b){c.templateName=a,load(a,b,c).end()}):(c.templateName=a,load(a,this,c))},Chunk.prototype.helper=function(a,b,c,d,e){var f,g=this,h=d.filters;if(void 0===e&&(e="h"),!dust.helpers[a])return dust.log("Helper `"+a+"` does not exist",WARN),g;try{return f=dust.helpers[a](g,b,c,d),f instanceof Chunk?f:("string"==typeof h&&(h=h.split("|")),dust.isEmptyObject(c)?g.reference(f,b,e,h):g.section(f,b,c,d))}catch(i){return dust.log("Error in helper `"+a+"`: "+i.message,ERROR),g.setError(i)}},Chunk.prototype.await=function(a,b,c,d,e){return this.map(function(f){a.then(function(a){f=c?f.section(a,b,c):f.reference(a,b,d,e),f.end()},function(a){var d=c&&c.error;d?f.render(d,b.push(a)).end():(dust.log("Unhandled promise rejection in `"+b.getTemplateName()+"`",INFO),f.end())})})},Chunk.prototype.stream=function(a,b,c,d,e){var f=c&&c.block,g=c&&c.error;return this.map(function(h){var i=!1;a.on("data",function(a){i||(f?h=h.map(function(c){c.render(f,b.push(a)).end()}):c||(h=h.reference(a,b,d,e)))}).on("error",function(a){i||(g?h.render(g,b.push(a)):dust.log("Unhandled stream error in `"+b.getTemplateName()+"`",INFO),i||(i=!0,h.end()))}).on("end",function(){i||(i=!0,h.end())})})},Chunk.prototype.capture=function(a,b,c){return this.map(function(d){var e=new Stub(function(a,b){a?d.setError(a):c(b,d)});a(e.head,b).end()})},Chunk.prototype.setError=function(a){return this.error=a,this.root.flush(),this};for(var f in Chunk.prototype)dust._aliases[f]&&(Chunk.prototype[dust._aliases[f]]=Chunk.prototype[f]);Tap.prototype.push=function(a){return new Tap(a,this)},Tap.prototype.go=function(a){for(var b=this;b;)a=b.head(a),b=b.tail;return a};var HCHARS=/[&<>"']/,AMP=/&/g,LT=/</g,GT=/>/g,QUOT=/\"/g,SQUOT=/\'/g;dust.escapeHtml=function(a){return"string"==typeof a||a&&"function"==typeof a.toString?("string"!=typeof a&&(a=a.toString()),HCHARS.test(a)?a.replace(AMP,"&amp;").replace(LT,"&lt;").replace(GT,"&gt;").replace(QUOT,"&quot;").replace(SQUOT,"&#39;"):a):a};var BS=/\\/g,FS=/\//g,CR=/\r/g,LS=/\u2028/g,PS=/\u2029/g,NL=/\n/g,LF=/\f/g,SQ=/'/g,DQ=/"/g,TB=/\t/g;return dust.escapeJs=function(a){return"string"==typeof a?a.replace(BS,"\\\\").replace(FS,"\\/").replace(DQ,'\\"').replace(SQ,"\\'").replace(CR,"\\r").replace(LS,"\\u2028").replace(PS,"\\u2029").replace(NL,"\\n").replace(LF,"\\f").replace(TB,"\\t"):a},dust.escapeJSON=function(a){return JSON?JSON.stringify(a).replace(LS,"\\u2028").replace(PS,"\\u2029").replace(LT,"\\u003c"):(dust.log("JSON is undefined; could not escape `"+a+"`",WARN),a)},dust}),"function"==typeof define&&define.amd&&define.amd.dust===!0&&define(["require","dust.core"],function(require,dust){return dust.onLoad=function(a,b){require([a],function(){b()})},dust});
/*! dustjs-helpers - v1.7.3
* http://dustjs.com/
* Copyright (c) 2015 Aleksander Williams; Released under the MIT License */
!function(a,b){"function"==typeof define&&define.amd&&define.amd.dust===!0?define(["dust.core"],b):"object"==typeof exports?module.exports=b(require("dustjs-linkedin")):b(a.dust)}(this,function(dust){function a(a,b,c){c=c||"INFO",a=a?"{@"+a+"}: ":"",dust.log(a+b,c)}function b(b){k[b]||(a(b,"Deprecation warning: "+b+" is deprecated and will be removed in a future version of dustjs-helpers","WARN"),a(null,"For help and a deprecation timeline, see https://github.com/linkedin/dustjs-helpers/wiki/Deprecated-Features#"+b.replace(/\W+/g,""),"WARN"),k[b]=!0)}function c(a){return a.stack.tail&&a.stack.tail.head&&"undefined"!=typeof a.stack.tail.head.__select__}function d(a){return c(a)&&a.get("__select__")}function e(a,b){var c,d=a.stack.head,e=a.rebase();a.stack&&a.stack.tail&&(e.stack=a.stack.tail);var f={isPending:!1,isResolved:!1,isDeferredComplete:!1,deferreds:[]};for(c in b)f[c]=b[c];return e.push({__select__:f}).push(d,a.stack.index,a.stack.of)}function f(a){var b,c;if(a.isDeferredPending=!0,a.deferreds.length)for(a.isDeferredComplete=!0,b=0,c=a.deferreds.length;c>b;b++)a.deferreds[b]();a.isDeferredPending=!1}function g(a,b){return"function"==typeof b?b.toString().replace(/(^\s+|\s+$)/gm,"").replace(/\n/gm,"").replace(/,\s*/gm,", ").replace(/\)\{/gm,") {"):b}function h(a,b){return function(c,d,e,f){return i(c,d,e,f,a,b)}}function i(b,c,e,f,g,h){var i,k,l,m,n=e.block,o=e["else"],p=d(c)||{};if(p.isResolved&&!p.isDeferredPending)return b;if(f.hasOwnProperty("key"))k=f.key;else{if(!p.hasOwnProperty("key"))return a(g,"No key specified","WARN"),b;k=p.key}return m=f.type||p.type,k=j(c.resolve(k),m),l=j(c.resolve(f.value),m),h(k,l)?(p.isPending||(i=!0,p.isPending=!0),n&&(b=b.render(n,c)),i&&(p.isResolved=!0)):o&&(b=b.render(o,c)),b}function j(a,b){switch(b&&(b=b.toLowerCase()),b){case"number":return+a;case"string":return String(a);case"boolean":return a="false"===a?!1:a,Boolean(a);case"date":return new Date(a)}return a}var k={},l={tap:function(a,c,d){return b("tap"),d.resolve(a)},sep:function(a,b,c){var d=c.block;return b.stack.index===b.stack.of-1?a:d?d(a,b):a},first:function(a,b,c){return 0===b.stack.index?c.block(a,b):a},last:function(a,b,c){return b.stack.index===b.stack.of-1?c.block(a,b):a},contextDump:function(b,c,d,e){var f,h,i=c.resolve(e.to),j=c.resolve(e.key);switch(j){case"full":f=c.stack;break;default:f=c.stack.head}switch(h=JSON.stringify(f,g,2),i){case"console":a("contextDump",h);break;default:h=h.replace(/</g,"\\u003c"),b=b.write(h)}return b},math:function(b,c,g,h){var i,j=h.key,k=h.method,l=h.operand,m=h.round;if(!h.hasOwnProperty("key")||!h.method)return a("math","`key` or `method` was not provided","ERROR"),b;switch(j=parseFloat(c.resolve(j)),l=parseFloat(c.resolve(l)),k){case"mod":0===l&&a("math","Division by 0","ERROR"),i=j%l;break;case"add":i=j+l;break;case"subtract":i=j-l;break;case"multiply":i=j*l;break;case"divide":0===l&&a("math","Division by 0","ERROR"),i=j/l;break;case"ceil":case"floor":case"round":case"abs":i=Math[k](j);break;case"toint":i=parseInt(j,10);break;default:a("math","Method `"+k+"` is not supported","ERROR")}return"undefined"!=typeof i&&(m&&(i=Math.round(i)),g&&g.block?(c=e(c,{key:i}),b=b.render(g.block,c),f(d(c))):b=b.write(i)),b},select:function(b,c,g,h){var i=g.block,j={};return h.hasOwnProperty("key")&&(j.key=c.resolve(h.key)),h.hasOwnProperty("type")&&(j.type=h.type),i?(c=e(c,j),b=b.render(i,c),f(d(c))):a("select","Missing body block","WARN"),b},eq:h("eq",function(a,b){return a===b}),ne:h("ne",function(a,b){return a!==b}),lt:h("lt",function(a,b){return b>a}),lte:h("lte",function(a,b){return b>=a}),gt:h("gt",function(a,b){return a>b}),gte:h("gte",function(a,b){return a>=b}),any:function(b,c,e,f){var g=d(c);return g?g.isDeferredComplete?a("any","Must not be nested inside {@any} or {@none} block","ERROR"):b=b.map(function(a){g.deferreds.push(function(){g.isResolved&&(a=a.render(e.block,c)),a.end()})}):a("any","Must be used inside a {@select} block","ERROR"),b},none:function(b,c,e,f){var g=d(c);return g?g.isDeferredComplete?a("none","Must not be nested inside {@any} or {@none} block","ERROR"):b=b.map(function(a){g.deferreds.push(function(){g.isResolved||(a=a.render(e.block,c)),a.end()})}):a("none","Must be used inside a {@select} block","ERROR"),b},size:function(a,b,c,d){var e,f,g=d.key;if(g=b.resolve(d.key),g&&g!==!0)if(dust.isArray(g))e=g.length;else if(!isNaN(parseFloat(g))&&isFinite(g))e=g;else if("object"==typeof g){e=0;for(f in g)g.hasOwnProperty(f)&&e++}else e=(g+"").length;else e=0;return a.write(e)}};for(var m in l)dust.helpers[m]=l[m];return dust});
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;"undefined"!=typeof window?t=window:"undefined"!=typeof global?t=global:"undefined"!=typeof self&&(t=self),t.page=e()}}(function(){return function e(t,n,r){function i(a,s){if(!n[a]){if(!t[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(o)return o(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var p=n[a]={exports:{}};t[a][0].call(p.exports,function(e){var n=t[a][1][e];return i(n?n:e)},p,p.exports,e,t,n,r)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,t,n){(function(n){"use strict";function r(e,t){if("function"==typeof e)return r("*",e);if("function"==typeof t)for(var n=new s(e),i=1;i<arguments.length;++i)r.callbacks.push(n.middleware(arguments[i]));else"string"==typeof e?r["string"==typeof t?"redirect":"show"](e,t):r.start(e)}function i(e){if(!e.handled){var t;t=y?g+v.hash.replace("#!",""):v.pathname+v.search,t!==e.canonicalPath&&(r.stop(),e.handled=!1,v.href=e.canonicalPath)}}function o(e){return"string"!=typeof e?e:m?decodeURIComponent(e.replace(/\+/g," ")):e}function a(e,t){"/"===e[0]&&0!==e.indexOf(g)&&(e=g+(y?"#!":"")+e);var n=e.indexOf("?");if(this.canonicalPath=e,this.path=e.replace(g,"")||"/",y&&(this.path=this.path.replace("#!","")||"/"),this.title=document.title,this.state=t||{},this.state.path=e,this.querystring=~n?o(e.slice(n+1)):"",this.pathname=o(~n?e.slice(0,n):e),this.params={},this.hash="",!y){if(!~this.path.indexOf("#"))return;var r=this.path.split("#");this.path=r[0],this.hash=o(r[1])||"",this.querystring=this.querystring.split("#")[0]}}function s(e,t){t=t||{},this.path="*"===e?"(.*)":e,this.method="GET",this.regexp=f(this.path,this.keys=[],t)}function u(e){if(1===c(e)&&!(e.metaKey||e.ctrlKey||e.shiftKey||e.defaultPrevented)){for(var t=e.path?e.path[0]:e.target;t&&"A"!==t.nodeName;)t=t.parentNode;if(t&&"A"===t.nodeName&&!t.hasAttribute("download")&&"external"!==t.getAttribute("rel")){var i=t.getAttribute("href");if((y||t.pathname!==v.pathname||!t.hash&&"#"!==i)&&!(i&&i.indexOf("mailto:")>-1)&&!t.target&&p(t.href)){var o=t.pathname+t.search+(t.hash||"");"undefined"!=typeof n&&o.match(/^\/[a-zA-Z]:\//)&&(o=o.replace(/^\/[a-zA-Z]:\//,"/"));var a=o;0===o.indexOf(g)&&(o=o.substr(g.length)),y&&(o=o.replace("#!","")),g&&a===o||(e.preventDefault(),r.show(a))}}}}function c(e){return e=e||window.event,null===e.which?e.button:e.which}function p(e){var t=v.protocol+"//"+v.hostname;return v.port&&(t+=":"+v.port),e&&0===e.indexOf(t)}var f=e("path-to-regexp");t.exports=r;var h,d,l="undefined"!=typeof document&&document.ontouchstart?"touchstart":"click",v="undefined"!=typeof window&&(window.history.location||window.location),w=!0,m=!0,g="",y=!1;r.callbacks=[],r.exits=[],r.current="",r.len=0,r.base=function(e){return 0===arguments.length?g:void(g=e)},r.start=function(e){if(e=e||{},!h&&(h=!0,!1===e.dispatch&&(w=!1),!1===e.decodeURLComponents&&(m=!1),!1!==e.popstate&&window.addEventListener("popstate",x,!1),!1!==e.click&&document.addEventListener(l,u,!1),!0===e.hashbang&&(y=!0),w)){var t=y&&~v.hash.indexOf("#!")?v.hash.substr(2)+v.search:v.pathname+v.search+v.hash;r.replace(t,null,!0,w)}},r.stop=function(){h&&(r.current="",r.len=0,h=!1,document.removeEventListener(l,u,!1),window.removeEventListener("popstate",x,!1))},r.show=function(e,t,n,i){var o=new a(e,t);return r.current=o.path,!1!==n&&r.dispatch(o),!1!==o.handled&&!1!==i&&o.pushState(),o},r.back=function(e,t){r.len>0?(history.back(),r.len--):e?setTimeout(function(){r.show(e,t)}):setTimeout(function(){r.show(g,t)})},r.redirect=function(e,t){"string"==typeof e&&"string"==typeof t&&r(e,function(e){setTimeout(function(){r.replace(t)},0)}),"string"==typeof e&&"undefined"==typeof t&&setTimeout(function(){r.replace(e)},0)},r.replace=function(e,t,n,i){var o=new a(e,t);return r.current=o.path,o.init=n,o.save(),!1!==i&&r.dispatch(o),o},r.dispatch=function(e){function t(){var e=r.exits[s++];return e?void e(o,t):n()}function n(){var t=r.callbacks[a++];return e.path!==r.current?void(e.handled=!1):t?void t(e,n):i(e)}var o=d,a=0,s=0;d=e,o?t():n()},r.exit=function(e,t){if("function"==typeof e)return r.exit("*",e);for(var n=new s(e),i=1;i<arguments.length;++i)r.exits.push(n.middleware(arguments[i]))},r.Context=a,a.prototype.pushState=function(){r.len++,history.pushState(this.state,this.title,y&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},a.prototype.save=function(){history.replaceState(this.state,this.title,y&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},r.Route=s,s.prototype.middleware=function(e){var t=this;return function(n,r){return t.match(n.path,n.params)?e(n,r):void r()}},s.prototype.match=function(e,t){var n=this.keys,r=e.indexOf("?"),i=~r?e.slice(0,r):e,a=this.regexp.exec(decodeURIComponent(i));if(!a)return!1;for(var s=1,u=a.length;u>s;++s){var c=n[s-1],p=o(a[s]);void 0===p&&hasOwnProperty.call(t,c.name)||(t[c.name]=p)}return!0};var x=function(){var e=!1;if("undefined"!=typeof window)return"complete"===document.readyState?e=!0:window.addEventListener("load",function(){setTimeout(function(){e=!0},0)}),function(t){if(e)if(t.state){var n=t.state.path;r.replace(n,t.state)}else r.show(v.pathname+v.hash,void 0,void 0,!1)}}();r.sameOrigin=p}).call(this,e("_process"))},{_process:2,"path-to-regexp":3}],2:[function(e,t,n){function r(){}var i=t.exports={};i.nextTick=function(){var e="undefined"!=typeof window&&window.setImmediate,t="undefined"!=typeof window&&window.MutationObserver,n="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};var r=[];if(t){var i=document.createElement("div"),o=new MutationObserver(function(){var e=r.slice();r.length=0,e.forEach(function(e){e()})});return o.observe(i,{attributes:!0}),function(e){r.length||i.setAttribute("yes","no"),r.push(e)}}return n?(window.addEventListener("message",function(e){var t=e.source;if((t===window||null===t)&&"process-tick"===e.data&&(e.stopPropagation(),r.length>0)){var n=r.shift();n()}},!0),function(e){r.push(e),window.postMessage("process-tick","*")}):function(e){setTimeout(e,0)}}(),i.title="browser",i.browser=!0,i.env={},i.argv=[],i.on=r,i.addListener=r,i.once=r,i.off=r,i.removeListener=r,i.removeAllListeners=r,i.emit=r,i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")}},{}],3:[function(e,t,n){function r(e){for(var t,n=[],r=0,i=0,o="";null!=(t=w.exec(e));){var a=t[0],u=t[1],c=t.index;if(o+=e.slice(i,c),i=c+a.length,u)o+=u[1];else{o&&(n.push(o),o="");var p=t[2],f=t[3],h=t[4],d=t[5],l=t[6],v=t[7],m="+"===l||"*"===l,g="?"===l||"*"===l,y=p||"/",x=h||d||(v?".*":"[^"+y+"]+?");n.push({name:f||r++,prefix:p||"",delimiter:y,optional:g,repeat:m,pattern:s(x)})}}return i<e.length&&(o+=e.substr(i)),o&&n.push(o),n}function i(e){return o(r(e))}function o(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^"+e[n].pattern+"$"));return function(n){for(var r="",i=n||{},o=0;o<e.length;o++){var a=e[o];if("string"!=typeof a){var s,u=i[a.name];if(null==u){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to be defined')}if(v(u)){if(!a.repeat)throw new TypeError('Expected "'+a.name+'" to not repeat, but received "'+u+'"');if(0===u.length){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to not be empty')}for(var c=0;c<u.length;c++){if(s=encodeURIComponent(u[c]),!t[o].test(s))throw new TypeError('Expected all "'+a.name+'" to match "'+a.pattern+'", but received "'+s+'"');r+=(0===c?a.prefix:a.delimiter)+s}}else{if(s=encodeURIComponent(u),!t[o].test(s))throw new TypeError('Expected "'+a.name+'" to match "'+a.pattern+'", but received "'+s+'"');r+=a.prefix+s}}else r+=a}return r}}function a(e){return e.replace(/([.+*?=^!:${}()[\]|\/])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function u(e,t){return e.keys=t,e}function c(e){return e.sensitive?"":"i"}function p(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,pattern:null});return u(e,t)}function f(e,t,n){for(var r=[],i=0;i<e.length;i++)r.push(l(e[i],t,n).source);var o=new RegExp("(?:"+r.join("|")+")",c(n));return u(o,t)}function h(e,t,n){for(var i=r(e),o=d(i,n),a=0;a<i.length;a++)"string"!=typeof i[a]&&t.push(i[a]);return u(o,t)}function d(e,t){t=t||{};for(var n=t.strict,r=t.end!==!1,i="",o=e[e.length-1],s="string"==typeof o&&/\/$/.test(o),u=0;u<e.length;u++){var p=e[u];if("string"==typeof p)i+=a(p);else{var f=a(p.prefix),h=p.pattern;p.repeat&&(h+="(?:"+f+h+")*"),h=p.optional?f?"(?:"+f+"("+h+"))?":"("+h+")?":f+"("+h+")",i+=h}}return n||(i=(s?i.slice(0,-2):i)+"(?:\\/(?=$))?"),i+=r?"$":n&&s?"":"(?=\\/|$)",new RegExp("^"+i,c(t))}function l(e,t,n){return t=t||[],v(t)?n||(n={}):(n=t,t=[]),e instanceof RegExp?p(e,t,n):v(e)?f(e,t,n):h(e,t,n)}var v=e("isarray");t.exports=l,t.exports.parse=r,t.exports.compile=i,t.exports.tokensToFunction=o,t.exports.tokensToRegExp=d;var w=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))"].join("|"),"g")},{isarray:4}],4:[function(e,t,n){t.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},{}]},{},[1])(1)});
/*!
 * EventEmitter v5.0.0 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */
(function(){"use strict";function t(){}function i(t,n){for(var e=t.length;e--;)if(t[e].listener===n)return e;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var e=t.prototype,r=this,s=r.EventEmitter;e.getListeners=function(n){var r,e,t=this._getEvents();if(n instanceof RegExp){r={};for(e in t)t.hasOwnProperty(e)&&n.test(e)&&(r[e]=t[e])}else r=t[n]||(t[n]=[]);return r},e.flattenListeners=function(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push(t[e].listener);return n},e.getListenersAsObject=function(n){var e,t=this.getListeners(n);return t instanceof Array&&(e={},e[n]=t),e||t},e.addListener=function(r,e){var t,n=this.getListenersAsObject(r),s="object"==typeof e;for(t in n)n.hasOwnProperty(t)&&-1===i(n[t],e)&&n[t].push(s?e:{listener:e,once:!1});return this},e.on=n("addListener"),e.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},e.once=n("addOnceListener"),e.defineEvent=function(e){return this.getListeners(e),this},e.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},e.removeListener=function(r,s){var n,e,t=this.getListenersAsObject(r);for(e in t)t.hasOwnProperty(e)&&(n=i(t[e],s),-1!==n&&t[e].splice(n,1));return this},e.off=n("removeListener"),e.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},e.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},e.manipulateListeners=function(r,t,i){var e,n,s=r?this.removeListener:this.addListener,o=r?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(e=i.length;e--;)s.call(this,t,i[e]);else for(e in t)t.hasOwnProperty(e)&&(n=t[e])&&("function"==typeof n?s.call(this,e,n):o.call(this,e,n));return this},e.removeEvent=function(e){var t,r=typeof e,n=this._getEvents();if("string"===r)delete n[e];else if(e instanceof RegExp)for(t in n)n.hasOwnProperty(t)&&e.test(t)&&delete n[t];else delete this._events;return this},e.removeAllListeners=n("removeEvent"),e.emitEvent=function(n,u){var r,e,t,i,o,s=this.getListenersAsObject(n);for(i in s)if(s.hasOwnProperty(i))for(r=s[i].slice(0),t=0;t<r.length;t++)e=r[t],e.once===!0&&this.removeListener(n,e.listener),o=e.listener.apply(this,u||[]),o===this._getOnceReturnValue()&&this.removeListener(n,e.listener);return this},e.trigger=n("emitEvent"),e.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},e.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},e._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},e._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return r.EventEmitter=s,t},"function"==typeof define&&define.amd?define(function(){return t}):"object"==typeof module&&module.exports?module.exports=t:r.EventEmitter=t}).call(this);
/* docma (dust) compiled templates */
(function(dust){dust.register("docma-404",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class=\"container container-boxed\"><div class=\"row\"><div class=\"col-md-12\"><br /><br /><h1>404</h1><hr /><h3>Page Not Found</h3><br />The file or page you have requested is not found. &nbsp;&nbsp;<br />Please make sure page address is entered correctly.</div></div><br /><br /><br /></div></div>");}body_0.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-api",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{}).x(ctx.getPath(false, ["template","options","sidebar"]),ctx,{"block":body_1},{}).w("<div id=\"wrapper\">").x(ctx.getPath(false, ["template","options","sidebar"]),ctx,{"block":body_2},{}).w("<div id=\"page-content-wrapper\"><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-lg-12\">").s(ctx.get(["documentation"], false),ctx,{"block":body_3},{}).w("</div></div><br /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" href=\"https://github.com/onury/docma\">Docma</a></b>.</span></div></div></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div class=\"sidebar-toggle\"><span class=\"glyphicon glyphicon-menu-hamburger\"></span></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<div id=\"sidebar-wrapper\">").p("sidebar",ctx,ctx,{}).w("</div>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.p("symbol",ctx,ctx,{});}body_3.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-content",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class=\"container container-boxed\"><div class=\"row\"><div class=\"col-md-12\"><div id=\"docma-content\"></div></div></div><br /><hr /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" href=\"https://github.com/onury/docma\">Docma</a></b>.</span></div></div>");}body_0.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("enums",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["$members"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Enumeration</th><th>Type</th><th>Value</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["$members"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.getPath(true, []),ctx,"h",["$longname","s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$val"]).w("</code></td><td>").f(ctx.getPath(true, []),ctx,"h",["s","$desc"]).w("</td></tr>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navbar",body_0);function body_0(chk,ctx){return chk.x(ctx.getPath(false, ["template","options","navbar"]),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<nav class=\"navbar navbar-default navbar-fixed-top\"><div class=\"").x(ctx.get(["boxed"], false),ctx,{"else":body_2,"block":body_3},{}).w("\"><div class=\"nav navbar-left nav-left\"><div class=\"navbar-brand\"><b>").f(ctx.getPath(false, ["template","options","title"]),ctx,"h").w("</b></div></div>").h("gt",ctx,{"block":body_4},{"key":ctx.getPath(false, ["template","options","navItems","length"]),"value":0},"h").w("</div></nav>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("container-fluid");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("container container-boxed");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<ul class=\"nav navbar-nav\">").s(ctx.getPath(false, ["template","options","navItems"]),ctx,{"block":body_5},{}).w("</ul>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.x(ctx.get(["items"], false),ctx,{"else":body_6,"block":body_7},{});}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<li class=\"dropdown\"><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_8,"block":body_9},{}).w("\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"ico ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>&nbsp;&nbsp;").f(ctx.get(["label"], false),ctx,"h").w("&nbsp;<span class=\"caret\"></span></a><ul class=\"dropdown-menu\">").s(ctx.get(["items"], false),ctx,{"block":body_10},{}).w("</ul></li>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("#");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_10.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navitem",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["separator"], false),ctx,{"else":body_1,"block":body_5},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<li><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_2,"block":body_3},{}).w("\" target=\"").f(ctx.get(["target"], false),ctx,"h").w("\">").x(ctx.get(["iconClass"], false),ctx,{"block":body_4},{}).f(ctx.get(["label"], false),ctx,"h",["s"]).w("</a></li>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("#");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<i class=\"ico ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>&nbsp;&nbsp;");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<li role=\"separator\" class=\"divider\"></li>");}body_5.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("params",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["params"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["params"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td>").x(ctx.get(["optional"], false),ctx,{"block":body_3},{}).w("</td><td>").f(ctx.getPath(true, []),ctx,"h",["s","$param_desc"]).w("</td></tr>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<code>").f(ctx.getPath(true, []),ctx,"h",["$def"]).w("</code>");}body_3.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("properties",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["properties"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["properties"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td>").f(ctx.get(["description"], false),ctx,"h",["s","$p"]).w("</td></tr>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("sidebar",body_0);function body_0(chk,ctx){return chk.w("<div class=\"sidebar-header\"><div class=\"sidebar-title\"><span><b>").f(ctx.getPath(false, ["template","options","title"]),ctx,"h").w("</b></span></div>").x(ctx.getPath(false, ["template","options","search"]),ctx,{"block":body_1},{}).w("</div><ul class=\"sidebar-nav\">").s(ctx.get(["symbols"], false),ctx,{"block":body_2},{}).w("</ul>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div class=\"sidebar-search\"><input id=\"txt-search\" type=\"search\" class=\"form-control\" placeholder=\"Search...\" /><div class=\"sidebar-search-clean\"><span class=\"glyphicon glyphicon-remove-circle\"></span></div></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<li>").f(ctx.getPath(true, []),ctx,"h",["s","$menuitem"]).w("</li>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("symbol",body_0);function body_0(chk,ctx){return chk.w("<div id=\"").f(ctx.getPath(true, []),ctx,"h",["$id"]).w("\" class=\"symbol-container\"><div class=\"symbol-heading\"><div class=\"symbol\"><a href=\"#").f(ctx.getPath(true, []),ctx,"h",["$id"]).w("\"><span class=\"glyphicon glyphicon-link color-gray-light\" aria-hidden=\"true\"></span><code class=\"symbol-name\">").f(ctx.getPath(true, []),ctx,"h",["s","$longname_params"]).w("</code><span class=\"symbol-sep\">").f(ctx.getPath(true, []),ctx,"h",["$type_sep"]).w("</span><code class=\"symbol-type\">").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></a>").f(ctx.getPath(true, []),ctx,"h",["s","$tags"]).w("</div>").x(ctx.get(["augments"], false),ctx,{"block":body_1},{}).x(ctx.get(["alias"], false),ctx,{"block":body_2},{}).w("</div><div class=\"symbol-definition\">").f(ctx.getPath(true, []),ctx,"h",["s","$desc"]).x(ctx.get(["classdesc"], false),ctx,{"block":body_3},{}).x(ctx.get(["see"], false),ctx,{"block":body_8},{}).h("eq",ctx,{"else":body_13,"block":body_16},{"key":ctx.getPath(false, ["meta","code","type"]),"value":"ClassDeclaration"},"h").x(ctx.get(["returns"], false),ctx,{"block":body_17},{}).x(ctx.get(["exceptions"], false),ctx,{"block":body_20},{}).x(ctx.get(["isEnum"], false),ctx,{"block":body_23},{}).x(ctx.get(["examples"], false),ctx,{"block":body_24},{}).w("</div></div><hr />").h("eq",ctx,{"block":body_26},{"key":ctx.getPath(false, ["meta","code","type"]),"value":"ClassDeclaration"},"h").x(ctx.get(["isEnum"], false),ctx,{"else":body_28,"block":body_30},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<p class=\"space-left-sm\"><b>Extends:</b> ").f(ctx.getPath(true, []),ctx,"h",["s","$extends"]).w("</p>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<p class=\"space-left-sm\"><b>Alias:</b> <code>").f(ctx.get(["alias"], false),ctx,"h",["s","$dot_prop"]).w("</code></p>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<table>").x(ctx.get(["version"], false),ctx,{"block":body_4},{}).x(ctx.get(["copyright"], false),ctx,{"block":body_5},{}).x(ctx.get(["author"], false),ctx,{"block":body_6},{}).x(ctx.get(["license"], false),ctx,{"block":body_7},{}).w("</table>");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<tr><td><b>Version:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.get(["version"], false),ctx,"h",["s"]).w("</td></tr>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<tr><td><b>Copyright:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.get(["copyright"], false),ctx,"h",["s"]).w("</td></tr>");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<tr><td><b>Author:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.get(["author"], false),ctx,"h",["s","$author"]).w("</td></tr>");}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<tr><td><b>License:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.get(["license"], false),ctx,"h",["s"]).w("</td></tr>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("<p><b>See</b>").h("gt",ctx,{"else":body_9,"block":body_11},{"key":ctx.getPath(false, ["see","length"]),"value":1},"h").w("</p><br />");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.s(ctx.get(["see"], false),ctx,{"block":body_10},{});}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.w("&nbsp;").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]);}body_10.__dustBody=!0;function body_11(chk,ctx){return chk.w("<ul>").s(ctx.get(["see"], false),ctx,{"block":body_12},{}).w("</ul>");}body_11.__dustBody=!0;function body_12(chk,ctx){return chk.w("<li>").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]).w("</li>");}body_12.__dustBody=!0;function body_13(chk,ctx){return chk.p("params",ctx,ctx.rebase(ctx.getPath(true, [])),{}).x(ctx.get(["isEnum"], false),ctx,{"else":body_14,"block":body_15},{});}body_13.__dustBody=!0;function body_14(chk,ctx){return chk.p("properties",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_14.__dustBody=!0;function body_15(chk,ctx){return chk;}body_15.__dustBody=!0;function body_16(chk,ctx){return chk;}body_16.__dustBody=!0;function body_17(chk,ctx){return chk.h("gt",ctx,{"else":body_18,"block":body_19},{"key":ctx.getPath(false, ["returns","length"]),"value":"1","type":"number"},"h");}body_17.__dustBody=!0;function body_18(chk,ctx){return chk.w("<p><b>Returns:</b>&nbsp;&nbsp;").f(ctx.getPath(true, []),ctx,"h",["s","$returns"]).w("</p>");}body_18.__dustBody=!0;function body_19(chk,ctx){return chk.w("<b>Returns:</b><p class=\"pad-left\">").f(ctx.getPath(true, []),ctx,"h",["s","$returns"]).w("</p>");}body_19.__dustBody=!0;function body_20(chk,ctx){return chk.h("gt",ctx,{"else":body_21,"block":body_22},{"key":ctx.getPath(false, ["exceptions","length"]),"value":"1","type":"number"},"h");}body_20.__dustBody=!0;function body_21(chk,ctx){return chk.w("<p><b>Throws:</b>&nbsp;&nbsp;").f(ctx.getPath(true, []),ctx,"h",["s","$exceptions"]).w("</p>");}body_21.__dustBody=!0;function body_22(chk,ctx){return chk.w("<b>Throws:</b><p class=\"pad-left\">").f(ctx.getPath(true, []),ctx,"h",["s","$exceptions"]).w("</p>");}body_22.__dustBody=!0;function body_23(chk,ctx){return chk.p("enums",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_23.__dustBody=!0;function body_24(chk,ctx){return chk.w("<p><b>Example</b></p>").s(ctx.get(["examples"], false),ctx,{"block":body_25},{});}body_24.__dustBody=!0;function body_25(chk,ctx){return chk.w("<pre><code>").f(ctx.getPath(true, []),ctx,"h",["$nt"]).w("</code></pre>");}body_25.__dustBody=!0;function body_26(chk,ctx){return chk.x(ctx.get(["$constructor"], false),ctx,{"block":body_27},{});}body_26.__dustBody=!0;function body_27(chk,ctx){return chk.p("symbol",ctx,ctx.rebase(ctx.get(["$constructor"], false)),{});}body_27.__dustBody=!0;function body_28(chk,ctx){return chk.s(ctx.get(["$members"], false),ctx,{"block":body_29},{});}body_28.__dustBody=!0;function body_29(chk,ctx){return chk.p("symbol",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_29.__dustBody=!0;function body_30(chk,ctx){return chk;}body_30.__dustBody=!0;return body_0}(dust));
/*!
 * Docma (Web) Core
 * https://github.com/onury/docma
 * @license MIT
 */
var docma = {"routes":[{"id":"api:","type":"api","name":"_def_","path":"/?api","contentPath":null},{"id":"api:geolocator","type":"api","name":"geolocator","path":"/?api=geolocator","contentPath":null},{"id":"api:geolocator-error","type":"api","name":"geolocator-error","path":"/?api=geolocator-error","contentPath":null},{"id":"content:changelog","type":"content","name":"changelog","path":"/?content=changelog","contentPath":"content/changelog.html"},{"id":"content:guide","type":"content","name":"guide","path":"/?content=guide","contentPath":"content/guide.html"}],"apis":{"_def_":{"documentation":[],"symbols":[]},"geolocator":{"documentation":[{"comment":"/**\n * Geolocator library that provides methods for getting geo-location information,\n * geocoding, address look-ups, distance & durations, timezone information and more...\n * This library makes use of HTML5 position feautures, implements Google APIs\n * and other services.\n *\n * <b>Important Notes:</b>\n *\n * Although some calls might work without a key, it is generally required by\n * most Goolge APIs (such as Time Zone API). To get a free (or premium) key,\n * {@link https://developers.google.com/maps/documentation/javascript/|click here}.\n * After getting a key, you can enable multiple APIs for it. Make sure you\n * {@link https://console.developers.google.com|enable}\n * all the APIs supported by Geolocator.\n *\n * Make sure your doctype is HTML5.\n *\n * Make sure you're calling Geolocation APIs from an HTTPS page.\n * Geolocation API is removed from unsecured origins in Chrome 50. Others are\n * expected to follow.\n *\n * @license MIT\n * @copyright 2016, Onur Yıldırım (onur@cutepilot.com)\n */","meta":{"range":[3239,69503],"filename":"geolocator.js","lineno":119,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000061","name":"geolocator","type":"ClassDeclaration","paramnames":[]}},"classdesc":"Geolocator library that provides methods for getting geo-location information,\ngeocoding, address look-ups, distance & durations, timezone information and more...\nThis library makes use of HTML5 position feautures, implements Google APIs\nand other services.\n\n<b>Important Notes:</b>\n\nAlthough some calls might work without a key, it is generally required by\nmost Goolge APIs (such as Time Zone API). To get a free (or premium) key,\n{@link https://developers.google.com/maps/documentation/javascript/|click here}.\nAfter getting a key, you can enable multiple APIs for it. Make sure you\n{@link https://console.developers.google.com|enable}\nall the APIs supported by Geolocator.\n\nMake sure your doctype is HTML5.\n\nMake sure you're calling Geolocation APIs from an HTTPS page.\nGeolocation API is removed from unsecured origins in Chrome 50. Others are\nexpected to follow.","license":"MIT","copyright":"2016, Onur Yıldırım (onur@cutepilot.com)","name":"geolocator","longname":"geolocator","kind":"class","scope":"global","$longname":"geolocator","$members":[{"comment":"/**\n     * Calculates the distance between two geographic points.\n     *\n     * @param {Object} options\n     *        Calculation and display options.\n     *     @param {Object} options.from\n     *            Object containing the `latitude` and `longitude` of original\n     *            location.\n     *     @param {Object} options.to\n     *            Object containing the `latitude` and `longitude` of destination.\n     *     @param {String} [options.formula=\"haversine\"]\n     *            The algorithm or formula to calculate the distance.\n     *            See {@link #geolocator.DistanceFormula|`geolocator.DistanceFormula` enumeration}.\n     *     @param {Number} [options.unitSystem=0]\n     *            Preferred unit system to use when displaying distance.\n     *            See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}.\n     *\n     * @returns {Number} - The calculated distance.\n     *\n     * @example\n     * // Calculate distance from London to Paris.\n     * var result = geolocator.calcDistance({\n     *     from: {\n     *         latitude: 51.5085300,\n     *         longitude: -0.1257400\n     *     },\n     *     to: {\n     *         latitude: 48.8534100,\n     *         longitude: 2.3488000\n     *     },\n     *     formula: geolocator.DistanceFormula.HAVERSINE,\n     *     unitSystem: geolocator.UnitSystem.METRIC\n     * });\n     * // result: 366.41656039126093 (kilometers)\n     */","meta":{"range":[61972,63359],"filename":"geolocator.js","lineno":1514,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100002168","name":"geolocator.calcDistance","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"description":"Calculates the distance between two geographic points.","params":[{"type":{"names":["Object"]},"description":"Calculation and display options.","name":"options"},{"type":{"names":["Object"]},"description":"Object containing the `latitude` and `longitude` of original\n           location.","name":"options.from"},{"type":{"names":["Object"]},"description":"Object containing the `latitude` and `longitude` of destination.","name":"options.to"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"\"haversine\"","description":"The algorithm or formula to calculate the distance.\n           See {@link #geolocator.DistanceFormula|`geolocator.DistanceFormula` enumeration}.","name":"options.formula"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":0,"description":"Preferred unit system to use when displaying distance.\n           See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}.","name":"options.unitSystem"}],"returns":[{"type":{"names":["Number"]},"description":"- The calculated distance."}],"examples":["// Calculate distance from London to Paris.\nvar result = geolocator.calcDistance({\n    from: {\n        latitude: 51.5085300,\n        longitude: -0.1257400\n    },\n    to: {\n        latitude: 48.8534100,\n        longitude: 2.3488000\n    },\n    formula: geolocator.DistanceFormula.HAVERSINE,\n    unitSystem: geolocator.UnitSystem.METRIC\n});\n// result: 366.41656039126093 (kilometers)"],"name":"calcDistance","longname":"geolocator.calcDistance","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.calcDistance"},{"comment":"/**\n     * Sets or gets the geolocator configuration object.\n     * Make sure you configure Geolocator before calling other methods that\n     * require a Google API key.\n     *\n     * @param {Object} [options]\n     *        Configuration object. If omitted, this method returns the current\n     *        configuration.\n     *     @param {String} [options.language=\"en\"]\n     *            Language to be used for API requests that supports language\n     *            configurations. This is generally used for Google APIs.\n     *            See {@link https://developers.google.com/maps/faq#languagesupport|supported languages}.\n     *     @param {Boolean} [options.https=true]\n     *            As Google recommends; using HTTPS encryption makes your site\n     *            more secure, and more resistant to snooping or tampering.\n     *            If set to `true`, the API calls are made over HTTPS, at all\n     *            times. Setting to `false` will switch to HTTP (even if the\n     *            page is on HTTPS). And if set to `null`, current protocol will\n     *            be used. Note that some APIs might not work with HTTP such as\n     *            Google Maps TimeZone API.\n     *     @param {Object} [options.google]\n     *            Google specific options.\n     *         @param {String} [options.google.version=\"3\"]\n     *                Google Maps API version to be used (with\n     *                `geolocator.createMap()`) method. The default version\n     *                value is tested and works with Geolocator. You can set a\n     *                greater value or the latest version number and it should\n     *                work; but it's not guaranteed. Find out the\n     *                {@link https://developers.google.com/maps/documentation/javascript/versions|latest version here}.\n     *         @param {String} [options.google.key=\"\"]\n     *                API key to be used with Google API calls. Although some\n     *                calls might work without a key, it is generally required\n     *                by most Goolge APIs. To get a free (or premium) key,\n     *                {@link https://developers.google.com/maps/documentation/javascript/|click here}.\n     *\n     * @returns {Object} - Returns the current or updated configuration object.\n     *\n     * @example\n     * geolocator.config({\n     *     language: \"en\",\n     *     google: {\n     *     \t   version: \"3\",\n     *         key: \"YOUR-GOOGLE-API-KEY\"\n     *     }\n     * });\n     */","meta":{"range":[7478,7703],"filename":"geolocator.js","lineno":241,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000118","name":"geolocator.config","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"description":"Sets or gets the geolocator configuration object.\nMake sure you configure Geolocator before calling other methods that\nrequire a Google API key.","params":[{"type":{"names":["Object"]},"optional":true,"description":"Configuration object. If omitted, this method returns the current\n       configuration.","name":"options"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"\"en\"","description":"Language to be used for API requests that supports language\n           configurations. This is generally used for Google APIs.\n           See {@link https://developers.google.com/maps/faq#languagesupport|supported languages}.","name":"options.language"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"As Google recommends; using HTTPS encryption makes your site\n           more secure, and more resistant to snooping or tampering.\n           If set to `true`, the API calls are made over HTTPS, at all\n           times. Setting to `false` will switch to HTTP (even if the\n           page is on HTTPS). And if set to `null`, current protocol will\n           be used. Note that some APIs might not work with HTTP such as\n           Google Maps TimeZone API.","name":"options.https"},{"type":{"names":["Object"]},"optional":true,"description":"Google specific options.","name":"options.google"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"\"3\"","description":"Google Maps API version to be used (with\n               `geolocator.createMap()`) method. The default version\n               value is tested and works with Geolocator. You can set a\n               greater value or the latest version number and it should\n               work; but it's not guaranteed. Find out the\n               {@link https://developers.google.com/maps/documentation/javascript/versions|latest version here}.","name":"options.google.version"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"\"\"","description":"API key to be used with Google API calls. Although some\n               calls might work without a key, it is generally required\n               by most Goolge APIs. To get a free (or premium) key,\n               {@link https://developers.google.com/maps/documentation/javascript/|click here}.","name":"options.google.key"}],"returns":[{"type":{"names":["Object"]},"description":"- Returns the current or updated configuration object."}],"examples":["geolocator.config({\n    language: \"en\",\n    google: {\n    \t   version: \"3\",\n        key: \"YOUR-GOOGLE-API-KEY\"\n    }\n});"],"name":"config","longname":"geolocator.config","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.config"},{"comment":"/**\n     * Creates a Google Map within the given element.\n     *\n     * @param {Object|String|HTMLElement} options\n     *        Either map options object with the following properties or; the ID\n     *        of a DOM element or DOM element itself which the map will be\n     *        created within.\n     *     @param {String|HTMLElement|jQuery} options.element\n     *            Either the ID of a DOM element or the `HTMLElement` itself;\n     *            which the map will be created within.\n     *     @param {Object} options.center\n     *            Center coordinates for the map to be created.\n     *         @param {Number} options.center.latitude\n     *                Latitude of the center point coordinates.\n     *         @param {Number} options.center.longitude\n     *                Longitude of the center point coordinates.\n     *     @param {String} [options.mapTypeId=\"roadmap\"]\n     *            Type of the map to be created.\n     *            See {@link #geolocator.MapTypeId|`geolocator.MapTypeId` enumeration}\n     *            for possible values.\n     *     @param {String} [options.title]\n     *            Title text to be displayed within an `InfoWindow`, when the\n     *            marker is clicked. This only take affect if `marker` is\n     *            enabled.\n     *     @param {Boolean} [options.marker=true]\n     *            Whether to place a marker at the given coordinates.\n     *            If `title` is set, an `InfoWindow` will be opened when the\n     *            marker is clicked.\n     *     @param {Number} [options.zoom=9]\n     *            Zoom level to be set for the map.\n     *\n     * @param {Function} callback\n     *        Callback function to be executed when the map is created.\n     *        This takes 2 arguments: `function (err, map) { ... }`\n     *        `map` object has the following properties:\n     *        `{ instance:google.maps.Map, marker:google.maps.Marker, infoWindow:google.maps.InfoWindow, options:Object }`\n     *\n     * @returns {void}\n     *\n     * @example\n     * var options = {\n     *     element: \"my-map\",\n     * \t   center: {\n     * \t       latitude: 48.8534100,\n     *         longitude: 2.3488000\n     * \t   },\n     * \t   marker: true,\n     * \t   title: \"Paris, France\",\n     * \t   zoom: 12\n     * };\n     * geolocator.createMap(options, function (err, map) {\n     * \t   if (map && map.infoWindow) {\n     * \t\t   map.infoWindow.open(map.instance, map.marker);\n     * \t   }\n     * });\n     */","meta":{"range":[10195,12883],"filename":"geolocator.js","lineno":305,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000145","name":"geolocator.createMap","type":"MethodDefinition","paramnames":["options","callback"]},"vars":{"":null}},"description":"Creates a Google Map within the given element.","params":[{"type":{"names":["Object","String","HTMLElement"]},"description":"Either map options object with the following properties or; the ID\n       of a DOM element or DOM element itself which the map will be\n       created within.","name":"options"},{"type":{"names":["String","HTMLElement","jQuery"]},"description":"Either the ID of a DOM element or the `HTMLElement` itself;\n           which the map will be created within.","name":"options.element"},{"type":{"names":["Object"]},"description":"Center coordinates for the map to be created.","name":"options.center"},{"type":{"names":["Number"]},"description":"Latitude of the center point coordinates.","name":"options.center.latitude"},{"type":{"names":["Number"]},"description":"Longitude of the center point coordinates.","name":"options.center.longitude"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"\"roadmap\"","description":"Type of the map to be created.\n           See {@link #geolocator.MapTypeId|`geolocator.MapTypeId` enumeration}\n           for possible values.","name":"options.mapTypeId"},{"type":{"names":["String"]},"optional":true,"description":"Title text to be displayed within an `InfoWindow`, when the\n           marker is clicked. This only take affect if `marker` is\n           enabled.","name":"options.title"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Whether to place a marker at the given coordinates.\n           If `title` is set, an `InfoWindow` will be opened when the\n           marker is clicked.","name":"options.marker"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":9,"description":"Zoom level to be set for the map.","name":"options.zoom"},{"type":{"names":["function"]},"description":"Callback function to be executed when the map is created.\n       This takes 2 arguments: `function (err, map) { ... }`\n       `map` object has the following properties:\n       `{ instance:google.maps.Map, marker:google.maps.Marker, infoWindow:google.maps.InfoWindow, options:Object }`","name":"callback"}],"returns":[{"type":{"names":["void"]}}],"examples":["var options = {\n    element: \"my-map\",\n\t   center: {\n\t       latitude: 48.8534100,\n        longitude: 2.3488000\n\t   },\n\t   marker: true,\n\t   title: \"Paris, France\",\n\t   zoom: 12\n};\ngeolocator.createMap(options, function (err, map) {\n\t   if (map && map.infoWindow) {\n\t\t   map.infoWindow.open(map.instance, map.marker);\n\t   }\n});"],"name":"createMap","longname":"geolocator.createMap","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.createMap"},{"comment":"/**\n     * Converts decimal coordinates (either lat or lng) to degrees, minutes, seconds.\n     *\n     * @param {Number} dec\n     *        Decimals to be converted.\n     * @param {Boolean} [isLng=false]\n     *        Indicates whether the given decimals is longitude.\n     *\n     * @returns {String} - Degrees, minutes, seconds.\n     */","meta":{"range":[68652,69500],"filename":"geolocator.js","lineno":1732,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100002659","name":"geolocator.decToDegMinSec","type":"MethodDefinition","paramnames":["dec","isLng"]},"vars":{"":null}},"description":"Converts decimal coordinates (either lat or lng) to degrees, minutes, seconds.","params":[{"type":{"names":["Number"]},"description":"Decimals to be converted.","name":"dec"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Indicates whether the given decimals is longitude.","name":"isLng"}],"returns":[{"type":{"names":["String"]},"description":"- Degrees, minutes, seconds."}],"name":"decToDegMinSec","longname":"geolocator.decToDegMinSec","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.decToDegMinSec"},{"comment":"/**\n     * Converts degrees to radians.\n     *\n     * @param {Number} deg - Degrees to be converted.\n     * @returns {Number} - Radians.\n     */","meta":{"range":[68003,68077],"filename":"geolocator.js","lineno":1708,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100002633","name":"geolocator.degToRad","type":"MethodDefinition","paramnames":["degrees"]},"vars":{"":null}},"description":"Converts degrees to radians.","params":[{"type":{"names":["Number"]},"description":"Degrees to be converted.","name":"deg"}],"returns":[{"type":{"names":["Number"]},"description":"- Radians."}],"name":"degToRad","longname":"geolocator.degToRad","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.degToRad"},{"comment":"/**\n     * Enumerates formulas/algorithms for calculating the distance between two\n     * lat/lng points.\n     * @memberof! geolocator\n     *\n     * @readonly\n     * @enum {String}\n     *\n     * @todo {@link https://en.wikipedia.org/wiki/Vincenty%27s_formulae|Vincenty's Formula}\n     */","meta":{"range":[5366,6104],"filename":"enums.js","lineno":186,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003402","name":"DistanceFormula","type":"ObjectExpression","value":"{\"HAVERSINE\":\"haversine\",\"PYTHAGOREAN\":\"pythagorean\"}"}},"description":"Enumerates formulas/algorithms for calculating the distance between two\nlat/lng points.","forceMemberof":true,"memberof":"geolocator","readonly":true,"kind":"member","isEnum":true,"type":{"names":["String"]},"todo":["{@link https://en.wikipedia.org/wiki/Vincenty%27s_formulae|Vincenty's Formula}"],"name":"DistanceFormula","longname":"geolocator.DistanceFormula","scope":"static","properties":[{"comment":"/**\n         * Haversine formula for calculating the distance between two lat/lng points\n         * by relating the sides and angles of spherical triangles.\n         * @see {@link http://en.wikipedia.org/wiki/Haversine_formula|Haversine_formula}.\n         * @type {String}\n         */","meta":{"range":[5686,5708],"filename":"enums.js","lineno":193,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003404","name":"HAVERSINE","type":"Literal","value":"haversine"}},"description":"Haversine formula for calculating the distance between two lat/lng points\nby relating the sides and angles of spherical triangles.","see":["{@link http://en.wikipedia.org/wiki/Haversine_formula|Haversine_formula}."],"type":{"names":["String"]},"name":"HAVERSINE","longname":"geolocator.DistanceFormula.HAVERSINE","kind":"member","memberof":"geolocator.DistanceFormula","scope":"static","defaultvalue":"haversine"},{"comment":"/**\n         * Formula based on the Pythagoras Theorem for calculating the\n         * distance between two lat/lng points on a Equirectangular projection\n         * to account for curvature of the longitude lines.\n         * @see {@link https://en.wikipedia.org/wiki/Pythagorean_theorem|Pythagorean_theorem}\n         * @type {String}\n         */","meta":{"range":[6072,6098],"filename":"enums.js","lineno":201,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003406","name":"PYTHAGOREAN","type":"Literal","value":"pythagorean"}},"description":"Formula based on the Pythagoras Theorem for calculating the\ndistance between two lat/lng points on a Equirectangular projection\nto account for curvature of the longitude lines.","see":["{@link https://en.wikipedia.org/wiki/Pythagorean_theorem|Pythagorean_theorem}"],"type":{"names":["String"]},"name":"PYTHAGOREAN","longname":"geolocator.DistanceFormula.PYTHAGOREAN","kind":"member","memberof":"geolocator.DistanceFormula","scope":"static","defaultvalue":"pythagorean"}],"$longname":"geolocator.DistanceFormula","$members":[{"comment":"/**\n         * Haversine formula for calculating the distance between two lat/lng points\n         * by relating the sides and angles of spherical triangles.\n         * @see {@link http://en.wikipedia.org/wiki/Haversine_formula|Haversine_formula}.\n         * @type {String}\n         */","meta":{"range":[5686,5708],"filename":"enums.js","lineno":193,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003404","name":"HAVERSINE","type":"Literal","value":"haversine"}},"description":"Haversine formula for calculating the distance between two lat/lng points\nby relating the sides and angles of spherical triangles.","see":["{@link http://en.wikipedia.org/wiki/Haversine_formula|Haversine_formula}."],"type":{"names":["String"]},"name":"HAVERSINE","longname":"geolocator.DistanceFormula.HAVERSINE","kind":"member","memberof":"geolocator.DistanceFormula","scope":"static","defaultvalue":"haversine","$longname":"geolocator.DistanceFormula.HAVERSINE"},{"comment":"/**\n         * Formula based on the Pythagoras Theorem for calculating the\n         * distance between two lat/lng points on a Equirectangular projection\n         * to account for curvature of the longitude lines.\n         * @see {@link https://en.wikipedia.org/wiki/Pythagorean_theorem|Pythagorean_theorem}\n         * @type {String}\n         */","meta":{"range":[6072,6098],"filename":"enums.js","lineno":201,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003406","name":"PYTHAGOREAN","type":"Literal","value":"pythagorean"}},"description":"Formula based on the Pythagoras Theorem for calculating the\ndistance between two lat/lng points on a Equirectangular projection\nto account for curvature of the longitude lines.","see":["{@link https://en.wikipedia.org/wiki/Pythagorean_theorem|Pythagorean_theorem}"],"type":{"names":["String"]},"name":"PYTHAGOREAN","longname":"geolocator.DistanceFormula.PYTHAGOREAN","kind":"member","memberof":"geolocator.DistanceFormula","scope":"static","defaultvalue":"pythagorean","$longname":"geolocator.DistanceFormula.PYTHAGOREAN"}]},{"comment":"/**\n     * Ensures Google Maps API is loaded. If not, this will load all of the\n     * main Javascript objects and symbols for use in the Maps API.\n     *\n     * Note that, Google Maps API is loaded only when needed. For example,\n     * the DistanceMatrix API does not support Web Service requests and\n     * requires this API to be loaded. However, the TimeZone API requests are\n     * made throught the Web Service without requiring a `google` object\n     * within DOM.\n     *\n     * Also note that this will not re-load the API if `google.maps` object\n     * already exists. In this case, the `callback` is still executed and\n     * no errors are passed.\n     *\n     * You can use the following overload to omit the `key` argument altogether:\n     *\n     * `geolocator.ensureGoogleLoaded(callback)`\n     *\n     * @param {String} [key]\n     *        Google API key.\n     * @param {Function} callback\n     *        Callback function to be executed when the operation ends.\n     *\n     * @returns {void}\n     *\n     * @example\n     * geolocator.ensureGoogleLoaded(function (err) {\n     * \t   if (err) return;\n     * \t   console.log('google' in window); // true\n     * });\n     */","meta":{"range":[65873,66493],"filename":"geolocator.js","lineno":1621,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100002509","name":"geolocator.ensureGoogleLoaded","type":"MethodDefinition","paramnames":["key","callback"]},"vars":{"":null}},"description":"Ensures Google Maps API is loaded. If not, this will load all of the\nmain Javascript objects and symbols for use in the Maps API.\n\nNote that, Google Maps API is loaded only when needed. For example,\nthe DistanceMatrix API does not support Web Service requests and\nrequires this API to be loaded. However, the TimeZone API requests are\nmade throught the Web Service without requiring a `google` object\nwithin DOM.\n\nAlso note that this will not re-load the API if `google.maps` object\nalready exists. In this case, the `callback` is still executed and\nno errors are passed.\n\nYou can use the following overload to omit the `key` argument altogether:\n\n`geolocator.ensureGoogleLoaded(callback)`","params":[{"type":{"names":["String"]},"optional":true,"description":"Google API key.","name":"key"},{"type":{"names":["function"]},"description":"Callback function to be executed when the operation ends.","name":"callback"}],"returns":[{"type":{"names":["void"]}}],"examples":["geolocator.ensureGoogleLoaded(function (err) {\n\t   if (err) return;\n\t   console.log('google' in window); // true\n});"],"name":"ensureGoogleLoaded","longname":"geolocator.ensureGoogleLoaded","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.ensureGoogleLoaded"},{"comment":"/**\n     * Geolocator Error class that provides a common type of error object for\n     * the various APIs implemented in Geolocator. All callbacks of Geolocator\n     * will include an instance of this object as the first argument; if the\n     * corresponding operation fails. Also all thrown errors will be an instance\n     * of this object.\n     *\n     * This object also enumerates\n     * {@link ?api=geolocator-error#GeoError.Code|Geolocator Error codes}.\n     *\n     * @see {@link ?api=geolocator-error|`GeoError` documentation}\n     * @type {GeoError}\n     * @readonly\n     */","meta":{"range":[3938,3989],"filename":"geolocator.js","lineno":139,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000064","name":"geolocator.Error","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Geolocator Error class that provides a common type of error object for\nthe various APIs implemented in Geolocator. All callbacks of Geolocator\nwill include an instance of this object as the first argument; if the\ncorresponding operation fails. Also all thrown errors will be an instance\nof this object.\n\nThis object also enumerates\n{@link ?api=geolocator-error#GeoError.Code|Geolocator Error codes}.","see":["{@link ?api=geolocator-error|`GeoError` documentation}"],"type":{"names":["GeoError"]},"readonly":true,"name":"Error","longname":"geolocator.Error","kind":"member","memberof":"geolocator","scope":"static","$longname":"geolocator.Error"},{"comment":"/**\n     * Converts a given address (or address components) into geographic\n     * coordinates (i.e. latitude, longitude).\n     * @see {@link https://developers.google.com/maps/documentation/geocoding/intro|Google Maps Geocoding API}\n     * @see {@link https://developers.google.com/maps/documentation/geocoding/usage-limits|Usage Limits}\n     *\n     * @param {String|Object} options\n     *        Either the address to geocode or geocoding options with the\n     *        following properties.\n     *     @param {String} options.address\n     *            The street address to geocode, in the format used by the\n     *            national postal service of the country concerned. Additional\n     *            address elements such as business names and unit, suite or\n     *            floor numbers should be avoided. Note that any address\n     *            component (route, locality, administrativeArea, postalCode and\n     *            country) should be specified either in address or the\n     *            corresponding property - not both. Doing so may result in\n     *            `ZERO_RESULTS`.\n     *     @param {String} [options.route]\n     *     \t      Long or short name of a route.\n     *     @param {String} [options.locality]\n     *     \t      Locality and sublocality of the location.\n     *     @param {String} [options.administrativeArea]\n     *     \t      Administrative area of the location.\n     *     @param {String} [options.postalCode]\n     *     \t      Postal code of the location.\n     *     @param {String} [options.country]\n     *     \t      A country name or a two letter ISO 3166-1 country code.\n     *     @param {String} [options.region]\n     *     \t      The region code, specified as a ccTLD (\"top-level domain\")\n     *     \t      two-character value. e.g.: `\"fr\"` for France.\n     *     @param {Array|Object} [options.bounds]\n     *     \t      The bounding box of the viewport within which to bias geocode\n     *     \t      results more prominently. e.g.:\n     *     \t      `[ southwestLat:Number, southwestLng:Number, northeastLat:Number, northeastLng:Number ]`\n     *     @param {String|Object} [options.map]\n     *            In order to create a map from the fetched location coordinates;\n     *            either set this to map options object or; the ID of a DOM\n     *            element or DOM element itself which the map will be created\n     *            within.\n     *     @param {Boolean} [options.raw=false]\n     *     \t      Whether to return the raw Google API result.\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes.\n     *        This takes 2 arguments: `function (err, location) { ... }`\n     *\n     * @returns {void}\n     *\n     * @example\n     * var address = '1600 Amphitheatre Parkway, CA';\n     * geolocator.geocode(address, function (err, location) {\n     *     console.log(err || location);\n     * });\n     *\n     * @example\n     * // location result:\n     * {\n     *     coords: {\n     *         latitude: 37.4224764,\n     *         longitude: -122.0842499\n     *     },\n     *     address: {\n     *         commonName: \"\",\n     *         street: \"Amphitheatre Pkwy\",\n     *         route: \"Amphitheatre Pkwy\",\n     *         streetNumber: \"1600\",\n     *         neighborhood: \"\",\n     *         town: \"\",\n     *         city: \"Mountain View\",\n     *         region: \"Santa Clara County\",\n     *         state: \"California\",\n     *         stateCode: \"CA\",\n     *         postalCode: \"94043\",\n     *         country: \"United States\",\n     *         countryCode: \"US\"\n     *     },\n     *     formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n     *     type: \"ROOFTOP\",\n     *     placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n     *     flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\n     *     map: {\n     *     \t   element: HTMLElement,\n     *     \t   instance: Object, // google.maps.Map\n     *     \t   marker: Object, // google.maps.Marker\n     *     \t   infoWindow: Object, // google.maps.InfoWindow\n     *     \t   options: Object // map options\n     *     },\n     *     timestamp: 1456795956380\n     * }\n     */","meta":{"range":[45986,46757],"filename":"geolocator.js","lineno":1118,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100001374","name":"geolocator.geocode","type":"MethodDefinition","paramnames":["options","callback"]},"vars":{"":null}},"description":"Converts a given address (or address components) into geographic\ncoordinates (i.e. latitude, longitude).","see":["{@link https://developers.google.com/maps/documentation/geocoding/intro|Google Maps Geocoding API}","{@link https://developers.google.com/maps/documentation/geocoding/usage-limits|Usage Limits}"],"params":[{"type":{"names":["String","Object"]},"description":"Either the address to geocode or geocoding options with the\n       following properties.","name":"options"},{"type":{"names":["String"]},"description":"The street address to geocode, in the format used by the\n           national postal service of the country concerned. Additional\n           address elements such as business names and unit, suite or\n           floor numbers should be avoided. Note that any address\n           component (route, locality, administrativeArea, postalCode and\n           country) should be specified either in address or the\n           corresponding property - not both. Doing so may result in\n           `ZERO_RESULTS`.","name":"options.address"},{"type":{"names":["String"]},"optional":true,"description":"Long or short name of a route.","name":"options.route"},{"type":{"names":["String"]},"optional":true,"description":"Locality and sublocality of the location.","name":"options.locality"},{"type":{"names":["String"]},"optional":true,"description":"Administrative area of the location.","name":"options.administrativeArea"},{"type":{"names":["String"]},"optional":true,"description":"Postal code of the location.","name":"options.postalCode"},{"type":{"names":["String"]},"optional":true,"description":"A country name or a two letter ISO 3166-1 country code.","name":"options.country"},{"type":{"names":["String"]},"optional":true,"description":"The region code, specified as a ccTLD (\"top-level domain\")\n    \t      two-character value. e.g.: `\"fr\"` for France.","name":"options.region"},{"type":{"names":["Array","Object"]},"optional":true,"description":"The bounding box of the viewport within which to bias geocode\n    \t      results more prominently. e.g.:\n    \t      `[ southwestLat:Number, southwestLng:Number, northeastLat:Number, northeastLng:Number ]`","name":"options.bounds"},{"type":{"names":["String","Object"]},"optional":true,"description":"In order to create a map from the fetched location coordinates;\n           either set this to map options object or; the ID of a DOM\n           element or DOM element itself which the map will be created\n           within.","name":"options.map"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Whether to return the raw Google API result.","name":"options.raw"},{"type":{"names":["function"]},"description":"Callback function to be executed when the request completes.\n       This takes 2 arguments: `function (err, location) { ... }`","name":"callback"}],"returns":[{"type":{"names":["void"]}}],"examples":["var address = '1600 Amphitheatre Parkway, CA';\ngeolocator.geocode(address, function (err, location) {\n    console.log(err || location);\n});","// location result:\n{\n    coords: {\n        latitude: 37.4224764,\n        longitude: -122.0842499\n    },\n    address: {\n        commonName: \"\",\n        street: \"Amphitheatre Pkwy\",\n        route: \"Amphitheatre Pkwy\",\n        streetNumber: \"1600\",\n        neighborhood: \"\",\n        town: \"\",\n        city: \"Mountain View\",\n        region: \"Santa Clara County\",\n        state: \"California\",\n        stateCode: \"CA\",\n        postalCode: \"94043\",\n        country: \"United States\",\n        countryCode: \"US\"\n    },\n    formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n    type: \"ROOFTOP\",\n    placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n    flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\n    map: {\n    \t   element: HTMLElement,\n    \t   instance: Object, // google.maps.Map\n    \t   marker: Object, // google.maps.Marker\n    \t   infoWindow: Object, // google.maps.InfoWindow\n    \t   options: Object // map options\n    },\n    timestamp: 1456795956380\n}"],"name":"geocode","longname":"geolocator.geocode","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.geocode"},{"comment":"/**\n     * Gets the distance and duration values based on the recommended route\n     * between start and end points.\n     * @see {@link https://developers.google.com/maps/documentation/distance-matrix/intro|Google Maps Distance Matrix API}\n     * @see {@link https://developers.google.com/maps/documentation/distance-matrix/usage-limits|Usage Limits}\n     *\n     * @param {Object} options\n     *        Distance matrix options.\n     *     @param {String|Object|Array} options.origins\n     *            One or more addresses and/or an object of latitude/longitude\n     *            values, from which to calculate distance and time. If you pass\n     *            an address as a string, the service will geocode the string\n     *            and convert it to a latitude/longitude coordinate to calculate\n     *            distances. Following are valid examples:\n     * <pre><code>options.origins = 'London';\n     * options.origins = ['London', 'Paris'];\n     * options.origins = { latitude: 51.5085300, longitude: -0.1257400 };\n     * options.origins = [\n     *     { latitude: 51.5085300, longitude: -0.1257400 },\n     *     { latitude: 48.8534100, longitude: 2.3488000 }\n     * ];\n     * </code></pre>\n     *     @param {String|Object|Array} options.destinations\n     *            One or more addresses and/or an object of latitude/longitude\n     *            values, from which to calculate distance and time. If you pass\n     *            an address as a string, the service will geocode the string\n     *            and convert it to a latitude/longitude coordinate to calculate\n     *            distances.\n     *     @param {String} [options.travelMode=\"DRIVING\"]\n     *            Type of routing requested.\n     *            See {@link #geolocator.TravelMode|`geolocator.TravelMode` enumeration}\n     *            for possible values.\n     *     @param {Boolean} [options.avoidFerries]\n     *            If true, instructs the Distance Matrix service to avoid\n     *            ferries where possible.\n     *     @param {Boolean} [options.avoidHighways]\n     *            If true, instructs the Distance Matrix service to avoid\n     *            highways where possible.\n     *     @param {Boolean} [options.avoidTolls]\n     *            If true, instructs the Distance Matrix service to avoid toll\n     *            roads where possible.\n     *     @param {Number} [options.unitSystem=0]\n     *            Preferred unit system to use when displaying distance.\n     *            See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}\n     *            for possible values.\n     *     @param {String} [options.region]\n     *            Region code used as a bias for geocoding requests.\n     * @param {Boolean} [options.raw=false]\n     *        Whether to return the raw Google API result.\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes,\n     *        in the following signature: `function (err, result) { ... }`\n     *\n     * @returns {void}\n     *\n     * @example\n     * var options = {\n     *     origins: [{ latitude: 51.5085300, longitude: -0.1257400 }],\n     *     destinations: [{ latitude: 48.8534100, longitude: 2.3488000 }],\n     *     travelMode: geolocator.TravelMode.DRIVING,\n     *     unitSystem: geolocator.UnitSystem.METRIC\n     * };\n     * geolocator.getDistanceMatrix(options, function (err, result) {\n     *     console.log(err || result);\n     * });\n     *\n     * @example\n     * // result:\n     * [\n     * \t{\n     * \t\tfrom: \"449 Duncannon St, London WC2R 0DZ, UK\",\n     * \t\tto: \"1 Parvis Notre-Dame - Pl. Jean-Paul II, 75004 Paris-4E-Arrondissement, France\",\n     * \t\tdistance: {\n     * \t\t\tvalue: 475104,\n     * \t\t\ttext: \"475 km\"\n     * \t\t},\n     * \t\tduration: {\n     * \t\t\tvalue: 20193,\n     * \t\t\ttext: \"5 hours 37 mins\"\n     * \t\t},\n     * \t\tfare: undefined,\n     * \t\ttimestamp: 1456795956380\n     * \t}\n     * ]\n     */","meta":{"range":[58806,60534],"filename":"geolocator.js","lineno":1439,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100001922","name":"geolocator.getDistanceMatrix","type":"MethodDefinition","paramnames":["options","callback"]},"vars":{"":null}},"description":"Gets the distance and duration values based on the recommended route\nbetween start and end points.","see":["{@link https://developers.google.com/maps/documentation/distance-matrix/intro|Google Maps Distance Matrix API}","{@link https://developers.google.com/maps/documentation/distance-matrix/usage-limits|Usage Limits}"],"params":[{"type":{"names":["Object"]},"description":"Distance matrix options.","name":"options"},{"type":{"names":["String","Object","Array"]},"description":"One or more addresses and/or an object of latitude/longitude\n           values, from which to calculate distance and time. If you pass\n           an address as a string, the service will geocode the string\n           and convert it to a latitude/longitude coordinate to calculate\n           distances. Following are valid examples:\n<pre><code>options.origins = 'London';\noptions.origins = ['London', 'Paris'];\noptions.origins = { latitude: 51.5085300, longitude: -0.1257400 };\noptions.origins = [\n    { latitude: 51.5085300, longitude: -0.1257400 },\n    { latitude: 48.8534100, longitude: 2.3488000 }\n];\n</code></pre>","name":"options.origins"},{"type":{"names":["String","Object","Array"]},"description":"One or more addresses and/or an object of latitude/longitude\n           values, from which to calculate distance and time. If you pass\n           an address as a string, the service will geocode the string\n           and convert it to a latitude/longitude coordinate to calculate\n           distances.","name":"options.destinations"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"\"DRIVING\"","description":"Type of routing requested.\n           See {@link #geolocator.TravelMode|`geolocator.TravelMode` enumeration}\n           for possible values.","name":"options.travelMode"},{"type":{"names":["Boolean"]},"optional":true,"description":"If true, instructs the Distance Matrix service to avoid\n           ferries where possible.","name":"options.avoidFerries"},{"type":{"names":["Boolean"]},"optional":true,"description":"If true, instructs the Distance Matrix service to avoid\n           highways where possible.","name":"options.avoidHighways"},{"type":{"names":["Boolean"]},"optional":true,"description":"If true, instructs the Distance Matrix service to avoid toll\n           roads where possible.","name":"options.avoidTolls"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":0,"description":"Preferred unit system to use when displaying distance.\n           See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}\n           for possible values.","name":"options.unitSystem"},{"type":{"names":["String"]},"optional":true,"description":"Region code used as a bias for geocoding requests.","name":"options.region"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Whether to return the raw Google API result.","name":"options.raw"},{"type":{"names":["function"]},"description":"Callback function to be executed when the request completes,\n       in the following signature: `function (err, result) { ... }`","name":"callback"}],"returns":[{"type":{"names":["void"]}}],"examples":["var options = {\n    origins: [{ latitude: 51.5085300, longitude: -0.1257400 }],\n    destinations: [{ latitude: 48.8534100, longitude: 2.3488000 }],\n    travelMode: geolocator.TravelMode.DRIVING,\n    unitSystem: geolocator.UnitSystem.METRIC\n};\ngeolocator.getDistanceMatrix(options, function (err, result) {\n    console.log(err || result);\n});","// result:\n[\n\t{\n\t\tfrom: \"449 Duncannon St, London WC2R 0DZ, UK\",\n\t\tto: \"1 Parvis Notre-Dame - Pl. Jean-Paul II, 75004 Paris-4E-Arrondissement, France\",\n\t\tdistance: {\n\t\t\tvalue: 475104,\n\t\t\ttext: \"475 km\"\n\t\t},\n\t\tduration: {\n\t\t\tvalue: 20193,\n\t\t\ttext: \"5 hours 37 mins\"\n\t\t},\n\t\tfare: undefined,\n\t\ttimestamp: 1456795956380\n\t}\n]"],"name":"getDistanceMatrix","longname":"geolocator.getDistanceMatrix","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.getDistanceMatrix"},{"comment":"/**\n     * Gets the current public IP of the client.\n     *\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes, in\n     *        the following signature: `function (err, result) { ... }`\n     *\n     * @returns {void}\n     *\n     * @example\n     * geolocator.getIP(function (err, result) {\n     *     console.log(err || result);\n     * });\n     * // result:\n     * {\n     *     ip: \"176.232.71.155\",\n     *     timestamp: 1457573683427\n     * }\n     */","meta":{"range":[63878,64683],"filename":"geolocator.js","lineno":1564,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100002409","name":"geolocator.getIP","type":"MethodDefinition","paramnames":["callback"]},"vars":{"":null}},"description":"Gets the current public IP of the client.","params":[{"type":{"names":["function"]},"description":"Callback function to be executed when the request completes, in\n       the following signature: `function (err, result) { ... }`","name":"callback"}],"returns":[{"type":{"names":["void"]}}],"examples":["geolocator.getIP(function (err, result) {\n    console.log(err || result);\n});\n// result:\n{\n    ip: \"176.232.71.155\",\n    timestamp: 1457573683427\n}"],"name":"getIP","longname":"geolocator.getIP","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.getIP"},{"comment":"/**\n     * Gets timezone information for the given coordinates.\n     * @see {@link https://developers.google.com/maps/documentation/timezone/intro|Google Maps TimeZone API}\n     * @see {@link https://developers.google.com/maps/documentation/timezone/usage-limits|Usage Limits}\n     *\n     * @param {Object} options\n     *        Time zone options.\n     *     @param {Number} options.latitude\n     *            Latitude of location.\n     *     @param {Number} options.longitude\n     *            Longitude of location.\n     *     @param {Number} [options.timestamp=Date.now()]\n     *            Specifies the desired time as seconds since midnight, January\n     *            1, 1970 UTC. This is used to determine whether or not Daylight\n     *            Savings should be applied.\n     *     @param {Boolean} [options.raw=false]\n     *            Whether to return the raw Google API result.\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes, in\n     *        the following signature: `function (err, timezone) { ... }`\n     *\n     * @returns {void}\n     *\n     * @example\n     * var options = {\n     *     latitude: 48.8534100,\n     *     longitude: 2.3488000\n     * };\n     * geolocator.getTimeZone(options, function (err, timezone) {\n     *     console.log(err || timezone);\n     * });\n     *\n     * @example\n     * // timezone result:\n     * {\n     *     id: \"Europe/Paris\",\n     *     name: \"Central European Standard Time\",\n     *     abbr: \"CEST\",\n     *     dstOffset: 0,\n     *     rawOffset: 3600,\n     *     timestamp: 1455733120\n     * }\n     */","meta":{"range":[52907,54868],"filename":"geolocator.js","lineno":1301,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100001656","name":"geolocator.getTimeZone","type":"MethodDefinition","paramnames":["options","callback"]},"vars":{"":null}},"description":"Gets timezone information for the given coordinates.","see":["{@link https://developers.google.com/maps/documentation/timezone/intro|Google Maps TimeZone API}","{@link https://developers.google.com/maps/documentation/timezone/usage-limits|Usage Limits}"],"params":[{"type":{"names":["Object"]},"description":"Time zone options.","name":"options"},{"type":{"names":["Number"]},"description":"Latitude of location.","name":"options.latitude"},{"type":{"names":["Number"]},"description":"Longitude of location.","name":"options.longitude"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":"Date.now()","description":"Specifies the desired time as seconds since midnight, January\n           1, 1970 UTC. This is used to determine whether or not Daylight\n           Savings should be applied.","name":"options.timestamp"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Whether to return the raw Google API result.","name":"options.raw"},{"type":{"names":["function"]},"description":"Callback function to be executed when the request completes, in\n       the following signature: `function (err, timezone) { ... }`","name":"callback"}],"returns":[{"type":{"names":["void"]}}],"examples":["var options = {\n    latitude: 48.8534100,\n    longitude: 2.3488000\n};\ngeolocator.getTimeZone(options, function (err, timezone) {\n    console.log(err || timezone);\n});","// timezone result:\n{\n    id: \"Europe/Paris\",\n    name: \"Central European Standard Time\",\n    abbr: \"CEST\",\n    dstOffset: 0,\n    rawOffset: 3600,\n    timestamp: 1455733120\n}"],"name":"getTimeZone","longname":"geolocator.getTimeZone","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.getTimeZone"},{"comment":"/**\n     * Checks whether the given value is an instance of `GeoError`.\n     *\n     * @param {*} obj - Object to be checked.\n     * @return {Boolean}\n     */","meta":{"range":[67146,67217],"filename":"geolocator.js","lineno":1669,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100002594","name":"geolocator.isGeoError","type":"MethodDefinition","paramnames":["obj"]},"vars":{"":null}},"description":"Checks whether the given value is an instance of `GeoError`.","params":[{"type":{"names":["*"]},"description":"Object to be checked.","name":"obj"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isGeoError","longname":"geolocator.isGeoError","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.isGeoError"},{"comment":"/**\n     * Checks whether HTML5 Geolocation API is supported.\n     *\n     * @return {Boolean}\n     */","meta":{"range":[67329,67426],"filename":"geolocator.js","lineno":1678,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100002605","name":"geolocator.isGeolocationSupported","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Checks whether HTML5 Geolocation API is supported.","returns":[{"type":{"names":["Boolean"]}}],"name":"isGeolocationSupported","longname":"geolocator.isGeolocationSupported","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.isGeolocationSupported"},{"comment":"/**\n     * Checks whether the Google Maps API is loaded.\n     *\n     * @returns {Boolean} - Returns `true` if already loaded.\n     */","meta":{"range":[66637,66720],"filename":"geolocator.js","lineno":1649,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100002571","name":"geolocator.isGoogleLoaded","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Checks whether the Google Maps API is loaded.","returns":[{"type":{"names":["Boolean"]},"description":"- Returns `true` if already loaded."}],"name":"isGoogleLoaded","longname":"geolocator.isGoogleLoaded","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.isGoogleLoaded"},{"comment":"/**\n     * Checks whether the type of the given object is an HTML5 `PositionError`.\n     *\n     * @param {*} obj - Object to be checked.\n     * @return {Boolean}\n     */","meta":{"range":[66900,66978],"filename":"geolocator.js","lineno":1659,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100002583","name":"geolocator.isPositionError","type":"MethodDefinition","paramnames":["obj"]},"vars":{"":null}},"description":"Checks whether the type of the given object is an HTML5 `PositionError`.","params":[{"type":{"names":["*"]},"description":"Object to be checked.","name":"obj"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isPositionError","longname":"geolocator.isPositionError","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.isPositionError"},{"comment":"/**\n     * Converts kilometers to miles.\n     *\n     * @param {Number} km - Kilometers to be converted.\n     * @returns {Number} - Miles.\n     */","meta":{"range":[67582,67637],"filename":"geolocator.js","lineno":1688,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100002615","name":"geolocator.kmToMi","type":"MethodDefinition","paramnames":["km"]},"vars":{"":null}},"description":"Converts kilometers to miles.","params":[{"type":{"names":["Number"]},"description":"Kilometers to be converted.","name":"km"}],"returns":[{"type":{"names":["Number"]},"description":"- Miles."}],"name":"kmToMi","longname":"geolocator.kmToMi","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.kmToMi"},{"comment":"/**\n     * Locates the user's location via HTML5 geolocation. This may\n     * require/prompt for user's permission. If the permission is granted we'll\n     * get the most accurate location information. Otherwise, we'll fallback to\n     * locating via user's IP (if enabled).\n     *\n     * For better accuracy, Geolocator implements a different approach than the\n     * `getCurrentPosition` API; which generally triggers before the device's\n     * GPS hardware can provide anything accurate. Thanks to\n     * {@link https://github.com/gwilson/getAccurateCurrentPosition#background|Greg Wilson}\n     * for the idea.\n     *\n     * Also note that HTML5 Geolocation feature no more allows insecure origins.\n     * See {@link https://goo.gl/rStTGz|this} for more details.\n     * This means if you don't call this method from an HTTPS page, it will\n     * fail. And if `options.considerIp` is enabled, this will locate by IP.\n     *\n     * @param {Object} [options]\n     *        HTML5 geo-location settings with some additional options.\n     *     @param {Boolean} [options.enableHighAccuracy=true]\n     *            Specifies whether the device should provide the most accurate\n     *            position it can. Note that setting this to `true` might\n     *            consume more CPU and/or battery power; and result in slower\n     *            response times.\n     *     @param {Number} [options.timeout=6000]\n     *            HTML5 position timeout setting in milliseconds. Setting this\n     *            to `Infinity` means that Geolocator won't return until the\n     *            position is available.\n     *     @param {Number} [options.maximumAge=0]\n     *            HTML5 position maximum age. Indicates the maximum age in\n     *            milliseconds of a possible cached position that is acceptable\n     *            to return. `0` means, the device cannot use a cached position\n     *            and must attempt to retrieve the real current position. If set\n     *            to `Infinity` the device must return a cached position\n     *            regardless of its age. Note that if `enableHighAccuracy` is\n     *            set to `true`, `maximumAge` will be forced to `0`.\n     *     @param {Number} [options.desiredAccuracy=30]\n     *            Minimum accuracy desired, in meters. Position will not be\n     *            returned until this is met, before the timeout. This only\n     *            takes affect if `enableHighAccuracy` is set to `true`.\n     *     @param {Boolean} [options.considerIp=false]\n     *            Specifies whether to fallback to IP geolocation if the HTML5\n     *            geolocation fails (e.g. user rejection).\n     *     @param {Boolean} [options.addressLookup=false]\n     *            Specifies whether to run a reverse-geocode operation for the\n     *            fetched coordinates to retrieve detailed address information.\n     *            Note that this means an additional request which requires a\n     *            Google API key to be set in the Geolocator configuration.\n     *            See {@link #geolocator.config|`geolocator.config()`}.\n     *     @param {Boolean} [options.timezone=false]\n     *            Specifies whether to also fetch the time zone information for\n     *            the receieved coordinates. Note that this means an additional\n     *            request which requires a Google API key to be set in the\n     *            Geolocator configuration.\n     *            See {@link #geolocator.config|`geolocator.config()`}.\n     *     @param {String|Object} [options.map]\n     *            In order to create a map from the fetched location coordinates;\n     *            either set this to map options object or; the ID of a DOM\n     *            element or DOM element itself which the map will be created\n     *            within.\n     *\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes.\n     *        This takes 2 arguments: `function (err, location) { ... }`\n     *\n     * @returns {void}\n     *\n     * @example\n     * var options = {\n     *     enableHighAccuracy: true,\n     *     timeout: 6000,\n     *     maximumAge: 0,\n     *     desiredAccuracy: 30,\n     *     considerIp: true,\n     *     addressLookup: true,\n     *     timezone: true,\n     *     map: \"my-map\"\n     * };\n     * geolocator.locate(options, function (err, location) {\n     *     console.log(err || location);\n     * });\n     *\n     * @example\n     * // location result:\n     * {\n     *     coords: {\n     *         latitude: 37.4224764,\n     *         longitude: -122.0842499,\n     *         accuracy: 30,\n     *         altitude: null,\n     *         altitudeAccuracy: null,\n     *         heading: null,\n     *         speed: null\n     *     },\n     *     address: {\n     *         commonName: \"\",\n     *         street: \"Amphitheatre Pkwy\",\n     *         route: \"Amphitheatre Pkwy\",\n     *         streetNumber: \"1600\",\n     *         neighborhood: \"\",\n     *         town: \"\",\n     *         city: \"Mountain View\",\n     *         region: \"Santa Clara County\",\n     *         state: \"California\",\n     *         stateCode: \"CA\",\n     *         postalCode: \"94043\",\n     *         country: \"United States\",\n     *         countryCode: \"US\"\n     *     },\n     *     formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n     *     type: \"ROOFTOP\",\n     *     placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n     *     timezone: {\n     *         id: \"America/Los_Angeles\",\n     *         name: \"Pacific Standard Time\",\n     *         abbr: \"PST\",\n     *         dstOffset: 0,\n     *         rawOffset: -28800\n     *     },\n     *     flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\n     *     map: {\n     *     \t   element: HTMLElement,\n     *     \t   instance: Object, // google.maps.Map\n     *     \t   marker: Object, // google.maps.Marker\n     *     \t   infoWindow: Object, // google.maps.InfoWindow\n     *     \t   options: Object // map options\n     *     },\n     *     timestamp: 1456795956380\n     * }\n     */","meta":{"range":[18981,20507],"filename":"geolocator.js","lineno":513,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000460","name":"geolocator.locate","type":"MethodDefinition","paramnames":["options","callback"]},"vars":{"":null}},"description":"Locates the user's location via HTML5 geolocation. This may\nrequire/prompt for user's permission. If the permission is granted we'll\nget the most accurate location information. Otherwise, we'll fallback to\nlocating via user's IP (if enabled).\n\nFor better accuracy, Geolocator implements a different approach than the\n`getCurrentPosition` API; which generally triggers before the device's\nGPS hardware can provide anything accurate. Thanks to\n{@link https://github.com/gwilson/getAccurateCurrentPosition#background|Greg Wilson}\nfor the idea.\n\nAlso note that HTML5 Geolocation feature no more allows insecure origins.\nSee {@link https://goo.gl/rStTGz|this} for more details.\nThis means if you don't call this method from an HTTPS page, it will\nfail. And if `options.considerIp` is enabled, this will locate by IP.","params":[{"type":{"names":["Object"]},"optional":true,"description":"HTML5 geo-location settings with some additional options.","name":"options"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Specifies whether the device should provide the most accurate\n           position it can. Note that setting this to `true` might\n           consume more CPU and/or battery power; and result in slower\n           response times.","name":"options.enableHighAccuracy"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":6000,"description":"HTML5 position timeout setting in milliseconds. Setting this\n           to `Infinity` means that Geolocator won't return until the\n           position is available.","name":"options.timeout"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":0,"description":"HTML5 position maximum age. Indicates the maximum age in\n           milliseconds of a possible cached position that is acceptable\n           to return. `0` means, the device cannot use a cached position\n           and must attempt to retrieve the real current position. If set\n           to `Infinity` the device must return a cached position\n           regardless of its age. Note that if `enableHighAccuracy` is\n           set to `true`, `maximumAge` will be forced to `0`.","name":"options.maximumAge"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":30,"description":"Minimum accuracy desired, in meters. Position will not be\n           returned until this is met, before the timeout. This only\n           takes affect if `enableHighAccuracy` is set to `true`.","name":"options.desiredAccuracy"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Specifies whether to fallback to IP geolocation if the HTML5\n           geolocation fails (e.g. user rejection).","name":"options.considerIp"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Specifies whether to run a reverse-geocode operation for the\n           fetched coordinates to retrieve detailed address information.\n           Note that this means an additional request which requires a\n           Google API key to be set in the Geolocator configuration.\n           See {@link #geolocator.config|`geolocator.config()`}.","name":"options.addressLookup"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Specifies whether to also fetch the time zone information for\n           the receieved coordinates. Note that this means an additional\n           request which requires a Google API key to be set in the\n           Geolocator configuration.\n           See {@link #geolocator.config|`geolocator.config()`}.","name":"options.timezone"},{"type":{"names":["String","Object"]},"optional":true,"description":"In order to create a map from the fetched location coordinates;\n           either set this to map options object or; the ID of a DOM\n           element or DOM element itself which the map will be created\n           within.","name":"options.map"},{"type":{"names":["function"]},"description":"Callback function to be executed when the request completes.\n       This takes 2 arguments: `function (err, location) { ... }`","name":"callback"}],"returns":[{"type":{"names":["void"]}}],"examples":["var options = {\n    enableHighAccuracy: true,\n    timeout: 6000,\n    maximumAge: 0,\n    desiredAccuracy: 30,\n    considerIp: true,\n    addressLookup: true,\n    timezone: true,\n    map: \"my-map\"\n};\ngeolocator.locate(options, function (err, location) {\n    console.log(err || location);\n});","// location result:\n{\n    coords: {\n        latitude: 37.4224764,\n        longitude: -122.0842499,\n        accuracy: 30,\n        altitude: null,\n        altitudeAccuracy: null,\n        heading: null,\n        speed: null\n    },\n    address: {\n        commonName: \"\",\n        street: \"Amphitheatre Pkwy\",\n        route: \"Amphitheatre Pkwy\",\n        streetNumber: \"1600\",\n        neighborhood: \"\",\n        town: \"\",\n        city: \"Mountain View\",\n        region: \"Santa Clara County\",\n        state: \"California\",\n        stateCode: \"CA\",\n        postalCode: \"94043\",\n        country: \"United States\",\n        countryCode: \"US\"\n    },\n    formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n    type: \"ROOFTOP\",\n    placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n    timezone: {\n        id: \"America/Los_Angeles\",\n        name: \"Pacific Standard Time\",\n        abbr: \"PST\",\n        dstOffset: 0,\n        rawOffset: -28800\n    },\n    flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\n    map: {\n    \t   element: HTMLElement,\n    \t   instance: Object, // google.maps.Map\n    \t   marker: Object, // google.maps.Marker\n    \t   infoWindow: Object, // google.maps.InfoWindow\n    \t   options: Object // map options\n    },\n    timestamp: 1456795956380\n}"],"name":"locate","longname":"geolocator.locate","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.locate"},{"comment":"/**\n     * Locates the user's location by the client's IP.\n     *\n     * This method uses Wikimedia's Geo-IP lookup service, by default.\n     * In order to change the source provider, you can use\n     * {@link #geolocator.setGeoIPSource|`geolocator.setGeoIPSource()` method}.\n     *\n     * @param {Object} [options]\n     *        Locate options.\n     *     @param {Boolean} [options.addressLookup=false]\n     *            Specifies whether to run a reverse-geocode operation for the\n     *            fetched coordinates to retrieve detailed address information.\n     *            Since no precise address can be fetched from an IP addres; you\n     *            should only enable this if the Geo-IP Source returns no useful\n     *            address information other than coordinates. Also, note that\n     *            this means an additional request which requires a Google API\n     *            key to be set in the Geolocator configuration.\n     *            See {@link #geolocator.config|`geolocator.config()`}.\n     *     @param {Boolean} [options.timezone=false]\n     *            Specifies whether to also fetch the time zone information for\n     *            the receieved coordinates. Note that this means an additional\n     *            request which requires a Google API key to be set in the\n     *            Geolocator configuration.\n     *            See {@link #geolocator.config|`geolocator.config()`}.\n     *     @param {String|Object} [options.map]\n     *            In order to create a map from the fetched location coordinates;\n     *            either set this to map options object or; the ID of a DOM\n     *            element or DOM element itself which the map will be created\n     *            within.\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes.\n     *        This takes 2 arguments: `function (err, location) { ... }`\n     *\n     * @returns {void}\n     *\n     * @example\n     * var options = {\n     * \t   addressLookup: true,\n     * \t   timezone: true,\n     * \t   map: \"my-map\"\n     * };\n     * geolocator.locateByIp(options, function (err, location) {\n     * \t   console.log(err || location);\n     * });\n     *\n     * @example\n     * // location result:\n     * {\n     *     coords: {\n     *         latitude: 37.4224764,\n     *         longitude: -122.0842499,\n     *     },\n     *     address: {\n     *         city: \"Istanbul\",\n     *         region: \"34\",\n     *         state: \"34\",\n     *         country: \"TR\",\n     *         countryCode: \"TR\"\n     *     },\n     *     formattedAddress: \"Demirtaş, Tesviyeci Sk. No:7, 34134 Fatih/İstanbul, Turkey\",\n     *     type: \"ROOFTOP\",\n     *     placeId: \"ChIJ-ZRLfO25yhQRBi5YJxX80Q0\",\n     *     timezone: {\n     *         id: \"Europe/Istanbul\",\n     *         name: \"Eastern European Summer Time\",\n     *         abbr: \"EEST\",\n     *         dstOffset: 3600,\n     *         rawOffset: 7200\n     *     },\n     *     flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/tr.svg\",\n     *     map: {\n     *     \t   element: HTMLElement,\n     *     \t   instance: Object, // google.maps.Map\n     *     \t   marker: Object, // google.maps.Marker\n     *     \t   infoWindow: Object, // google.maps.InfoWindow\n     *     \t   options: Object // map options\n     *     },\n     *     provider: \"wikimedia\",\n     *     timestamp: 1466216325223\n     * }\n     */","meta":{"range":[30212,32303],"filename":"geolocator.js","lineno":782,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000841","name":"geolocator.locateByIP","type":"MethodDefinition","paramnames":["options","callback"]},"vars":{"":null}},"description":"Locates the user's location by the client's IP.\n\nThis method uses Wikimedia's Geo-IP lookup service, by default.\nIn order to change the source provider, you can use\n{@link #geolocator.setGeoIPSource|`geolocator.setGeoIPSource()` method}.","params":[{"type":{"names":["Object"]},"optional":true,"description":"Locate options.","name":"options"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Specifies whether to run a reverse-geocode operation for the\n           fetched coordinates to retrieve detailed address information.\n           Since no precise address can be fetched from an IP addres; you\n           should only enable this if the Geo-IP Source returns no useful\n           address information other than coordinates. Also, note that\n           this means an additional request which requires a Google API\n           key to be set in the Geolocator configuration.\n           See {@link #geolocator.config|`geolocator.config()`}.","name":"options.addressLookup"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Specifies whether to also fetch the time zone information for\n           the receieved coordinates. Note that this means an additional\n           request which requires a Google API key to be set in the\n           Geolocator configuration.\n           See {@link #geolocator.config|`geolocator.config()`}.","name":"options.timezone"},{"type":{"names":["String","Object"]},"optional":true,"description":"In order to create a map from the fetched location coordinates;\n           either set this to map options object or; the ID of a DOM\n           element or DOM element itself which the map will be created\n           within.","name":"options.map"},{"type":{"names":["function"]},"description":"Callback function to be executed when the request completes.\n       This takes 2 arguments: `function (err, location) { ... }`","name":"callback"}],"returns":[{"type":{"names":["void"]}}],"examples":["var options = {\n\t   addressLookup: true,\n\t   timezone: true,\n\t   map: \"my-map\"\n};\ngeolocator.locateByIp(options, function (err, location) {\n\t   console.log(err || location);\n});","// location result:\n{\n    coords: {\n        latitude: 37.4224764,\n        longitude: -122.0842499,\n    },\n    address: {\n        city: \"Istanbul\",\n        region: \"34\",\n        state: \"34\",\n        country: \"TR\",\n        countryCode: \"TR\"\n    },\n    formattedAddress: \"Demirtaş, Tesviyeci Sk. No:7, 34134 Fatih/İstanbul, Turkey\",\n    type: \"ROOFTOP\",\n    placeId: \"ChIJ-ZRLfO25yhQRBi5YJxX80Q0\",\n    timezone: {\n        id: \"Europe/Istanbul\",\n        name: \"Eastern European Summer Time\",\n        abbr: \"EEST\",\n        dstOffset: 3600,\n        rawOffset: 7200\n    },\n    flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/tr.svg\",\n    map: {\n    \t   element: HTMLElement,\n    \t   instance: Object, // google.maps.Map\n    \t   marker: Object, // google.maps.Marker\n    \t   infoWindow: Object, // google.maps.InfoWindow\n    \t   options: Object // map options\n    },\n    provider: \"wikimedia\",\n    timestamp: 1466216325223\n}"],"name":"locateByIP","longname":"geolocator.locateByIP","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.locateByIP"},{"comment":"/**\n     * Returns a location and accuracy radius based on information about cell\n     * towers and WiFi nodes that the mobile client can detect; via the Google\n     * Maps Geolocation API.\n     * @see {@link https://developers.google.com/maps/documentation/geolocation/intro|Google Maps Geolocation API}\n     * @see {@link https://developers.google.com/maps/documentation/geolocation/usage-limits|Usage Limits}\n     *\n     * @param {Object} [options]\n     *        Geolocation options.\n     *     @param {Number} [options.homeMobileCountryCode]\n     *            The mobile country code (MCC) for the device's home network.\n     *     @param {Number} [options.homeMobileNetworkCode]\n     *            The mobile network code (MNC) for the device's home network.\n     *     @param {String} [options.radioType]\n     *            The mobile radio type.\n     *            See {@link #geolocator.RadioType|`geolocator.RadioType` enumeration}\n     *            for possible values. While this field is optional, it should\n     *            be included if a value is available, for more accurate results.\n     *     @param {string} [options.carrier]\n     *            The carrier name. e.g. \"Vodafone\"\n     *     @param {Boolean} [options.considerIp=false]\n     *            Specifies whether to fallback to IP geolocation if wifi and\n     *            cell tower signals are not available. Note that the IP address\n     *            in the request header may not be the IP of the device. Set\n     *            `considerIp` to `false` to disable fall back.\n     *     @param {Array} [options.cellTowers]\n     *            An array of cell tower objects.\n     *            See {@link https://developers.google.com/maps/documentation/geolocation/intro#cell_tower_object|Cell tower objects} for details.\n     *     @param {Array} [options.wifiAccessPoints]\n     *            An array of WiFi access point objects.\n     *            See {@link https://developers.google.com/maps/documentation/geolocation/intro#wifi_access_point_object|WiFi access point objects} for details.\n     *     @param {Boolean} [options.addressLookup=false]\n     *            Specifies whether to run a reverse-geocode operation for the\n     *            fetched coordinates to retrieve detailed address information.\n     *            Note that this means an additional request which requires a\n     *            Google API key to be set in the Geolocator configuration.\n     *            See {@link #geolocator.config|`geolocator.config()`}.\n     *     @param {Boolean} [options.timezone=false]\n     *            Specifies whether to also fetch the time zone information for\n     *            the receieved coordinates. Note that this means an additional\n     *            request which requires a Google API key to be set in the\n     *            Geolocator configuration.\n     *            See {@link #geolocator.config|`geolocator.config()`}.\n     *     @param {String|Object} [options.map]\n     *            In order to create a map from the fetched location coordinates;\n     *            either set this to map options object or; the ID of a DOM\n     *            element or DOM element itself which the map will be created\n     *            within.\n     *     @param {Boolean} [options.raw=false]\n     *     \t      Whether to return the raw Google API result.\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes.\n     *        This takes 2 arguments: `function (err, location) { ... }`\n     *\n     * @returns {void}\n     *\n     * @example\n     * var options = {\n     *     homeMobileCountryCode: 310,\n     *     homeMobileNetworkCode: 410,\n     *     carrier: 'Vodafone',\n     *     radioType: geolocator.RadioType.GSM,\n     *     considerIp: true,\n     *     addressLookup: false,\n     *     timezone: false,\n     *     map: \"my-map\"\n     * };\n     * geolocator.locateByMobile(options, function (err, location) {\n     *     console.log(err || location);\n     * });\n     */","meta":{"range":[24521,26792],"filename":"geolocator.js","lineno":630,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000613","name":"geolocator.locateByMobile","type":"MethodDefinition","paramnames":["options","callback"]},"vars":{"":null}},"description":"Returns a location and accuracy radius based on information about cell\ntowers and WiFi nodes that the mobile client can detect; via the Google\nMaps Geolocation API.","see":["{@link https://developers.google.com/maps/documentation/geolocation/intro|Google Maps Geolocation API}","{@link https://developers.google.com/maps/documentation/geolocation/usage-limits|Usage Limits}"],"params":[{"type":{"names":["Object"]},"optional":true,"description":"Geolocation options.","name":"options"},{"type":{"names":["Number"]},"optional":true,"description":"The mobile country code (MCC) for the device's home network.","name":"options.homeMobileCountryCode"},{"type":{"names":["Number"]},"optional":true,"description":"The mobile network code (MNC) for the device's home network.","name":"options.homeMobileNetworkCode"},{"type":{"names":["String"]},"optional":true,"description":"The mobile radio type.\n           See {@link #geolocator.RadioType|`geolocator.RadioType` enumeration}\n           for possible values. While this field is optional, it should\n           be included if a value is available, for more accurate results.","name":"options.radioType"},{"type":{"names":["string"]},"optional":true,"description":"The carrier name. e.g. \"Vodafone\"","name":"options.carrier"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Specifies whether to fallback to IP geolocation if wifi and\n           cell tower signals are not available. Note that the IP address\n           in the request header may not be the IP of the device. Set\n           `considerIp` to `false` to disable fall back.","name":"options.considerIp"},{"type":{"names":["Array"]},"optional":true,"description":"An array of cell tower objects.\n           See {@link https://developers.google.com/maps/documentation/geolocation/intro#cell_tower_object|Cell tower objects} for details.","name":"options.cellTowers"},{"type":{"names":["Array"]},"optional":true,"description":"An array of WiFi access point objects.\n           See {@link https://developers.google.com/maps/documentation/geolocation/intro#wifi_access_point_object|WiFi access point objects} for details.","name":"options.wifiAccessPoints"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Specifies whether to run a reverse-geocode operation for the\n           fetched coordinates to retrieve detailed address information.\n           Note that this means an additional request which requires a\n           Google API key to be set in the Geolocator configuration.\n           See {@link #geolocator.config|`geolocator.config()`}.","name":"options.addressLookup"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Specifies whether to also fetch the time zone information for\n           the receieved coordinates. Note that this means an additional\n           request which requires a Google API key to be set in the\n           Geolocator configuration.\n           See {@link #geolocator.config|`geolocator.config()`}.","name":"options.timezone"},{"type":{"names":["String","Object"]},"optional":true,"description":"In order to create a map from the fetched location coordinates;\n           either set this to map options object or; the ID of a DOM\n           element or DOM element itself which the map will be created\n           within.","name":"options.map"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Whether to return the raw Google API result.","name":"options.raw"},{"type":{"names":["function"]},"description":"Callback function to be executed when the request completes.\n       This takes 2 arguments: `function (err, location) { ... }`","name":"callback"}],"returns":[{"type":{"names":["void"]}}],"examples":["var options = {\n    homeMobileCountryCode: 310,\n    homeMobileNetworkCode: 410,\n    carrier: 'Vodafone',\n    radioType: geolocator.RadioType.GSM,\n    considerIp: true,\n    addressLookup: false,\n    timezone: false,\n    map: \"my-map\"\n};\ngeolocator.locateByMobile(options, function (err, location) {\n    console.log(err || location);\n});"],"name":"locateByMobile","longname":"geolocator.locateByMobile","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.locateByMobile"},{"comment":"/**\n     * Enumerates Google location types.\n     * @memberof! geolocator\n     *\n     * @enum {String}\n     * @readonly\n     */","meta":{"range":[1217,2292],"filename":"enums.js","lineno":48,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003366","name":"LocationType","type":"ObjectExpression","value":"{\"ROOFTOP\":\"ROOFTOP\",\"RANGE_INTERPOLATED\":\"RANGE_INTERPOLATED\",\"GEOMETRIC_CENTER\":\"GEOMETRIC_CENTER\",\"APPROXIMATE\":\"APPROXIMATE\"}"}},"description":"Enumerates Google location types.","forceMemberof":true,"memberof":"geolocator","kind":"member","isEnum":true,"type":{"names":["String"]},"readonly":true,"name":"LocationType","longname":"geolocator.LocationType","scope":"static","properties":[{"comment":"/**\n         * Indicates that the returned result is approximate.\n         * @type {String}\n         */","meta":{"range":[2260,2286],"filename":"enums.js","lineno":75,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003374","name":"APPROXIMATE","type":"Literal","value":"APPROXIMATE"}},"description":"Indicates that the returned result is approximate.","type":{"names":["String"]},"name":"APPROXIMATE","longname":"geolocator.LocationType.APPROXIMATE","kind":"member","memberof":"geolocator.LocationType","scope":"static","defaultvalue":"APPROXIMATE"},{"comment":"/**\n         * Indicates that the returned result is the geometric center of a\n         * result such as a polyline (for example, a street) or polygon\n         * (region).\n         * @type {String}\n         */","meta":{"range":[2102,2138],"filename":"enums.js","lineno":70,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003372","name":"GEOMETRIC_CENTER","type":"Literal","value":"GEOMETRIC_CENTER"}},"description":"Indicates that the returned result is the geometric center of a\nresult such as a polyline (for example, a street) or polygon\n(region).","type":{"names":["String"]},"name":"GEOMETRIC_CENTER","longname":"geolocator.LocationType.GEOMETRIC_CENTER","kind":"member","memberof":"geolocator.LocationType","scope":"static","defaultvalue":"GEOMETRIC_CENTER"},{"comment":"/**\n         * Indicates that the returned result reflects an approximation\n         * (usually on a road) interpolated between two precise points (such as\n         * intersections). Interpolated results are generally returned when\n         * rooftop geocodes are unavailable for a street address.\n         * @type {String}\n         */","meta":{"range":[1834,1874],"filename":"enums.js","lineno":63,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003370","name":"RANGE_INTERPOLATED","type":"Literal","value":"RANGE_INTERPOLATED"}},"description":"Indicates that the returned result reflects an approximation\n(usually on a road) interpolated between two precise points (such as\nintersections). Interpolated results are generally returned when\nrooftop geocodes are unavailable for a street address.","type":{"names":["String"]},"name":"RANGE_INTERPOLATED","longname":"geolocator.LocationType.RANGE_INTERPOLATED","kind":"member","memberof":"geolocator.LocationType","scope":"static","defaultvalue":"RANGE_INTERPOLATED"},{"comment":"/**\n         * Indicates that the returned result is a precise geocode for which\n         * we have location information accurate down to street address\n         * precision.\n         * @type {String}\n         */","meta":{"range":[1462,1480],"filename":"enums.js","lineno":55,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003368","name":"ROOFTOP","type":"Literal","value":"ROOFTOP"}},"description":"Indicates that the returned result is a precise geocode for which\nwe have location information accurate down to street address\nprecision.","type":{"names":["String"]},"name":"ROOFTOP","longname":"geolocator.LocationType.ROOFTOP","kind":"member","memberof":"geolocator.LocationType","scope":"static","defaultvalue":"ROOFTOP"}],"$longname":"geolocator.LocationType","$members":[{"comment":"/**\n         * Indicates that the returned result is approximate.\n         * @type {String}\n         */","meta":{"range":[2260,2286],"filename":"enums.js","lineno":75,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003374","name":"APPROXIMATE","type":"Literal","value":"APPROXIMATE"}},"description":"Indicates that the returned result is approximate.","type":{"names":["String"]},"name":"APPROXIMATE","longname":"geolocator.LocationType.APPROXIMATE","kind":"member","memberof":"geolocator.LocationType","scope":"static","defaultvalue":"APPROXIMATE","$longname":"geolocator.LocationType.APPROXIMATE"},{"comment":"/**\n         * Indicates that the returned result is the geometric center of a\n         * result such as a polyline (for example, a street) or polygon\n         * (region).\n         * @type {String}\n         */","meta":{"range":[2102,2138],"filename":"enums.js","lineno":70,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003372","name":"GEOMETRIC_CENTER","type":"Literal","value":"GEOMETRIC_CENTER"}},"description":"Indicates that the returned result is the geometric center of a\nresult such as a polyline (for example, a street) or polygon\n(region).","type":{"names":["String"]},"name":"GEOMETRIC_CENTER","longname":"geolocator.LocationType.GEOMETRIC_CENTER","kind":"member","memberof":"geolocator.LocationType","scope":"static","defaultvalue":"GEOMETRIC_CENTER","$longname":"geolocator.LocationType.GEOMETRIC_CENTER"},{"comment":"/**\n         * Indicates that the returned result reflects an approximation\n         * (usually on a road) interpolated between two precise points (such as\n         * intersections). Interpolated results are generally returned when\n         * rooftop geocodes are unavailable for a street address.\n         * @type {String}\n         */","meta":{"range":[1834,1874],"filename":"enums.js","lineno":63,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003370","name":"RANGE_INTERPOLATED","type":"Literal","value":"RANGE_INTERPOLATED"}},"description":"Indicates that the returned result reflects an approximation\n(usually on a road) interpolated between two precise points (such as\nintersections). Interpolated results are generally returned when\nrooftop geocodes are unavailable for a street address.","type":{"names":["String"]},"name":"RANGE_INTERPOLATED","longname":"geolocator.LocationType.RANGE_INTERPOLATED","kind":"member","memberof":"geolocator.LocationType","scope":"static","defaultvalue":"RANGE_INTERPOLATED","$longname":"geolocator.LocationType.RANGE_INTERPOLATED"},{"comment":"/**\n         * Indicates that the returned result is a precise geocode for which\n         * we have location information accurate down to street address\n         * precision.\n         * @type {String}\n         */","meta":{"range":[1462,1480],"filename":"enums.js","lineno":55,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003368","name":"ROOFTOP","type":"Literal","value":"ROOFTOP"}},"description":"Indicates that the returned result is a precise geocode for which\nwe have location information accurate down to street address\nprecision.","type":{"names":["String"]},"name":"ROOFTOP","longname":"geolocator.LocationType.ROOFTOP","kind":"member","memberof":"geolocator.LocationType","scope":"static","defaultvalue":"ROOFTOP","$longname":"geolocator.LocationType.ROOFTOP"}]},{"comment":"/**\n     * Enumerates Google map types.\n     * @memberof! geolocator\n     *\n     * @enum {String}\n     * @readonly\n     */","meta":{"range":[438,1079],"filename":"enums.js","lineno":17,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003356","name":"MapTypeId","type":"ObjectExpression","value":"{\"HYBRID\":\"hybrid\",\"ROADMAP\":\"roadmap\",\"SATELLITE\":\"satellite\",\"TERRAIN\":\"terrain\"}"}},"description":"Enumerates Google map types.","forceMemberof":true,"memberof":"geolocator","kind":"member","isEnum":true,"type":{"names":["String"]},"readonly":true,"name":"MapTypeId","longname":"geolocator.MapTypeId","scope":"static","properties":[{"comment":"/**\n         * Map type that displays a transparent layer of major streets on\n         * satellite images.\n         * @type {String}\n         */","meta":{"range":[612,628],"filename":"enums.js","lineno":23,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003358","name":"HYBRID","type":"Literal","value":"hybrid"}},"description":"Map type that displays a transparent layer of major streets on\nsatellite images.","type":{"names":["String"]},"name":"HYBRID","longname":"geolocator.MapTypeId.HYBRID","kind":"member","memberof":"geolocator.MapTypeId","scope":"static","defaultvalue":"hybrid"},{"comment":"/**\n         * Map type that displays a normal street map.\n         * @type {String}\n         */","meta":{"range":[743,761],"filename":"enums.js","lineno":28,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003360","name":"ROADMAP","type":"Literal","value":"roadmap"}},"description":"Map type that displays a normal street map.","type":{"names":["String"]},"name":"ROADMAP","longname":"geolocator.MapTypeId.ROADMAP","kind":"member","memberof":"geolocator.MapTypeId","scope":"static","defaultvalue":"roadmap"},{"comment":"/**\n         * Map type that displays satellite images.\n         * @type {String}\n         */","meta":{"range":[873,895],"filename":"enums.js","lineno":33,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003362","name":"SATELLITE","type":"Literal","value":"satellite"}},"description":"Map type that displays satellite images.","type":{"names":["String"]},"name":"SATELLITE","longname":"geolocator.MapTypeId.SATELLITE","kind":"member","memberof":"geolocator.MapTypeId","scope":"static","defaultvalue":"satellite"},{"comment":"/**\n         * Map type displays maps with physical features such as terrain and\n         * vegetation.\n         * @type {String}\n         */","meta":{"range":[1055,1073],"filename":"enums.js","lineno":39,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003364","name":"TERRAIN","type":"Literal","value":"terrain"}},"description":"Map type displays maps with physical features such as terrain and\nvegetation.","type":{"names":["String"]},"name":"TERRAIN","longname":"geolocator.MapTypeId.TERRAIN","kind":"member","memberof":"geolocator.MapTypeId","scope":"static","defaultvalue":"terrain"}],"$longname":"geolocator.MapTypeId","$members":[{"comment":"/**\n         * Map type that displays a transparent layer of major streets on\n         * satellite images.\n         * @type {String}\n         */","meta":{"range":[612,628],"filename":"enums.js","lineno":23,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003358","name":"HYBRID","type":"Literal","value":"hybrid"}},"description":"Map type that displays a transparent layer of major streets on\nsatellite images.","type":{"names":["String"]},"name":"HYBRID","longname":"geolocator.MapTypeId.HYBRID","kind":"member","memberof":"geolocator.MapTypeId","scope":"static","defaultvalue":"hybrid","$longname":"geolocator.MapTypeId.HYBRID"},{"comment":"/**\n         * Map type that displays a normal street map.\n         * @type {String}\n         */","meta":{"range":[743,761],"filename":"enums.js","lineno":28,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003360","name":"ROADMAP","type":"Literal","value":"roadmap"}},"description":"Map type that displays a normal street map.","type":{"names":["String"]},"name":"ROADMAP","longname":"geolocator.MapTypeId.ROADMAP","kind":"member","memberof":"geolocator.MapTypeId","scope":"static","defaultvalue":"roadmap","$longname":"geolocator.MapTypeId.ROADMAP"},{"comment":"/**\n         * Map type that displays satellite images.\n         * @type {String}\n         */","meta":{"range":[873,895],"filename":"enums.js","lineno":33,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003362","name":"SATELLITE","type":"Literal","value":"satellite"}},"description":"Map type that displays satellite images.","type":{"names":["String"]},"name":"SATELLITE","longname":"geolocator.MapTypeId.SATELLITE","kind":"member","memberof":"geolocator.MapTypeId","scope":"static","defaultvalue":"satellite","$longname":"geolocator.MapTypeId.SATELLITE"},{"comment":"/**\n         * Map type displays maps with physical features such as terrain and\n         * vegetation.\n         * @type {String}\n         */","meta":{"range":[1055,1073],"filename":"enums.js","lineno":39,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003364","name":"TERRAIN","type":"Literal","value":"terrain"}},"description":"Map type displays maps with physical features such as terrain and\nvegetation.","type":{"names":["String"]},"name":"TERRAIN","longname":"geolocator.MapTypeId.TERRAIN","kind":"member","memberof":"geolocator.MapTypeId","scope":"static","defaultvalue":"terrain","$longname":"geolocator.MapTypeId.TERRAIN"}]},{"comment":"/**\n     * Converts miles to kilometers.\n     *\n     * @param {Number} mi - Miles to be converted.\n     * @returns {Number} - Kilometers.\n     */","meta":{"range":[67793,67848],"filename":"geolocator.js","lineno":1698,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100002624","name":"geolocator.miToKm","type":"MethodDefinition","paramnames":["mi"]},"vars":{"":null}},"description":"Converts miles to kilometers.","params":[{"type":{"names":["Number"]},"description":"Miles to be converted.","name":"mi"}],"returns":[{"type":{"names":["Number"]},"description":"- Kilometers."}],"name":"miToKm","longname":"geolocator.miToKm","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.miToKm"},{"comment":"/**\n     * Enumerates mobile radio types.\n     * @memberof! geolocator\n     *\n     * @enum {String}\n     * @readonly\n     */","meta":{"range":[4496,5068],"filename":"enums.js","lineno":154,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003392","name":"RadioType","type":"ObjectExpression","value":"{\"LTE\":\"lte\",\"GSM\":\"gsm\",\"CDMA\":\"cdma\",\"WCDMA\":\"wcdma\"}"}},"description":"Enumerates mobile radio types.","forceMemberof":true,"memberof":"geolocator","kind":"member","isEnum":true,"type":{"names":["String"]},"readonly":true,"name":"RadioType","longname":"geolocator.RadioType","scope":"static","properties":[{"comment":"/**\n         * CDMA (Code division multiple access) mobile radio access technology.\n         * @type {String}\n         */","meta":{"range":[4919,4931],"filename":"enums.js","lineno":169,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003398","name":"CDMA","type":"Literal","value":"cdma"}},"description":"CDMA (Code division multiple access) mobile radio access technology.","type":{"names":["String"]},"name":"CDMA","longname":"geolocator.RadioType.CDMA","kind":"member","memberof":"geolocator.RadioType","scope":"static","defaultvalue":"cdma"},{"comment":"/**\n         * GSM (Global System for Mobile Communications) mobile radio type.\n         * @type {String}\n         */","meta":{"range":[4769,4779],"filename":"enums.js","lineno":164,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003396","name":"GSM","type":"Literal","value":"gsm"}},"description":"GSM (Global System for Mobile Communications) mobile radio type.","type":{"names":["String"]},"name":"GSM","longname":"geolocator.RadioType.GSM","kind":"member","memberof":"geolocator.RadioType","scope":"static","defaultvalue":"gsm"},{"comment":"/**\n         * LTE (Long-Term Evolution) mobile radio type.\n         * @type {String}\n         */","meta":{"range":[4623,4633],"filename":"enums.js","lineno":159,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003394","name":"LTE","type":"Literal","value":"lte"}},"description":"LTE (Long-Term Evolution) mobile radio type.","type":{"names":["String"]},"name":"LTE","longname":"geolocator.RadioType.LTE","kind":"member","memberof":"geolocator.RadioType","scope":"static","defaultvalue":"lte"},{"comment":"/**\n         * Wideband CDMA mobile radio access technology.\n         * @type {String}\n         */","meta":{"range":[5048,5062],"filename":"enums.js","lineno":174,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003400","name":"WCDMA","type":"Literal","value":"wcdma"}},"description":"Wideband CDMA mobile radio access technology.","type":{"names":["String"]},"name":"WCDMA","longname":"geolocator.RadioType.WCDMA","kind":"member","memberof":"geolocator.RadioType","scope":"static","defaultvalue":"wcdma"}],"$longname":"geolocator.RadioType","$members":[{"comment":"/**\n         * CDMA (Code division multiple access) mobile radio access technology.\n         * @type {String}\n         */","meta":{"range":[4919,4931],"filename":"enums.js","lineno":169,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003398","name":"CDMA","type":"Literal","value":"cdma"}},"description":"CDMA (Code division multiple access) mobile radio access technology.","type":{"names":["String"]},"name":"CDMA","longname":"geolocator.RadioType.CDMA","kind":"member","memberof":"geolocator.RadioType","scope":"static","defaultvalue":"cdma","$longname":"geolocator.RadioType.CDMA"},{"comment":"/**\n         * GSM (Global System for Mobile Communications) mobile radio type.\n         * @type {String}\n         */","meta":{"range":[4769,4779],"filename":"enums.js","lineno":164,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003396","name":"GSM","type":"Literal","value":"gsm"}},"description":"GSM (Global System for Mobile Communications) mobile radio type.","type":{"names":["String"]},"name":"GSM","longname":"geolocator.RadioType.GSM","kind":"member","memberof":"geolocator.RadioType","scope":"static","defaultvalue":"gsm","$longname":"geolocator.RadioType.GSM"},{"comment":"/**\n         * LTE (Long-Term Evolution) mobile radio type.\n         * @type {String}\n         */","meta":{"range":[4623,4633],"filename":"enums.js","lineno":159,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003394","name":"LTE","type":"Literal","value":"lte"}},"description":"LTE (Long-Term Evolution) mobile radio type.","type":{"names":["String"]},"name":"LTE","longname":"geolocator.RadioType.LTE","kind":"member","memberof":"geolocator.RadioType","scope":"static","defaultvalue":"lte","$longname":"geolocator.RadioType.LTE"},{"comment":"/**\n         * Wideband CDMA mobile radio access technology.\n         * @type {String}\n         */","meta":{"range":[5048,5062],"filename":"enums.js","lineno":174,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003400","name":"WCDMA","type":"Literal","value":"wcdma"}},"description":"Wideband CDMA mobile radio access technology.","type":{"names":["String"]},"name":"WCDMA","longname":"geolocator.RadioType.WCDMA","kind":"member","memberof":"geolocator.RadioType","scope":"static","defaultvalue":"wcdma","$longname":"geolocator.RadioType.WCDMA"}]},{"comment":"/**\n     * Converts radians to degrees.\n     *\n     * @param {Number} rad - Radians to be converted.\n     * @returns {Number} - Degrees.\n     */","meta":{"range":[68232,68306],"filename":"geolocator.js","lineno":1718,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100002646","name":"geolocator.radToDeg","type":"MethodDefinition","paramnames":["radians"]},"vars":{"":null}},"description":"Converts radians to degrees.","params":[{"type":{"names":["Number"]},"description":"Radians to be converted.","name":"rad"}],"returns":[{"type":{"names":["Number"]},"description":"- Degrees."}],"name":"radToDeg","longname":"geolocator.radToDeg","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.radToDeg"},{"comment":"/**\n     * Converts the given geographic coordinates into a human-readable address\n     * information.\n     * @see {@link https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding|Google Maps (Reverse) Geocoding API}\n     * @see {@link https://developers.google.com/maps/documentation/geocoding/usage-limits|Usage Limits}\n     * @alias geolocator.addressLookup\n     *\n     * @param {Object|String} options\n     *        Either the `placeId` of the location or Reverse Geocoding options\n     *        with the following properties.\n     *     @param {Number} options.latitude\n     *     Latitude of the target location.\n     *     @param {Number} options.longitude\n     *     Longitude of the target location.\n     *     @param {String} [options.placeId]\n     *            Required if `latitude` and `longitude` are omitted. The place\n     *            ID of the place for which you wish to obtain the\n     *            human-readable address. The place ID is a unique identifier\n     *            that can be used with other Google APIs. Note that if\n     *            `placeId` is set, `latitude` and `longitude` are ignored.\n     *     @param {String|Object} [options.map]\n     *            In order to create a map from the given location coordinates;\n     *            either set this to map options object or; the ID of a DOM\n     *            element or DOM element itself which the map will be created\n     *            within.\n     *     @param {Boolean} [options.raw=false]\n     *            Whether to return the raw Google API result.\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes.\n     *        This takes 2 arguments: `function (err, location) { ... }`\n     *\n     * @returns {void}\n     *\n     * @example\n     * var coords = {\n     *     latitude: 37.4224764,\n     *     longitude: -122.0842499\n     * };\n     *\n     * geolocator.reverseGeocode(coords, function (err, location) {\n     *     console.log(err || location);\n     * });\n     *\n     * @example\n     * // location result:\n     * {\n     *     coords: {\n     *         latitude: 37.4224764,\n     *         longitude: -122.0842499\n     *     },\n     *     address: {\n     *         commonName: \"\",\n     *         street: \"Amphitheatre Pkwy\",\n     *         route: \"Amphitheatre Pkwy\",\n     *         streetNumber: \"1600\",\n     *         neighborhood: \"\",\n     *         town: \"\",\n     *         city: \"Mountain View\",\n     *         region: \"Santa Clara County\",\n     *         state: \"California\",\n     *         stateCode: \"CA\",\n     *         postalCode: \"94043\",\n     *         country: \"United States\",\n     *         countryCode: \"US\"\n     *     },\n     *     formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n     *     type: \"ROOFTOP\",\n     *     placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n     *     flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\n     *     map: {\n     *     \t   element: HTMLElement,\n     *     \t   instance: Object, // google.maps.Map\n     *     \t   marker: Object, // google.maps.Marker\n     *     \t   infoWindow: Object, // google.maps.InfoWindow\n     *     \t   options: Object // map options\n     *     },\n     *     timestamp: 1456795956380\n     * }\n     */","meta":{"range":[50070,51094],"filename":"geolocator.js","lineno":1220,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100001489","name":"geolocator.reverseGeocode","type":"MethodDefinition","paramnames":["options","callback"]},"vars":{"":null}},"description":"Converts the given geographic coordinates into a human-readable address\ninformation.","see":["{@link https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding|Google Maps (Reverse) Geocoding API}","{@link https://developers.google.com/maps/documentation/geocoding/usage-limits|Usage Limits}"],"alias":"geolocator.addressLookup","params":[{"type":{"names":["Object","String"]},"description":"Either the `placeId` of the location or Reverse Geocoding options\n       with the following properties.","name":"options"},{"type":{"names":["Number"]},"description":"Latitude of the target location.","name":"options.latitude"},{"type":{"names":["Number"]},"description":"Longitude of the target location.","name":"options.longitude"},{"type":{"names":["String"]},"optional":true,"description":"Required if `latitude` and `longitude` are omitted. The place\n           ID of the place for which you wish to obtain the\n           human-readable address. The place ID is a unique identifier\n           that can be used with other Google APIs. Note that if\n           `placeId` is set, `latitude` and `longitude` are ignored.","name":"options.placeId"},{"type":{"names":["String","Object"]},"optional":true,"description":"In order to create a map from the given location coordinates;\n           either set this to map options object or; the ID of a DOM\n           element or DOM element itself which the map will be created\n           within.","name":"options.map"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Whether to return the raw Google API result.","name":"options.raw"},{"type":{"names":["function"]},"description":"Callback function to be executed when the request completes.\n       This takes 2 arguments: `function (err, location) { ... }`","name":"callback"}],"returns":[{"type":{"names":["void"]}}],"examples":["var coords = {\n    latitude: 37.4224764,\n    longitude: -122.0842499\n};\n\ngeolocator.reverseGeocode(coords, function (err, location) {\n    console.log(err || location);\n});","// location result:\n{\n    coords: {\n        latitude: 37.4224764,\n        longitude: -122.0842499\n    },\n    address: {\n        commonName: \"\",\n        street: \"Amphitheatre Pkwy\",\n        route: \"Amphitheatre Pkwy\",\n        streetNumber: \"1600\",\n        neighborhood: \"\",\n        town: \"\",\n        city: \"Mountain View\",\n        region: \"Santa Clara County\",\n        state: \"California\",\n        stateCode: \"CA\",\n        postalCode: \"94043\",\n        country: \"United States\",\n        countryCode: \"US\"\n    },\n    formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n    type: \"ROOFTOP\",\n    placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n    flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\n    map: {\n    \t   element: HTMLElement,\n    \t   instance: Object, // google.maps.Map\n    \t   marker: Object, // google.maps.Marker\n    \t   infoWindow: Object, // google.maps.InfoWindow\n    \t   options: Object // map options\n    },\n    timestamp: 1456795956380\n}"],"name":"addressLookup","longname":"geolocator.addressLookup","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.reverseGeocode"},{"comment":"/**\n     * Sets the Geo-IP source to be used for fetching location information\n     * by user's IP; which is internally used by\n     * {@link #geolocator.locateByIP|`geolocator.locateByIP()` method}.\n     *\n     * By default, Geolocator uses Wikimedia as the Geo-IP source provider.\n     * If you want to change this, you can choose from ready-to-use\n     * {@link https://github.com/onury/geolocator/tree/master/src/geo-ip-sources|Geo-IP sources}.\n     *\n     * @param {Object} options\n     *        Geo-IP Source options.\n     *     @param {String} [options.provider]\n     *            Source or service provider's name.\n     *     @param {String} options.url\n     *            Source URL without the callback query parameter. The callback\n     *            name (if supported) should be set via `options.callbackParam`.\n     *            Also, make sure the service supports the protocol you use in\n     *            the URL. If it supports both HTTP and HTTPS, you can omit the\n     *            protocol. In this case, it will be determined via Geolocator\n     *            configuration.\n     *            See {@link #geolocator.config|`geolocator.config()`}.\n     *            NOTE: Do not forget to include your API key in the query\n     *            parameters of the URL, if you have one.\n     *     @param {String} [options.callbackParam]\n     *            If JSON callback is supported, pass the name of the callback\n     *            parameter, defined by the provider.\n     *     @param {Object} [options.globalVar]\n     *            Set this instead of `options.callbackParam` if the service\n     *            does not support JSON callbacks, but weirdly set a global\n     *            variable in the document. For example, if the response is\n     *            `Geo = { lat, lng }`, you should set this to `\"Geo\"`.\n     *     @param {Object} [options.schema]\n     *            Schema object to be used to re-structure the response returned\n     *            from the service. Set the response object's keys as values of\n     *            a custom object to map the format you like. For example; let's\n     *            say you want all responses in the following format:\n     *            `{ latitude, longitude }` and want to omit all other properties\n     *            of the response. If the service returns a response like\n     *            `{ lat: 40.112233, lng: 10.112233, otherProp: 'hello' }`.\n     *            Then you should set the following schema:\n     *            `{ coords: { latitude: 'lat', longitude: 'lng' } }`.\n     *\n     * @return {geolocator}\n     */","meta":{"range":[34906,35593],"filename":"geolocator.js","lineno":882,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100001075","name":"geolocator.setGeoIPSource","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"description":"Sets the Geo-IP source to be used for fetching location information\nby user's IP; which is internally used by\n{@link #geolocator.locateByIP|`geolocator.locateByIP()` method}.\n\nBy default, Geolocator uses Wikimedia as the Geo-IP source provider.\nIf you want to change this, you can choose from ready-to-use\n{@link https://github.com/onury/geolocator/tree/master/src/geo-ip-sources|Geo-IP sources}.","params":[{"type":{"names":["Object"]},"description":"Geo-IP Source options.","name":"options"},{"type":{"names":["String"]},"optional":true,"description":"Source or service provider's name.","name":"options.provider"},{"type":{"names":["String"]},"description":"Source URL without the callback query parameter. The callback\n           name (if supported) should be set via `options.callbackParam`.\n           Also, make sure the service supports the protocol you use in\n           the URL. If it supports both HTTP and HTTPS, you can omit the\n           protocol. In this case, it will be determined via Geolocator\n           configuration.\n           See {@link #geolocator.config|`geolocator.config()`}.\n           NOTE: Do not forget to include your API key in the query\n           parameters of the URL, if you have one.","name":"options.url"},{"type":{"names":["String"]},"optional":true,"description":"If JSON callback is supported, pass the name of the callback\n           parameter, defined by the provider.","name":"options.callbackParam"},{"type":{"names":["Object"]},"optional":true,"description":"Set this instead of `options.callbackParam` if the service\n           does not support JSON callbacks, but weirdly set a global\n           variable in the document. For example, if the response is\n           `Geo = { lat, lng }`, you should set this to `\"Geo\"`.","name":"options.globalVar"},{"type":{"names":["Object"]},"optional":true,"description":"Schema object to be used to re-structure the response returned\n           from the service. Set the response object's keys as values of\n           a custom object to map the format you like. For example; let's\n           say you want all responses in the following format:\n           `{ latitude, longitude }` and want to omit all other properties\n           of the response. If the service returns a response like\n           `{ lat: 40.112233, lng: 10.112233, otherProp: 'hello' }`.\n           Then you should set the following schema:\n           `{ coords: { latitude: 'lat', longitude: 'lng' } }`.","name":"options.schema"}],"returns":[{"type":{"names":["geolocator"]}}],"name":"setGeoIPSource","longname":"geolocator.setGeoIPSource","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.setGeoIPSource"},{"comment":"/**\n     * Enumerates Google travel modes.\n     * @memberof! geolocator\n     *\n     * @enum {String}\n     * @readonly\n     */","meta":{"range":[2428,3659],"filename":"enums.js","lineno":84,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003376","name":"TravelMode","type":"ObjectExpression","value":"{\"DRIVING\":\"DRIVING\",\"WALKING\":\"WALKING\",\"BICYCLING\":\"BICYCLING\",\"TRANSIT\":\"TRANSIT\"}"}},"description":"Enumerates Google travel modes.","forceMemberof":true,"memberof":"geolocator","kind":"member","isEnum":true,"type":{"names":["String"]},"readonly":true,"name":"TravelMode","longname":"geolocator.TravelMode","scope":"static","properties":[{"comment":"/**\n         * Requests distance calculation for bicycling via bicycle paths &\n         * preferred streets (where available).\n         * @type {String}\n         */","meta":{"range":[2961,2983],"filename":"enums.js","lineno":101,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003382","name":"BICYCLING","type":"Literal","value":"BICYCLING"}},"description":"Requests distance calculation for bicycling via bicycle paths &\npreferred streets (where available).","type":{"names":["String"]},"name":"BICYCLING","longname":"geolocator.TravelMode.BICYCLING","kind":"member","memberof":"geolocator.TravelMode","scope":"static","defaultvalue":"BICYCLING"},{"comment":"/**\n         * Indicates distance calculation using the road network.\n         * @type {String}\n         */","meta":{"range":[2566,2584],"filename":"enums.js","lineno":89,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003378","name":"DRIVING","type":"Literal","value":"DRIVING"}},"description":"Indicates distance calculation using the road network.","type":{"names":["String"]},"name":"DRIVING","longname":"geolocator.TravelMode.DRIVING","kind":"member","memberof":"geolocator.TravelMode","scope":"static","defaultvalue":"DRIVING"},{"comment":"/**\n         * Requests distance calculation via public transit routes (where\n         * available). This value may only be specified if the request includes\n         * an API key or a Google Maps APIs Premium Plan client ID. If you set\n         * the mode to transit you can optionally specify either a\n         * `departureTime` or an `arrivalTime`. If neither time is specified,\n         * the `departureTime` defaults to now (that is, the departure time defaults\n         * to the current time). You can also optionally include a `transitMode`\n         * and/or a `transitRoutingPreference`.\n         * @type {String}\n         */","meta":{"range":[3635,3653],"filename":"enums.js","lineno":113,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003384","name":"TRANSIT","type":"Literal","value":"TRANSIT"}},"description":"Requests distance calculation via public transit routes (where\navailable). This value may only be specified if the request includes\nan API key or a Google Maps APIs Premium Plan client ID. If you set\nthe mode to transit you can optionally specify either a\n`departureTime` or an `arrivalTime`. If neither time is specified,\nthe `departureTime` defaults to now (that is, the departure time defaults\nto the current time). You can also optionally include a `transitMode`\nand/or a `transitRoutingPreference`.","type":{"names":["String"]},"name":"TRANSIT","longname":"geolocator.TravelMode.TRANSIT","kind":"member","memberof":"geolocator.TravelMode","scope":"static","defaultvalue":"TRANSIT"},{"comment":"/**\n         * Requests distance calculation for walking via pedestrian paths &\n         * sidewalks (where available).\n         * @type {String}\n         */","meta":{"range":[2760,2778],"filename":"enums.js","lineno":95,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003380","name":"WALKING","type":"Literal","value":"WALKING"}},"description":"Requests distance calculation for walking via pedestrian paths &\nsidewalks (where available).","type":{"names":["String"]},"name":"WALKING","longname":"geolocator.TravelMode.WALKING","kind":"member","memberof":"geolocator.TravelMode","scope":"static","defaultvalue":"WALKING"}],"$longname":"geolocator.TravelMode","$members":[{"comment":"/**\n         * Requests distance calculation for bicycling via bicycle paths &\n         * preferred streets (where available).\n         * @type {String}\n         */","meta":{"range":[2961,2983],"filename":"enums.js","lineno":101,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003382","name":"BICYCLING","type":"Literal","value":"BICYCLING"}},"description":"Requests distance calculation for bicycling via bicycle paths &\npreferred streets (where available).","type":{"names":["String"]},"name":"BICYCLING","longname":"geolocator.TravelMode.BICYCLING","kind":"member","memberof":"geolocator.TravelMode","scope":"static","defaultvalue":"BICYCLING","$longname":"geolocator.TravelMode.BICYCLING"},{"comment":"/**\n         * Indicates distance calculation using the road network.\n         * @type {String}\n         */","meta":{"range":[2566,2584],"filename":"enums.js","lineno":89,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003378","name":"DRIVING","type":"Literal","value":"DRIVING"}},"description":"Indicates distance calculation using the road network.","type":{"names":["String"]},"name":"DRIVING","longname":"geolocator.TravelMode.DRIVING","kind":"member","memberof":"geolocator.TravelMode","scope":"static","defaultvalue":"DRIVING","$longname":"geolocator.TravelMode.DRIVING"},{"comment":"/**\n         * Requests distance calculation via public transit routes (where\n         * available). This value may only be specified if the request includes\n         * an API key or a Google Maps APIs Premium Plan client ID. If you set\n         * the mode to transit you can optionally specify either a\n         * `departureTime` or an `arrivalTime`. If neither time is specified,\n         * the `departureTime` defaults to now (that is, the departure time defaults\n         * to the current time). You can also optionally include a `transitMode`\n         * and/or a `transitRoutingPreference`.\n         * @type {String}\n         */","meta":{"range":[3635,3653],"filename":"enums.js","lineno":113,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003384","name":"TRANSIT","type":"Literal","value":"TRANSIT"}},"description":"Requests distance calculation via public transit routes (where\navailable). This value may only be specified if the request includes\nan API key or a Google Maps APIs Premium Plan client ID. If you set\nthe mode to transit you can optionally specify either a\n`departureTime` or an `arrivalTime`. If neither time is specified,\nthe `departureTime` defaults to now (that is, the departure time defaults\nto the current time). You can also optionally include a `transitMode`\nand/or a `transitRoutingPreference`.","type":{"names":["String"]},"name":"TRANSIT","longname":"geolocator.TravelMode.TRANSIT","kind":"member","memberof":"geolocator.TravelMode","scope":"static","defaultvalue":"TRANSIT","$longname":"geolocator.TravelMode.TRANSIT"},{"comment":"/**\n         * Requests distance calculation for walking via pedestrian paths &\n         * sidewalks (where available).\n         * @type {String}\n         */","meta":{"range":[2760,2778],"filename":"enums.js","lineno":95,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003380","name":"WALKING","type":"Literal","value":"WALKING"}},"description":"Requests distance calculation for walking via pedestrian paths &\nsidewalks (where available).","type":{"names":["String"]},"name":"WALKING","longname":"geolocator.TravelMode.WALKING","kind":"member","memberof":"geolocator.TravelMode","scope":"static","defaultvalue":"WALKING","$longname":"geolocator.TravelMode.WALKING"}]},{"comment":"/**\n     * Enumerates Google unit systems.\n     * @memberof! geolocator\n     *\n     * @enum {Number}\n     * @readonly\n     */","meta":{"range":[4108,4361],"filename":"enums.js","lineno":135,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003386","name":"UnitSystem","type":"ObjectExpression","value":"{\"METRIC\":0,\"IMPERIAL\":1}"}},"description":"Enumerates Google unit systems.","forceMemberof":true,"memberof":"geolocator","kind":"member","isEnum":true,"type":{"names":["Number"]},"readonly":true,"name":"UnitSystem","longname":"geolocator.UnitSystem","scope":"static","properties":[{"comment":"/**\n         * Distances defined in miles and feet.\n         * @type {Number}\n         */","meta":{"range":[4344,4355],"filename":"enums.js","lineno":145,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003390","name":"IMPERIAL","type":"Literal","value":1}},"description":"Distances defined in miles and feet.","type":{"names":["Number"]},"name":"IMPERIAL","longname":"geolocator.UnitSystem.IMPERIAL","kind":"member","memberof":"geolocator.UnitSystem","scope":"static","defaultvalue":1},{"comment":"/**\n         * Distances in kilometers and meters.\n         * @type {Number}\n         */","meta":{"range":[4227,4236],"filename":"enums.js","lineno":140,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003388","name":"METRIC","type":"Literal","value":0}},"description":"Distances in kilometers and meters.","type":{"names":["Number"]},"name":"METRIC","longname":"geolocator.UnitSystem.METRIC","kind":"member","memberof":"geolocator.UnitSystem","scope":"static","defaultvalue":0}],"$longname":"geolocator.UnitSystem","$members":[{"comment":"/**\n         * Distances defined in miles and feet.\n         * @type {Number}\n         */","meta":{"range":[4344,4355],"filename":"enums.js","lineno":145,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003390","name":"IMPERIAL","type":"Literal","value":1}},"description":"Distances defined in miles and feet.","type":{"names":["Number"]},"name":"IMPERIAL","longname":"geolocator.UnitSystem.IMPERIAL","kind":"member","memberof":"geolocator.UnitSystem","scope":"static","defaultvalue":1,"$longname":"geolocator.UnitSystem.IMPERIAL"},{"comment":"/**\n         * Distances in kilometers and meters.\n         * @type {Number}\n         */","meta":{"range":[4227,4236],"filename":"enums.js","lineno":140,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100003388","name":"METRIC","type":"Literal","value":0}},"description":"Distances in kilometers and meters.","type":{"names":["Number"]},"name":"METRIC","longname":"geolocator.UnitSystem.METRIC","kind":"member","memberof":"geolocator.UnitSystem","scope":"static","defaultvalue":0,"$longname":"geolocator.UnitSystem.METRIC"}]},{"comment":"/**\n     * Registers a handler for watching the user's location via HTML5\n     * geolocation; that is triggered each time the position of the device\n     * changes. This may require/prompt for user's permission.\n     *\n     * @param {Object} [options]\n     *        HTML5 geo-location settings.\n     *     @param {Boolean} [options.enableHighAccuracy=true]\n     *            Specifies whether the device should provide the most accurate\n     *            position it can. Note that setting this to `true` might consume\n     *            more CPU and/or battery power; and result in slower response\n     *            times.\n     *     @param {Number} [options.timeout=6000]\n     *            HTML5 position timeout setting in milliseconds. Setting this\n     *            to `Infinity` means that Geolocator won't return until the\n     *            position is available.\n     *     @param {Number} [options.maximumAge=0]\n     *            HTML5 position maximum age. Indicates the maximum age in\n     *            milliseconds of a possible cached position that is acceptable\n     *            to return. `0` means, the device cannot use a cached position\n     *            and must attempt to retrieve the real current position. If set\n     *            to `Infinity` the device must return a cached position\n     *            regardless of its age.\n     *     @param {Object} [options.target]\n     *            Object that defines the target location and settings; that\n     *            when the location is reached, the watcher will auto-clear\n     *            itself and invoke the callback.\n     *     @param {Number} options.target.latitude\n     *            The `latitude` of the target location.\n     *     @param {Number} options.target.longitude\n     *            The `longitude` of the target location.\n     *     @param {Number} [options.target.radius=0.5]\n     *            The radius, in other words; the minimum distance (in\n     *            kilometers or miles) to the target point that should be\n     *            reached.\n     *     @param {Number} [options.target.unitSystem=0]\n     *            Unit system to be used for target radius.\n     *            See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}\n     *            for possible values.\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes.\n     *        This takes 2 arguments: `function (err, position) { ... }`.\n     *        If `options.target` is set, the `position` argument will also\n     *        include a `targetReached:Boolean` property.\n     *\n     * @returns {Object} - A watcher object that provides a\n     * `.clear(delay:Number, callback:Function)` method to clear the watcher\n     * when needed. Optional `delay` argument can be set (in milliseconds) to\n     * clear in a later time. Omitting this argument will clear the watcher\n     * immediately. You should always call this method, except if you've set up\n     * a target; which will auto-clear the watcher when reached.\n     *\n     * @example\n     * // Watch my position for 5 minutes.\n     * var options = { enableHighAccuracy: true, timeout: 6000, maximumAge: 0 };\n     * var watcher = geolocator.watch(options, function (err, location) {\n     *     console.log(err || location);\n     * });\n     * console.log(watcher.id); // ID of the watcher\n     * watcher.clear(300000); // clear after 5 minutes.\n     *\n     * @example\n     * // Watch my position until I'm 350 meters near Disneyland Park.\n     * options.target = {\n     *     latitude: 33.8120918,\n     *     longitude: -117.9233569,\n     *     radius: 0.35,\n     *     unitSystem: geolocator.UnitSystem.METRIC\n     * };\n     * watcher = geolocator.watch(options, function (err, location) {\n     *     if (location.targetReached) {\n     *         console.log(watcher.id); // null — watcher is cleared.\n     *         console.log(watcher.cycle); // 15 — target reached after 15 cycles\n     *     } else {\n     *         console.log(watcher.id); // 2 — watcher is active.\n     *     }\n     * });\n     */","meta":{"range":[39689,41782],"filename":"geolocator.js","lineno":973,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100001128","name":"geolocator.watch","type":"MethodDefinition","paramnames":["options","callback"]},"vars":{"":null}},"description":"Registers a handler for watching the user's location via HTML5\ngeolocation; that is triggered each time the position of the device\nchanges. This may require/prompt for user's permission.","params":[{"type":{"names":["Object"]},"optional":true,"description":"HTML5 geo-location settings.","name":"options"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Specifies whether the device should provide the most accurate\n           position it can. Note that setting this to `true` might consume\n           more CPU and/or battery power; and result in slower response\n           times.","name":"options.enableHighAccuracy"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":6000,"description":"HTML5 position timeout setting in milliseconds. Setting this\n           to `Infinity` means that Geolocator won't return until the\n           position is available.","name":"options.timeout"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":0,"description":"HTML5 position maximum age. Indicates the maximum age in\n           milliseconds of a possible cached position that is acceptable\n           to return. `0` means, the device cannot use a cached position\n           and must attempt to retrieve the real current position. If set\n           to `Infinity` the device must return a cached position\n           regardless of its age.","name":"options.maximumAge"},{"type":{"names":["Object"]},"optional":true,"description":"Object that defines the target location and settings; that\n           when the location is reached, the watcher will auto-clear\n           itself and invoke the callback.","name":"options.target"},{"type":{"names":["Number"]},"description":"The `latitude` of the target location.","name":"options.target.latitude"},{"type":{"names":["Number"]},"description":"The `longitude` of the target location.","name":"options.target.longitude"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":0.5,"description":"The radius, in other words; the minimum distance (in\n           kilometers or miles) to the target point that should be\n           reached.","name":"options.target.radius"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":0,"description":"Unit system to be used for target radius.\n           See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}\n           for possible values.","name":"options.target.unitSystem"},{"type":{"names":["function"]},"description":"Callback function to be executed when the request completes.\n       This takes 2 arguments: `function (err, position) { ... }`.\n       If `options.target` is set, the `position` argument will also\n       include a `targetReached:Boolean` property.","name":"callback"}],"returns":[{"type":{"names":["Object"]},"description":"- A watcher object that provides a\n`.clear(delay:Number, callback:Function)` method to clear the watcher\nwhen needed. Optional `delay` argument can be set (in milliseconds) to\nclear in a later time. Omitting this argument will clear the watcher\nimmediately. You should always call this method, except if you've set up\na target; which will auto-clear the watcher when reached."}],"examples":["// Watch my position for 5 minutes.\nvar options = { enableHighAccuracy: true, timeout: 6000, maximumAge: 0 };\nvar watcher = geolocator.watch(options, function (err, location) {\n    console.log(err || location);\n});\nconsole.log(watcher.id); // ID of the watcher\nwatcher.clear(300000); // clear after 5 minutes.","// Watch my position until I'm 350 meters near Disneyland Park.\noptions.target = {\n    latitude: 33.8120918,\n    longitude: -117.9233569,\n    radius: 0.35,\n    unitSystem: geolocator.UnitSystem.METRIC\n};\nwatcher = geolocator.watch(options, function (err, location) {\n    if (location.targetReached) {\n        console.log(watcher.id); // null — watcher is cleared.\n        console.log(watcher.cycle); // 15 — target reached after 15 cycles\n    } else {\n        console.log(watcher.id); // 2 — watcher is active.\n    }\n});"],"name":"watch","longname":"geolocator.watch","kind":"function","memberof":"geolocator","scope":"static","$longname":"geolocator.watch"}]}],"symbols":["geolocator","geolocator.calcDistance","geolocator.config","geolocator.createMap","geolocator.decToDegMinSec","geolocator.degToRad","geolocator.DistanceFormula","geolocator.ensureGoogleLoaded","geolocator.Error","geolocator.geocode","geolocator.getDistanceMatrix","geolocator.getIP","geolocator.getTimeZone","geolocator.isGeoError","geolocator.isGeolocationSupported","geolocator.isGoogleLoaded","geolocator.isPositionError","geolocator.kmToMi","geolocator.locate","geolocator.locateByIP","geolocator.locateByMobile","geolocator.LocationType","geolocator.MapTypeId","geolocator.miToKm","geolocator.RadioType","geolocator.radToDeg","geolocator.reverseGeocode","geolocator.setGeoIPSource","geolocator.TravelMode","geolocator.UnitSystem","geolocator.watch"]},"geolocator-error":{"documentation":[{"comment":"/**\n * Geolocator Error class that provides a common type of error object for the\n * various APIs implemented in Geolocator. All callbacks of Geolocator will\n * include an instance of this object as the first argument; if the\n * corresponding operation fails. Also all thrown errors will be an instance of\n * this object.\n *\n * This object can be publicly accessed via `geolocator.Error`.\n *\n * @extends Error\n */","meta":{"range":[483,9288],"filename":"geo.error.js","lineno":16,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000005","name":"GeoError","type":"ClassDeclaration","paramnames":["code","message"]}},"classdesc":"Geolocator Error class that provides a common type of error object for the\nvarious APIs implemented in Geolocator. All callbacks of Geolocator will\ninclude an instance of this object as the first argument; if the\ncorresponding operation fails. Also all thrown errors will be an instance of\nthis object.\n\nThis object can be publicly accessed via `geolocator.Error`.","augments":["Error"],"name":"GeoError","longname":"GeoError","kind":"class","scope":"global","description":"Costructs a new instance of `GeoError`.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"\"UNKNOWN_ERROR\"","description":"Any valid Geolocator Error code.\n       See {@link #GeoError.Code|`GeoError.Code` enumeration} for\n       possible values.","name":"code"},{"type":{"names":["String"]},"optional":true,"description":"Error message. If omitted, this will be set to `code`.","name":"message"}],"$longname":"GeoError","$members":[{"comment":"/**\n *  Enumerates Geolocator error codes.\n *  This enumeration combines Google API status (error) codes, HTML5 Geolocation\n *  position error codes and other Geolocator-specific error codes.\n *  @enum {String}\n */","meta":{"range":[10319,14481],"filename":"geo.error.js","lineno":300,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000607","name":"GeoError.Code","type":"ObjectExpression","value":"{\"GEOLOCATION_NOT_SUPPORTED\":\"GEOLOCATION_NOT_SUPPORTED\",\"INVALID_GEO_IP_SOURCE\":\"INVALID_GEO_IP_SOURCE\",\"PERMISSION_DENIED\":\"PERMISSION_DENIED\",\"POSITION_UNAVAILABLE\":\"POSITION_UNAVAILABLE\",\"TIMEOUT\":\"TIMEOUT\",\"INVALID_PARAMETERS\":\"INVALID_PARAMETERS\",\"INVALID_RESPONSE\":\"INVALID_RESPONSE\",\"INVALID_REQUEST\":\"INVALID_REQUEST\",\"REQUEST_DENIED\":\"REQUEST_DENIED\",\"GOOGLE_API_FAILED\":\"GOOGLE_API_FAILED\",\"OVER_QUERY_LIMIT\":\"OVER_QUERY_LIMIT\",\"USER_RATE_LIMIT_EXCEEDED\":\"USER_RATE_LIMIT_EXCEEDED\",\"DAILY_LIMIT_EXCEEDED\":\"DAILY_LIMIT_EXCEEDED\",\"GOOGLE_KEY_INVALID\":\"GOOGLE_KEY_INVALID\",\"MAX_ELEMENTS_EXCEEDED\":\"MAX_ELEMENTS_EXCEEDED\",\"MAX_DIMENSIONS_EXCEEDED\":\"MAX_DIMENSIONS_EXCEEDED\",\"MAX_WAYPOINTS_EXCEEDED\":\"MAX_WAYPOINTS_EXCEEDED\",\"PARSE_ERROR\":\"PARSE_ERROR\",\"NOT_FOUND\":\"NOT_FOUND\",\"INTERNAL_ERROR\":\"INTERNAL_ERROR\",\"UNKNOWN_ERROR\":\"UNKNOWN_ERROR\"}","paramnames":[]}},"description":"Enumerates Geolocator error codes.\n This enumeration combines Google API status (error) codes, HTML5 Geolocation\n position error codes and other Geolocator-specific error codes.","kind":"member","isEnum":true,"type":{"names":["String"]},"name":"Code","longname":"GeoError.Code","memberof":"GeoError","scope":"static","properties":[{"comment":"/**\n     * Indicates that you've exceeded your daily limit for Google API(s).\n     * @type {String}\n     */","meta":{"range":[12864,12908],"filename":"geo.error.js","lineno":375,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000636","name":"DAILY_LIMIT_EXCEEDED","type":"Literal","value":"DAILY_LIMIT_EXCEEDED"}},"description":"Indicates that you've exceeded your daily limit for Google API(s).","type":{"names":["String"]},"name":"DAILY_LIMIT_EXCEEDED","longname":"GeoError.Code.DAILY_LIMIT_EXCEEDED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"DAILY_LIMIT_EXCEEDED"},{"comment":"/**\n     *  Indicates that HTML5 Geolocation API is not supported by the browser.\n     *  @type {String}\n     */","meta":{"range":[10458,10512],"filename":"geo.error.js","lineno":305,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000612","name":"GEOLOCATION_NOT_SUPPORTED","type":"Literal","value":"GEOLOCATION_NOT_SUPPORTED"}},"description":"Indicates that HTML5 Geolocation API is not supported by the browser.","type":{"names":["String"]},"name":"GEOLOCATION_NOT_SUPPORTED","longname":"GeoError.Code.GEOLOCATION_NOT_SUPPORTED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"GEOLOCATION_NOT_SUPPORTED"},{"comment":"/**\n     * Indicates that Google API could not be loaded.\n     * @type {String}\n     */","meta":{"range":[12159,12197],"filename":"geo.error.js","lineno":357,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000630","name":"GOOGLE_API_FAILED","type":"Literal","value":"GOOGLE_API_FAILED"}},"description":"Indicates that Google API could not be loaded.","type":{"names":["String"]},"name":"GOOGLE_API_FAILED","longname":"GeoError.Code.GOOGLE_API_FAILED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"GOOGLE_API_FAILED"},{"comment":"/**\n     * Indicates that your Google API key is not valid. Please ensure that you've\n     * included the entire key, and that you've either purchased the API or have\n     * enabled billing and activated the API to obtain the free quota.\n     * @type {String}\n     */","meta":{"range":[13186,13226],"filename":"geo.error.js","lineno":382,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000638","name":"GOOGLE_KEY_INVALID","type":"Literal","value":"GOOGLE_KEY_INVALID"}},"description":"Indicates that your Google API key is not valid. Please ensure that you've\nincluded the entire key, and that you've either purchased the API or have\nenabled billing and activated the API to obtain the free quota.","type":{"names":["String"]},"name":"GOOGLE_KEY_INVALID","longname":"GeoError.Code.GOOGLE_KEY_INVALID","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"GOOGLE_KEY_INVALID"},{"comment":"/**\n     * Indicates that an internal error (such as XHR cross-domain, etc) has occured.\n     * @type {String}\n     */","meta":{"range":[14321,14353],"filename":"geo.error.js","lineno":416,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000650","name":"INTERNAL_ERROR","type":"Literal","value":"INTERNAL_ERROR"}},"description":"Indicates that an internal error (such as XHR cross-domain, etc) has occured.","type":{"names":["String"]},"name":"INTERNAL_ERROR","longname":"GeoError.Code.INTERNAL_ERROR","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"INTERNAL_ERROR"},{"comment":"/**\n     *  Indicates that Geolocation-IP source is not set or invalid.\n     *  @type {String}\n     */","meta":{"range":[10625,10671],"filename":"geo.error.js","lineno":310,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000614","name":"INVALID_GEO_IP_SOURCE","type":"Literal","value":"INVALID_GEO_IP_SOURCE"}},"description":"Indicates that Geolocation-IP source is not set or invalid.","type":{"names":["String"]},"name":"INVALID_GEO_IP_SOURCE","longname":"GeoError.Code.INVALID_GEO_IP_SOURCE","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"INVALID_GEO_IP_SOURCE"},{"comment":"/**\n     * Indicates that the request had one or more invalid parameters.\n     * @type {String}\n     */","meta":{"range":[11444,11484],"filename":"geo.error.js","lineno":334,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000622","name":"INVALID_PARAMETERS","type":"Literal","value":"INVALID_PARAMETERS"}},"description":"Indicates that the request had one or more invalid parameters.","type":{"names":["String"]},"name":"INVALID_PARAMETERS","longname":"GeoError.Code.INVALID_PARAMETERS","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"INVALID_PARAMETERS"},{"comment":"/**\n     * Generally indicates that the query (address, components or latlng)\n     * is missing.\n     * @type {String}\n     */","meta":{"range":[11762,11796],"filename":"geo.error.js","lineno":345,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000626","name":"INVALID_REQUEST","type":"Literal","value":"INVALID_REQUEST"}},"description":"Generally indicates that the query (address, components or latlng)\nis missing.","type":{"names":["String"]},"name":"INVALID_REQUEST","longname":"GeoError.Code.INVALID_REQUEST","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"INVALID_REQUEST"},{"comment":"/**\n     * Indicates that the service returned invalid response.\n     * @type {String}\n     */","meta":{"range":[11589,11625],"filename":"geo.error.js","lineno":339,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000624","name":"INVALID_RESPONSE","type":"Literal","value":"INVALID_RESPONSE"}},"description":"Indicates that the service returned invalid response.","type":{"names":["String"]},"name":"INVALID_RESPONSE","longname":"GeoError.Code.INVALID_RESPONSE","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"INVALID_RESPONSE"},{"comment":"/**\n     * Indicates that the request contained more than 25 origins,\n     * or more than 25 destinations.\n     * @type {String}\n     */","meta":{"range":[13668,13718],"filename":"geo.error.js","lineno":395,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000642","name":"MAX_DIMENSIONS_EXCEEDED","type":"Literal","value":"MAX_DIMENSIONS_EXCEEDED"}},"description":"Indicates that the request contained more than 25 origins,\nor more than 25 destinations.","type":{"names":["String"]},"name":"MAX_DIMENSIONS_EXCEEDED","longname":"GeoError.Code.MAX_DIMENSIONS_EXCEEDED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"MAX_DIMENSIONS_EXCEEDED"},{"comment":"/**\n     * Indicates that maximum number of elements limit is exceeded. For\n     * example, for the Distance Matrix API; occurs when the product of\n     * origins and destinations exceeds the per-query limit.\n     * @type {String}\n     */","meta":{"range":[13475,13521],"filename":"geo.error.js","lineno":389,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000640","name":"MAX_ELEMENTS_EXCEEDED","type":"Literal","value":"MAX_ELEMENTS_EXCEEDED"}},"description":"Indicates that maximum number of elements limit is exceeded. For\nexample, for the Distance Matrix API; occurs when the product of\norigins and destinations exceeds the per-query limit.","type":{"names":["String"]},"name":"MAX_ELEMENTS_EXCEEDED","longname":"GeoError.Code.MAX_ELEMENTS_EXCEEDED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"MAX_ELEMENTS_EXCEEDED"},{"comment":"/**\n     * Indicates that the request contained more than allowed waypoints.\n     * @type {String}\n     */","meta":{"range":[13835,13883],"filename":"geo.error.js","lineno":400,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000644","name":"MAX_WAYPOINTS_EXCEEDED","type":"Literal","value":"MAX_WAYPOINTS_EXCEEDED"}},"description":"Indicates that the request contained more than allowed waypoints.","type":{"names":["String"]},"name":"MAX_WAYPOINTS_EXCEEDED","longname":"GeoError.Code.MAX_WAYPOINTS_EXCEEDED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"MAX_WAYPOINTS_EXCEEDED"},{"comment":"/**\n     * Indicates that the requested resource could not be found.\n     * Note that this also covers `ZERO_RESULTS`.\n     * @type {String}\n     */","meta":{"range":[14170,14192],"filename":"geo.error.js","lineno":411,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000648","name":"NOT_FOUND","type":"Literal","value":"NOT_FOUND"}},"description":"Indicates that the requested resource could not be found.\nNote that this also covers `ZERO_RESULTS`.","type":{"names":["String"]},"name":"NOT_FOUND","longname":"GeoError.Code.NOT_FOUND","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"NOT_FOUND"},{"comment":"/**\n     * Indicates that you are over your Google API quota.\n     * @type {String}\n     */","meta":{"range":[12299,12335],"filename":"geo.error.js","lineno":362,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000632","name":"OVER_QUERY_LIMIT","type":"Literal","value":"OVER_QUERY_LIMIT"}},"description":"Indicates that you are over your Google API quota.","type":{"names":["String"]},"name":"OVER_QUERY_LIMIT","longname":"GeoError.Code.OVER_QUERY_LIMIT","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"OVER_QUERY_LIMIT"},{"comment":"/**\n     * Indicates that the request body is not valid JSON.\n     * @type {String}\n     */","meta":{"range":[13985,14011],"filename":"geo.error.js","lineno":405,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000646","name":"PARSE_ERROR","type":"Literal","value":"PARSE_ERROR"}},"description":"Indicates that the request body is not valid JSON.","type":{"names":["String"]},"name":"PARSE_ERROR","longname":"GeoError.Code.PARSE_ERROR","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"PARSE_ERROR"},{"comment":"/**\n     *  The acquisition of the geolocation information failed because the\n     *  page didn't have the permission to do it.\n     *  @type {String}\n     */","meta":{"range":[10840,10878],"filename":"geo.error.js","lineno":316,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000616","name":"PERMISSION_DENIED","type":"Literal","value":"PERMISSION_DENIED"}},"description":"The acquisition of the geolocation information failed because the\n page didn't have the permission to do it.","type":{"names":["String"]},"name":"PERMISSION_DENIED","longname":"GeoError.Code.PERMISSION_DENIED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"PERMISSION_DENIED"},{"comment":"/**\n     *  The acquisition of the geolocation failed because at least one\n     *  internal source of position returned an internal error.\n     *  @type {String}\n     */","meta":{"range":[11058,11102],"filename":"geo.error.js","lineno":322,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000618","name":"POSITION_UNAVAILABLE","type":"Literal","value":"POSITION_UNAVAILABLE"}},"description":"The acquisition of the geolocation failed because at least one\n internal source of position returned an internal error.","type":{"names":["String"]},"name":"POSITION_UNAVAILABLE","longname":"GeoError.Code.POSITION_UNAVAILABLE","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"POSITION_UNAVAILABLE"},{"comment":"/**\n     * Indicates that the request was denied by the service.\n     * This will generally occur because of a missing API key or because the request\n     * is sent over HTTP instead of HTTPS.\n     * @type {String}\n     */","meta":{"range":[12029,12061],"filename":"geo.error.js","lineno":352,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000628","name":"REQUEST_DENIED","type":"Literal","value":"REQUEST_DENIED"}},"description":"Indicates that the request was denied by the service.\nThis will generally occur because of a missing API key or because the request\nis sent over HTTP instead of HTTPS.","type":{"names":["String"]},"name":"REQUEST_DENIED","longname":"GeoError.Code.REQUEST_DENIED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"REQUEST_DENIED"},{"comment":"/**\n     *  The time allowed to acquire the geolocation, defined by\n     *  PositionOptions.timeout information was reached before\n     *  the information was obtained.\n     *  @type {String}\n     */","meta":{"range":[11312,11330],"filename":"geo.error.js","lineno":329,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000620","name":"TIMEOUT","type":"Literal","value":"TIMEOUT"}},"description":"The time allowed to acquire the geolocation, defined by\n PositionOptions.timeout information was reached before\n the information was obtained.","type":{"names":["String"]},"name":"TIMEOUT","longname":"GeoError.Code.TIMEOUT","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"TIMEOUT"},{"comment":"/**\n     * Indicates that an unknown error has occured.\n     * @type {String}\n     */","meta":{"range":[14449,14479],"filename":"geo.error.js","lineno":421,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000652","name":"UNKNOWN_ERROR","type":"Literal","value":"UNKNOWN_ERROR"}},"description":"Indicates that an unknown error has occured.","type":{"names":["String"]},"name":"UNKNOWN_ERROR","longname":"GeoError.Code.UNKNOWN_ERROR","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"UNKNOWN_ERROR"},{"comment":"/**\n     * Indicates that you've exceeded the requests per second per user limit that\n     * you configured in the Google Developers Console. This limit should be\n     * configured to prevent a single or small group of users from exhausting your\n     * daily quota, while still allowing reasonable access to all users.\n     * @type {String}\n     */","meta":{"range":[12694,12746],"filename":"geo.error.js","lineno":370,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000634","name":"USER_RATE_LIMIT_EXCEEDED","type":"Literal","value":"USER_RATE_LIMIT_EXCEEDED"}},"description":"Indicates that you've exceeded the requests per second per user limit that\nyou configured in the Google Developers Console. This limit should be\nconfigured to prevent a single or small group of users from exhausting your\ndaily quota, while still allowing reasonable access to all users.","type":{"names":["String"]},"name":"USER_RATE_LIMIT_EXCEEDED","longname":"GeoError.Code.USER_RATE_LIMIT_EXCEEDED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"USER_RATE_LIMIT_EXCEEDED"}],"$longname":"GeoError.Code","$members":[{"comment":"/**\n     * Indicates that you've exceeded your daily limit for Google API(s).\n     * @type {String}\n     */","meta":{"range":[12864,12908],"filename":"geo.error.js","lineno":375,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000636","name":"DAILY_LIMIT_EXCEEDED","type":"Literal","value":"DAILY_LIMIT_EXCEEDED"}},"description":"Indicates that you've exceeded your daily limit for Google API(s).","type":{"names":["String"]},"name":"DAILY_LIMIT_EXCEEDED","longname":"GeoError.Code.DAILY_LIMIT_EXCEEDED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"DAILY_LIMIT_EXCEEDED","$longname":"GeoError.Code.DAILY_LIMIT_EXCEEDED"},{"comment":"/**\n     *  Indicates that HTML5 Geolocation API is not supported by the browser.\n     *  @type {String}\n     */","meta":{"range":[10458,10512],"filename":"geo.error.js","lineno":305,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000612","name":"GEOLOCATION_NOT_SUPPORTED","type":"Literal","value":"GEOLOCATION_NOT_SUPPORTED"}},"description":"Indicates that HTML5 Geolocation API is not supported by the browser.","type":{"names":["String"]},"name":"GEOLOCATION_NOT_SUPPORTED","longname":"GeoError.Code.GEOLOCATION_NOT_SUPPORTED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"GEOLOCATION_NOT_SUPPORTED","$longname":"GeoError.Code.GEOLOCATION_NOT_SUPPORTED"},{"comment":"/**\n     * Indicates that Google API could not be loaded.\n     * @type {String}\n     */","meta":{"range":[12159,12197],"filename":"geo.error.js","lineno":357,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000630","name":"GOOGLE_API_FAILED","type":"Literal","value":"GOOGLE_API_FAILED"}},"description":"Indicates that Google API could not be loaded.","type":{"names":["String"]},"name":"GOOGLE_API_FAILED","longname":"GeoError.Code.GOOGLE_API_FAILED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"GOOGLE_API_FAILED","$longname":"GeoError.Code.GOOGLE_API_FAILED"},{"comment":"/**\n     * Indicates that your Google API key is not valid. Please ensure that you've\n     * included the entire key, and that you've either purchased the API or have\n     * enabled billing and activated the API to obtain the free quota.\n     * @type {String}\n     */","meta":{"range":[13186,13226],"filename":"geo.error.js","lineno":382,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000638","name":"GOOGLE_KEY_INVALID","type":"Literal","value":"GOOGLE_KEY_INVALID"}},"description":"Indicates that your Google API key is not valid. Please ensure that you've\nincluded the entire key, and that you've either purchased the API or have\nenabled billing and activated the API to obtain the free quota.","type":{"names":["String"]},"name":"GOOGLE_KEY_INVALID","longname":"GeoError.Code.GOOGLE_KEY_INVALID","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"GOOGLE_KEY_INVALID","$longname":"GeoError.Code.GOOGLE_KEY_INVALID"},{"comment":"/**\n     * Indicates that an internal error (such as XHR cross-domain, etc) has occured.\n     * @type {String}\n     */","meta":{"range":[14321,14353],"filename":"geo.error.js","lineno":416,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000650","name":"INTERNAL_ERROR","type":"Literal","value":"INTERNAL_ERROR"}},"description":"Indicates that an internal error (such as XHR cross-domain, etc) has occured.","type":{"names":["String"]},"name":"INTERNAL_ERROR","longname":"GeoError.Code.INTERNAL_ERROR","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"INTERNAL_ERROR","$longname":"GeoError.Code.INTERNAL_ERROR"},{"comment":"/**\n     *  Indicates that Geolocation-IP source is not set or invalid.\n     *  @type {String}\n     */","meta":{"range":[10625,10671],"filename":"geo.error.js","lineno":310,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000614","name":"INVALID_GEO_IP_SOURCE","type":"Literal","value":"INVALID_GEO_IP_SOURCE"}},"description":"Indicates that Geolocation-IP source is not set or invalid.","type":{"names":["String"]},"name":"INVALID_GEO_IP_SOURCE","longname":"GeoError.Code.INVALID_GEO_IP_SOURCE","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"INVALID_GEO_IP_SOURCE","$longname":"GeoError.Code.INVALID_GEO_IP_SOURCE"},{"comment":"/**\n     * Indicates that the request had one or more invalid parameters.\n     * @type {String}\n     */","meta":{"range":[11444,11484],"filename":"geo.error.js","lineno":334,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000622","name":"INVALID_PARAMETERS","type":"Literal","value":"INVALID_PARAMETERS"}},"description":"Indicates that the request had one or more invalid parameters.","type":{"names":["String"]},"name":"INVALID_PARAMETERS","longname":"GeoError.Code.INVALID_PARAMETERS","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"INVALID_PARAMETERS","$longname":"GeoError.Code.INVALID_PARAMETERS"},{"comment":"/**\n     * Generally indicates that the query (address, components or latlng)\n     * is missing.\n     * @type {String}\n     */","meta":{"range":[11762,11796],"filename":"geo.error.js","lineno":345,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000626","name":"INVALID_REQUEST","type":"Literal","value":"INVALID_REQUEST"}},"description":"Generally indicates that the query (address, components or latlng)\nis missing.","type":{"names":["String"]},"name":"INVALID_REQUEST","longname":"GeoError.Code.INVALID_REQUEST","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"INVALID_REQUEST","$longname":"GeoError.Code.INVALID_REQUEST"},{"comment":"/**\n     * Indicates that the service returned invalid response.\n     * @type {String}\n     */","meta":{"range":[11589,11625],"filename":"geo.error.js","lineno":339,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000624","name":"INVALID_RESPONSE","type":"Literal","value":"INVALID_RESPONSE"}},"description":"Indicates that the service returned invalid response.","type":{"names":["String"]},"name":"INVALID_RESPONSE","longname":"GeoError.Code.INVALID_RESPONSE","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"INVALID_RESPONSE","$longname":"GeoError.Code.INVALID_RESPONSE"},{"comment":"/**\n     * Indicates that the request contained more than 25 origins,\n     * or more than 25 destinations.\n     * @type {String}\n     */","meta":{"range":[13668,13718],"filename":"geo.error.js","lineno":395,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000642","name":"MAX_DIMENSIONS_EXCEEDED","type":"Literal","value":"MAX_DIMENSIONS_EXCEEDED"}},"description":"Indicates that the request contained more than 25 origins,\nor more than 25 destinations.","type":{"names":["String"]},"name":"MAX_DIMENSIONS_EXCEEDED","longname":"GeoError.Code.MAX_DIMENSIONS_EXCEEDED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"MAX_DIMENSIONS_EXCEEDED","$longname":"GeoError.Code.MAX_DIMENSIONS_EXCEEDED"},{"comment":"/**\n     * Indicates that maximum number of elements limit is exceeded. For\n     * example, for the Distance Matrix API; occurs when the product of\n     * origins and destinations exceeds the per-query limit.\n     * @type {String}\n     */","meta":{"range":[13475,13521],"filename":"geo.error.js","lineno":389,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000640","name":"MAX_ELEMENTS_EXCEEDED","type":"Literal","value":"MAX_ELEMENTS_EXCEEDED"}},"description":"Indicates that maximum number of elements limit is exceeded. For\nexample, for the Distance Matrix API; occurs when the product of\norigins and destinations exceeds the per-query limit.","type":{"names":["String"]},"name":"MAX_ELEMENTS_EXCEEDED","longname":"GeoError.Code.MAX_ELEMENTS_EXCEEDED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"MAX_ELEMENTS_EXCEEDED","$longname":"GeoError.Code.MAX_ELEMENTS_EXCEEDED"},{"comment":"/**\n     * Indicates that the request contained more than allowed waypoints.\n     * @type {String}\n     */","meta":{"range":[13835,13883],"filename":"geo.error.js","lineno":400,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000644","name":"MAX_WAYPOINTS_EXCEEDED","type":"Literal","value":"MAX_WAYPOINTS_EXCEEDED"}},"description":"Indicates that the request contained more than allowed waypoints.","type":{"names":["String"]},"name":"MAX_WAYPOINTS_EXCEEDED","longname":"GeoError.Code.MAX_WAYPOINTS_EXCEEDED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"MAX_WAYPOINTS_EXCEEDED","$longname":"GeoError.Code.MAX_WAYPOINTS_EXCEEDED"},{"comment":"/**\n     * Indicates that the requested resource could not be found.\n     * Note that this also covers `ZERO_RESULTS`.\n     * @type {String}\n     */","meta":{"range":[14170,14192],"filename":"geo.error.js","lineno":411,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000648","name":"NOT_FOUND","type":"Literal","value":"NOT_FOUND"}},"description":"Indicates that the requested resource could not be found.\nNote that this also covers `ZERO_RESULTS`.","type":{"names":["String"]},"name":"NOT_FOUND","longname":"GeoError.Code.NOT_FOUND","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"NOT_FOUND","$longname":"GeoError.Code.NOT_FOUND"},{"comment":"/**\n     * Indicates that you are over your Google API quota.\n     * @type {String}\n     */","meta":{"range":[12299,12335],"filename":"geo.error.js","lineno":362,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000632","name":"OVER_QUERY_LIMIT","type":"Literal","value":"OVER_QUERY_LIMIT"}},"description":"Indicates that you are over your Google API quota.","type":{"names":["String"]},"name":"OVER_QUERY_LIMIT","longname":"GeoError.Code.OVER_QUERY_LIMIT","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"OVER_QUERY_LIMIT","$longname":"GeoError.Code.OVER_QUERY_LIMIT"},{"comment":"/**\n     * Indicates that the request body is not valid JSON.\n     * @type {String}\n     */","meta":{"range":[13985,14011],"filename":"geo.error.js","lineno":405,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000646","name":"PARSE_ERROR","type":"Literal","value":"PARSE_ERROR"}},"description":"Indicates that the request body is not valid JSON.","type":{"names":["String"]},"name":"PARSE_ERROR","longname":"GeoError.Code.PARSE_ERROR","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"PARSE_ERROR","$longname":"GeoError.Code.PARSE_ERROR"},{"comment":"/**\n     *  The acquisition of the geolocation information failed because the\n     *  page didn't have the permission to do it.\n     *  @type {String}\n     */","meta":{"range":[10840,10878],"filename":"geo.error.js","lineno":316,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000616","name":"PERMISSION_DENIED","type":"Literal","value":"PERMISSION_DENIED"}},"description":"The acquisition of the geolocation information failed because the\n page didn't have the permission to do it.","type":{"names":["String"]},"name":"PERMISSION_DENIED","longname":"GeoError.Code.PERMISSION_DENIED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"PERMISSION_DENIED","$longname":"GeoError.Code.PERMISSION_DENIED"},{"comment":"/**\n     *  The acquisition of the geolocation failed because at least one\n     *  internal source of position returned an internal error.\n     *  @type {String}\n     */","meta":{"range":[11058,11102],"filename":"geo.error.js","lineno":322,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000618","name":"POSITION_UNAVAILABLE","type":"Literal","value":"POSITION_UNAVAILABLE"}},"description":"The acquisition of the geolocation failed because at least one\n internal source of position returned an internal error.","type":{"names":["String"]},"name":"POSITION_UNAVAILABLE","longname":"GeoError.Code.POSITION_UNAVAILABLE","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"POSITION_UNAVAILABLE","$longname":"GeoError.Code.POSITION_UNAVAILABLE"},{"comment":"/**\n     * Indicates that the request was denied by the service.\n     * This will generally occur because of a missing API key or because the request\n     * is sent over HTTP instead of HTTPS.\n     * @type {String}\n     */","meta":{"range":[12029,12061],"filename":"geo.error.js","lineno":352,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000628","name":"REQUEST_DENIED","type":"Literal","value":"REQUEST_DENIED"}},"description":"Indicates that the request was denied by the service.\nThis will generally occur because of a missing API key or because the request\nis sent over HTTP instead of HTTPS.","type":{"names":["String"]},"name":"REQUEST_DENIED","longname":"GeoError.Code.REQUEST_DENIED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"REQUEST_DENIED","$longname":"GeoError.Code.REQUEST_DENIED"},{"comment":"/**\n     *  The time allowed to acquire the geolocation, defined by\n     *  PositionOptions.timeout information was reached before\n     *  the information was obtained.\n     *  @type {String}\n     */","meta":{"range":[11312,11330],"filename":"geo.error.js","lineno":329,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000620","name":"TIMEOUT","type":"Literal","value":"TIMEOUT"}},"description":"The time allowed to acquire the geolocation, defined by\n PositionOptions.timeout information was reached before\n the information was obtained.","type":{"names":["String"]},"name":"TIMEOUT","longname":"GeoError.Code.TIMEOUT","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"TIMEOUT","$longname":"GeoError.Code.TIMEOUT"},{"comment":"/**\n     * Indicates that an unknown error has occured.\n     * @type {String}\n     */","meta":{"range":[14449,14479],"filename":"geo.error.js","lineno":421,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000652","name":"UNKNOWN_ERROR","type":"Literal","value":"UNKNOWN_ERROR"}},"description":"Indicates that an unknown error has occured.","type":{"names":["String"]},"name":"UNKNOWN_ERROR","longname":"GeoError.Code.UNKNOWN_ERROR","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"UNKNOWN_ERROR","$longname":"GeoError.Code.UNKNOWN_ERROR"},{"comment":"/**\n     * Indicates that you've exceeded the requests per second per user limit that\n     * you configured in the Google Developers Console. This limit should be\n     * configured to prevent a single or small group of users from exhausting your\n     * daily quota, while still allowing reasonable access to all users.\n     * @type {String}\n     */","meta":{"range":[12694,12746],"filename":"geo.error.js","lineno":370,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000634","name":"USER_RATE_LIMIT_EXCEEDED","type":"Literal","value":"USER_RATE_LIMIT_EXCEEDED"}},"description":"Indicates that you've exceeded the requests per second per user limit that\nyou configured in the Google Developers Console. This limit should be\nconfigured to prevent a single or small group of users from exhausting your\ndaily quota, while still allowing reasonable access to all users.","type":{"names":["String"]},"name":"USER_RATE_LIMIT_EXCEEDED","longname":"GeoError.Code.USER_RATE_LIMIT_EXCEEDED","kind":"member","memberof":"GeoError.Code","scope":"static","defaultvalue":"USER_RATE_LIMIT_EXCEEDED","$longname":"GeoError.Code.USER_RATE_LIMIT_EXCEEDED"}]},{"comment":"/**\n         *  Gets the error code set for this instance.\n         *  This will return one of\n         *  {@link #GeoError.Code|`GeoError.Code` enumeration}.\n         *  @name GeoError#code\n         *  @type {String}\n         */","meta":{"range":[1673,1902],"filename":"geo.error.js","lineno":51,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{}},"description":"Gets the error code set for this instance.\n This will return one of\n {@link #GeoError.Code|`GeoError.Code` enumeration}.","name":"code","type":{"names":["String"]},"memberof":"GeoError","longname":"GeoError#code","scope":"instance","kind":"member","$longname":"GeoError#code"},{"comment":"/**\n     * Creates a new instance of `GeoError` from the given value.\n     *\n     * @param {*} [err]\n     *        Value to be transformed. This is used to determine the proper\n     *        error code for the created instance. If an `Error` or `Object` is\n     *        passed, its `message` property is checked if it matches any of the\n     *        valid error codes. If omitted or no match is found, error code\n     *        `GeoError.Code.UNKNOWN_ERROR` will be used as default.\n     *\n     * @returns {GeoError}\n     *\n     * @example\n     * var GeoError = geolocator.Error,\n     * \t   error = GeoError.create();\n     * console.log(error.code); // \"UNKNOWN_ERROR\"\n     * error = GeoError.create(GeoError.Code.GEOLOCATION_NOT_SUPPORTED);\n     * console.log(error.code); // \"GEOLOCATION_NOT_SUPPORTED\"\n     */","meta":{"range":[3731,4790],"filename":"geo.error.js","lineno":111,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000105","name":"GeoError.create","type":"MethodDefinition","paramnames":["err"]},"vars":{"":null}},"description":"Creates a new instance of `GeoError` from the given value.","params":[{"type":{"names":["*"]},"optional":true,"description":"Value to be transformed. This is used to determine the proper\n       error code for the created instance. If an `Error` or `Object` is\n       passed, its `message` property is checked if it matches any of the\n       valid error codes. If omitted or no match is found, error code\n       `GeoError.Code.UNKNOWN_ERROR` will be used as default.","name":"err"}],"returns":[{"type":{"names":["GeoError"]}}],"examples":["var GeoError = geolocator.Error,\n\t   error = GeoError.create();\nconsole.log(error.code); // \"UNKNOWN_ERROR\"\nerror = GeoError.create(GeoError.Code.GEOLOCATION_NOT_SUPPORTED);\nconsole.log(error.code); // \"GEOLOCATION_NOT_SUPPORTED\""],"name":"create","longname":"GeoError.create","kind":"function","memberof":"GeoError","scope":"static","$longname":"GeoError.create"},{"comment":"/**\n     * Creates a new instance of `GeoError` from the given Google API\n     * response object. Since Geolocator implements various Google APIs,\n     * we might receive responses if different structures. For example,\n     * some APIs return a response object with a `status:String` property\n     * (such as the TimeZone API) and some return responses with an\n     * `error:Object` property. This method will determine the correct reason or\n     * message and return a consistent error object.\n     *\n     * @param {Object|String} response\n     *        Google API response (Object) or status (String) to be transformed.\n     *\n     * @returns {GeoError}\n     *\n     * @example\n     * var error = geolocator.Error.fromGoogleResponse(googleResponse);\n     * console.log(error.code); // \"GOOGLE_KEY_INVALID\"\n     */","meta":{"range":[5615,8555],"filename":"geo.error.js","lineno":161,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000251","name":"GeoError.fromGoogleResponse","type":"MethodDefinition","paramnames":["response"]},"vars":{"":null}},"description":"Creates a new instance of `GeoError` from the given Google API\nresponse object. Since Geolocator implements various Google APIs,\nwe might receive responses if different structures. For example,\nsome APIs return a response object with a `status:String` property\n(such as the TimeZone API) and some return responses with an\n`error:Object` property. This method will determine the correct reason or\nmessage and return a consistent error object.","params":[{"type":{"names":["Object","String"]},"description":"Google API response (Object) or status (String) to be transformed.","name":"response"}],"returns":[{"type":{"names":["GeoError"]}}],"examples":["var error = geolocator.Error.fromGoogleResponse(googleResponse);\nconsole.log(error.code); // \"GOOGLE_KEY_INVALID\""],"name":"fromGoogleResponse","longname":"GeoError.fromGoogleResponse","kind":"function","memberof":"GeoError","scope":"static","$longname":"GeoError.fromGoogleResponse"},{"comment":"/**\n     *  Checks whether the given value is an instance of `GeoError`.\n     *\n     *  @param {*} err - Object to be checked.\n     *\n     *  @returns {Boolean}\n     */","meta":{"range":[8734,8804],"filename":"geo.error.js","lineno":247,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000490","name":"GeoError.isGeoError","type":"MethodDefinition","paramnames":["err"]},"vars":{"":null}},"description":"Checks whether the given value is an instance of `GeoError`.","params":[{"type":{"names":["*"]},"description":"Object to be checked.","name":"err"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isGeoError","longname":"GeoError.isGeoError","kind":"function","memberof":"GeoError","scope":"static","$longname":"GeoError.isGeoError"},{"comment":"/**\n     *  Checks whether the given value is a valid Geolocator Error code.\n     *\n     *  @param {String} errorCode - Error code to be checked.\n     *\n     *  @returns {Boolean}\n     */","meta":{"range":[9002,9286],"filename":"geo.error.js","lineno":258,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000499","name":"GeoError.isValidErrorCode","type":"MethodDefinition","paramnames":["errorCode"]},"vars":{"":null}},"description":"Checks whether the given value is a valid Geolocator Error code.","params":[{"type":{"names":["String"]},"description":"Error code to be checked.","name":"errorCode"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isValidErrorCode","longname":"GeoError.isValidErrorCode","kind":"function","memberof":"GeoError","scope":"static","$longname":"GeoError.isValidErrorCode"},{"comment":"/**\n         *  Gets the error message set for this instance.\n         *  If no message is set, this will return the error code value.\n         *  @name GeoError#message\n         *  @type {String}\n         */","meta":{"range":[2053,2261],"filename":"geo.error.js","lineno":64,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{}},"description":"Gets the error message set for this instance.\n If no message is set, this will return the error code value.","name":"message","type":{"names":["String"]},"memberof":"GeoError","longname":"GeoError#message","scope":"instance","kind":"member","$longname":"GeoError#message"},{"comment":"/**\n         *  Gets the name of the Error object.\n         *  This always returns `\"GeoError\"`.\n         *  @name GeoError#name\n         *  @type {String}\n         */","meta":{"range":[1323,1490],"filename":"geo.error.js","lineno":39,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{}},"description":"Gets the name of the Error object.\n This always returns `\"GeoError\"`.","name":"name","type":{"names":["String"]},"memberof":"GeoError","longname":"GeoError#name","scope":"instance","kind":"member","$longname":"GeoError#name"},{"comment":"/**\n             *  Gets the error stack for this instance.\n             *  @name GeoError#stack\n             *  @type {String}\n             */","meta":{"range":[2563,2706],"filename":"geo.error.js","lineno":79,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{}},"description":"Gets the error stack for this instance.","name":"stack","type":{"names":["String"]},"memberof":"GeoError","longname":"GeoError#stack","scope":"instance","kind":"member","$longname":"GeoError#stack"},{"comment":"/**\n *  Gets the string representation of the error instance.\n *\n *  @returns {String}\n */","meta":{"range":[9381,9543],"filename":"geo.error.js","lineno":275,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000535","name":"GeoError.prototype.toString","type":"FunctionExpression","paramnames":[]},"vars":{"msg":"GeoError#toString~msg"}},"description":"Gets the string representation of the error instance.","returns":[{"type":{"names":["String"]}}],"name":"toString","longname":"GeoError#toString","kind":"function","memberof":"GeoError","scope":"instance","$longname":"GeoError#toString"}],"$constructor":{"comment":"/**\n     * Costructs a new instance of `GeoError`.\n     *\n     * @param {String} [code=\"UNKNOWN_ERROR\"]\n     *        Any valid Geolocator Error code.\n     *        See {@link #GeoError.Code|`GeoError.Code` enumeration} for\n     *        possible values.\n     * @param {String} [message]\n     *        Error message. If omitted, this will be set to `code`.\n     *\n     * @returns {GeoError}\n     *\n     * @example\n     * var GeoError = geolocator.Error,\n     *     error = new GeoError(GeoError.Code.GEOLOCATION_NOT_SUPPORTED);\n     * console.log(error.code); // \"GEOLOCATION_NOT_SUPPORTED\"\n     * console.log(error instanceof GeoError); // true\n     */","meta":{"range":[1212,2907],"filename":"geo.error.js","lineno":36,"path":"/Users/oy/developer/javascript/geolocator/src/core","code":{"id":"astnode100000008","name":"GeoError","type":"MethodDefinition","paramnames":["code","message"]},"vars":{"":null}},"description":"Costructs a new instance of `GeoError`.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"\"UNKNOWN_ERROR\"","description":"Any valid Geolocator Error code.\n       See {@link #GeoError.Code|`GeoError.Code` enumeration} for\n       possible values.","name":"code"},{"type":{"names":["String"]},"optional":true,"description":"Error message. If omitted, this will be set to `code`.","name":"message"}],"returns":[{"type":{"names":["GeoError"]}}],"examples":["var GeoError = geolocator.Error,\n    error = new GeoError(GeoError.Code.GEOLOCATION_NOT_SUPPORTED);\nconsole.log(error.code); // \"GEOLOCATION_NOT_SUPPORTED\"\nconsole.log(error instanceof GeoError); // true"],"name":"GeoError","longname":"GeoError","kind":"class","scope":"global","undocumented":true,"$longname":"GeoError"}}],"symbols":["GeoError","GeoError.Code","GeoError#code","GeoError.create","GeoError.fromGoogleResponse","GeoError.isGeoError","GeoError.isValidErrorCode","GeoError#message","GeoError#name","GeoError#stack","GeoError#toString"]}},"app":{"title":"Geolocator","meta":null,"base":"/geolocator/","entrance":"content:guide","routing":"query","server":"github"},"template":{"name":"Docma Default Template","version":"1.3.0","author":"Onur Yıldırım (onur@cutepilot.com)","license":"MIT","main":"index.html","options":{"title":"Geolocator v2","sidebar":true,"collapsed":false,"badges":true,"search":true,"navbar":true,"navItems":[{"iconClass":"ico-mouse-pointer","label":"Guide","href":"./"},{"iconClass":"ico-book","label":"API Reference","href":"./?api=geolocator"},{"iconClass":"ico-md ico-download","label":"Download","items":[{"label":"Link via CDNJS","href":"https://cdnjs.com/libraries/geolocator","target":"_blank"},{"separator":true},{"label":"<code>npm install geolocator</code>"},{"label":"<code>bower install geolocator</code>"},{"separator":true},{"label":"Download as Archive","href":"https://github.com/onury/geolocator/releases","target":"_blank"},{"separator":true},{"label":"Change Log","href":"?content=changelog"}]},{"iconClass":"ico-md ico-github","label":"GitHub","href":"https://github.com/onury/geolocator","target":"_blank"}]}},"_":{"partials":{"api":"docma-api","content":"docma-content","notFound":"docma-404"},"elementID":"docma-main","contentElementID":"docma-content","logsEnabled":false}};
!function(){var e={};e.createChild=function(e,t,n){n=n||{};var o=document.createElement(t||"div");return Object.keys(n).forEach(function(e){o[e]=n[e]}),e.appendChild(o),o},e.getDocmaElem=function(){var t=document.getElementById(docma._.elementID);return t||(t=e.createChild(document.body,"div",{id:docma._.elementID})),t},e.getContentElem=function(){var e=document.getElementById(docma._.contentElementID);if(!e)throw new Error("Partial "+docma._.partials.content+' should have an element with id="'+docma._.contentElementID+'".');return e},e.loadCompiledContent=function(t){var n=e.getDocmaElem();n.innerHTML=t},e.loadContent=function(t){var n=e.getContentElem();n.innerHTML=t,e.scrollTo()},e.getOffset=function(e){var t="object"==typeof e?e:document.getElementById(e);if(t){var n=t.getBoundingClientRect();if(n.width||n.height||t.getClientRects().length){var o=document.documentElement;return{top:n.top+window.pageYOffset-o.clientTop,left:n.left+window.pageXOffset-o.clientLeft}}}},e.scrollTo=function(t){if(t=(t||window.location.hash||"").replace(/^#/,""),!t)return void(document.body.scrollTop=0);var n=document.getElementById(t);n&&(document.body.scrollTop=e.getOffset(n).top)},e.fixAnchors=function(){docma.app.base&&setTimeout(function(){var e,t,n=document.querySelectorAll('a[href^="#"');for(e=0;e<n.length;e++){t=n[e];var o=t.getAttribute("href");"#"===o.slice(0,1)&&(o=window.location.pathname+(window.location.search||"")+o,t.setAttribute("href",o))}},50)},docma.dom=Object.freeze(e)}();
!function(){dust.filters=dust.filters||{},dust.filters.$pt=function(t){return docma.utils.parseTicks(t)},dust.filters.$pnl=function(t){return docma.utils.parseNewLines(t,{keepIfSingle:!0})},dust.filters.$pl=function(t){return docma.utils.parseLinks(t)},dust.filters.$tl=function(t){return docma.utils.trimLeft(t)},dust.filters.$p=function(t){return docma.utils.parse(t,{keepIfSingle:!0})},dust.filters.$nt=function(t){return docma.utils.normalizeTabs(t)},dust.filters.$desc=function(t){return docma.utils.parse(t.classdesc||t.description||"")},dust.filters.$def=function(t){return t.optional?String(t.defaultvalue):""},dust.filters.$val=function(t){var e=docma.utils.notate(t,"meta.code.value");return void 0===e?"":e},dust.filters.$id=function(t){var e;if("string"==typeof t)e=t;else{var s=docma.utils.isConstructor(t)?"new-":"";e=s+t.$longname}return e.replace(/ /g,"-")}}();
!function(){function o(o,e,n){return e?(o&&"/"!==e.slice(0,1)&&(e="/"+e),n&&"/"!==e.slice(-1)&&(e+="/"),e):o||n?"/":""}function e(o,e){e=void 0===e?window.location.search||"":e,"?"===e.slice(0,1)&&(e=e.slice(1)),o=o.replace(/[\[\]]/g,"\\$&");var n=new RegExp("&?"+o+"(=([^&#]*)|&|#|$)"),a=n.exec(e);return a&&a[2]?decodeURIComponent(a[2].replace(/\+/g," ")):""}Object.defineProperty(docma,"location",{configurable:!1,get:function(){var n=o(!0,window.location.pathname,!0),a=o(!0,docma.app.base,!0),c=n;return n.slice(0,a.length)===a&&(c=n.slice(a.length-1,n.length)),{host:window.location.host,hostname:window.location.hostname,origin:window.location.origin,port:window.location.port,protocol:(window.location.protocol||"").replace(/:$/,""),entrance:o(!0,docma.app.entrance,!1),base:a,hash:(window.location.hash||"").replace(/^#/,""),query:(window.location.search||"").replace(/^\?/,""),href:window.location.href,fullpath:n,pathname:c,path:c+(window.location.search||""),getQuery:e}}}),docma.location=Object.freeze(docma.location)}();
!function(){function e(e){return e&&""!==e.trim()?e:null}function n(e){return(e||"").replace(/([^>]+>)?~?(.*)/,"$2")}var t={};t.notate=function(e,n){if("object"==typeof e){var r,i=Array.isArray(n)?n:n.split("."),o=i[0];if(o)return r=e[o],i.length>1?(i.shift(),t.notate(r,i)):r}},t.getName=function(e){if(e.alias){var r=n(t.notate(e,"meta.code.name")||"");if(r)return r.replace(/.*?[#\.~:](\w+)$/i,"$1")}return e.name},t.getLongName=function(e){var r=n(e.longname);if(e.alias){var i=n(t.notate(e,"meta.code.name")||"");if(!i)return r;var o=n(e.memberof||"");if(!o)return i;var a=new RegExp("^"+o+"[#\\.~:]"),s="instance"===e.scope?"#":".";return a.test(i)?i:o+s+i}return r},t.getFullName=t.getLongName,t.getCodeName=function(e){return n(t.notate(e,"meta.code.name")||"")||t.getLongName(e)},t.getSymbolByName=function(e,n){var r,i;for(r=0;r<e.length;r++){if(i=e[r],i.name===n||i.longname===n||t.getFullName(i)===n)return i;if(i.$members){var o=t.getSymbolByName(i.$members,n);if(o)return o}}return null},t.isGlobal=function(e){return"global"===e.scope},t.isNamespace=function(e){return"namespace"===e.kind},t.isModule=function(e){return"module"===e.kind},t.isClass=function(e){return!t.isConstructor(e)&&("class"===e.kind||"ClassDeclaration"===t.notate(e,"meta.code.type"))},t.isConstructor=function(e){return"class"===e.kind&&"MethodDefinition"===t.notate(e,"meta.code.type")},t.isStaticMember=function(e){return"static"===e.scope},t.isStatic=t.isStaticMember,t.isInner=function(e){return"inner"===e.scope},t.isInstanceMember=function(e){return"instance"===e.scope},t.isMethod=function(e){var n=t.notate(e,"meta.code.type");return"function"===e.kind||"MethodDefinition"===n||"FunctionExpression"===n},t.isFunction=t.isMethod,t.isInstanceMethod=function(e){return t.isInstanceMember(e)&&t.isMethod(e)},t.isStaticMethod=function(e){return t.isStaticMember(e)&&t.isMethod(e)},t.isProperty=function(e){return"member"===e.kind},t.isInstanceProperty=function(e){return t.isInstanceMember(e)&&t.isProperty(e)},t.isStaticProperty=function(e){return t.isStaticMember(e)&&t.isProperty(e)},t.isTypeDef=function(e){return"typedef"===e.kind},t.isCustomType=t.isTypeDef,t.isEnum=function(e){return e.isEnum},t.isReadOnly=function(e){return e.readonly},t.isUndocumented=function(e){return!e.comments},t.hasDescription=function(n){return Boolean(e(n.classdesc)||e(n.description))},t.getTypes=function(e){if("class"===e.kind)return"class";var n=t.notate(e,"type.names")||[];return n=n.join("|"),e.isEnum?"enum<"+n+">":n},t.getReturnTypes=function(e){var n=e.returns;if(!Array.isArray(n))return"void";var r,i=n.reduce(function(e,n){return r=t.notate(n,"type.names"),Array.isArray(r)?e.concat(r):e},[]);return i.length>0?i.join("|"):"void"},t.trimLeft=function(e){return e.replace(/^[\s\n\r\-—]*/,"")},t.parseTicks=function(e){var n=/(`)(.*?)(`)/g;return e.replace(n,function(e,n,t){return"<code>"+t+"</code>"})},t.parseNewLines=function(e,n){n=n||{};var t=e.split(/\n{2,}/);return t.length<=1&&n.keepIfSingle?e:t.map(function(e){return"<p>"+e+"</p>"}).join("")},t.parseLinks=function(e,n){n=n||{};var r=/\{@link +([^\}]*?)\}/g,i=e.replace(r,function(e,t){var r,i,o=t.split("|");1===o.length?r=i=o[0].trim():(r=o[0].trim(),i=o[1].trim());var a=n.target?' target="'+n.target+'"':"";return'<a href="'+r+'"'+a+">"+i+"</a>"});return t.parseTicks(i)},t.parse=function(e,n){return n=n||{},e=t.trimLeft(e),e=t.parseNewLines(e,n),e=t.parseTicks(e),t.parseLinks(e,n)},t.normalizeTabs=function(e){var n;return e.replace(/(\n+)(\s+)/gm,function(e,t,r){return n=r.replace(/\t/g,"  "),n=new Array(n.length-n.length%2+1).join(" "),t+n})},t.getKeywords=function(e){if("string"==typeof e)return e.toLowerCase();var n=t.getFullName(e)+" "+e.longname+" "+e.name+" "+(e.alias||"")+" "+(e.memberOf||"")+" "+(e.kind||"")+" "+(e.scope||"")+" "+(e.classdesc||"")+" "+(e.description||"")+" "+(e.filename||"")+" "+(e.readonly?"readonly":"")+(e.isEnum?"enum":"");return t.isConstructor(e)&&(n+=" constructor"),t.isMethod(e)&&(n+=" method"),t.isProperty(e)&&(n+=" property"),n.replace(/[><"'`\n\r]/g,"").toLowerCase()},t.listType=function(e){return e.map(function(e){return"<code>"+e+"</code>"}).join(", ")},t.listTypeDesc=function(e){if(!e||0===e.length)return"";var n,r=e.map(function(e){return n=t.parse(e.description||"",{keepIfSingle:!0}),n&&(n="&nbsp;&nbsp;—&nbsp;&nbsp;"+n),"<code>"+e.type.names.join("|")+"</code>"+n});return r.length>1?"<ul>\n"+r.join("</li>\n<li>")+"\n</ul>":r},t._find=function(e,n){if(!e||!n)return null;var t,r,i=null;for(t=0;t<e.length;t++)if(r=e[t],r&&"object"==typeof r){for(var o in n)if(void 0!==n[o]&&n.hasOwnProperty(o)){if(n[o]!==r[o]){i=null;break}i=r}if(i)break}return i},t._assign=function(e,n,t){e=e||{};var r;for(r in n)n.hasOwnProperty(r)&&(t?Object.defineProperty(e,r,{enumerable:!0,value:n[r]}):e[r]=n[r]);return e},t._values=function(e){if(Array.isArray(e))return e;var n,t=[];for(n in e)e.hasOwnProperty(n)&&t.push(e[n]);return t},docma.utils=t}();
!function(){function e(e,t){l.info("Event:",e,t?t[0]:""),y.trigger(e,t)}function t(e,n){if(e||n!==t.Type.API||(e=f),e&&!(n&&u.indexOf(n)<0)){var o=p._find(docma.routes,{type:n,name:e});o&&p._assign(this,o)}}function n(e,t){dust.render(e,docma,function(e,n){if(e)throw e;m.loadCompiledContent(n),"function"==typeof t&&t()})}function o(){e(docma.Event.Render,[docma.currentRoute]),d&&(e(docma.Event.Ready),d=!1)}function r(o){docma._.currentRoute=t.create(null),n(docma._.partials.notFound,function(){if(e(docma.Event.Render,[null]),m.scrollTo(),"function"==typeof o)return o(404);throw new Error("Page or content not found.")})}function a(){if(s){var e=sessionStorage.getItem("redirectPath")||null;if(e)return sessionStorage.removeItem("redirectPath"),l.info("Redirecting to:",e),page.redirect(e),!0}return!1}function i(e){var t=e||window.location.search;return/^[\?&]/.test(t)&&(t=t.slice(1)),t||null}var c,u,d=!1,s="path"===docma.app.routing,f="_def_",p=docma.utils,m=docma.dom,l={};["log","info","warn","error"].forEach(function(e){!function(){l[e]=function(){docma._.logsEnabled&&console[e].apply(console,arguments)}}()}),docma.addFilter=function(e,t){if(docma.filterExists(e))throw new Error('Filter "'+e+'" already exists.');return dust.filters[e]=t,docma},docma.removeFilter=function(e){return delete dust.filters[e],docma},docma.filterExists=function(e){return"function"==typeof dust.filters[e]};var y=new EventEmitter;docma.Event={Ready:"ready",Render:"render",Route:"route"},docma.on=function(e,t){return y.on.apply(y,arguments),docma},docma.once=function(){return y.once.apply(y,arguments),docma},docma.off=function(){return y.off.apply(y,arguments),docma},docma.addListener=docma.on,docma.addListenerOnce=docma.once,docma.removeListener=docma.off,Object.defineProperty(docma,"currentRoute",{configurable:!1,get:function(){return docma._.currentRoute}}),Object.defineProperty(docma,"documentation",{configurable:!1,get:function(){return docma._.documentation}}),Object.defineProperty(docma,"symbols",{configurable:!1,get:function(){return docma._.symbols}}),t.Type={API:"api",CONTENT:"content"},u=p._values(t.Type),t.prototype.exists=function(){return Boolean(this.id)},t.prototype.isEqualTo=function(e){return e&&e.exists()&&this.exists()?e.path===this.path:!1},t.prototype.isCurrent=function(){return this.isEqualTo(docma.currentRoute)},t.prototype.apply=function(){return this.type===t.Type.API?(docma._.documentation=docma.apis[this.name].documentation,docma._.symbols=docma.apis[this.name].symbols):(docma._.documentation=null,docma._.symbols=null),e(docma.Event.Route,[this]),docma.render(this),this},t.prototype.toString=function(){return JSON.stringify(this)},t.create=function(e,n){return new t(e,n)},t.fromID=function(e){var n=e.split(":");return 2!==n.length?new t(null):new t(n[1],n[0])},t.fromQuery=function(e){if(!e)return new t(null);var n=e.split("&")[0].split("="),o=n[0].toLowerCase(),r=(n[1]||"").toLowerCase()||f;return u.indexOf(o)<0?new t(null):(r||o===t.Type.API&&(r=f),new t(r,o))},Object.defineProperty(docma,"Route",{configurable:!1,get:function(){return t}}),docma.fetch=function(e,t){var n=new XMLHttpRequest;n.onreadystatechange=function(){if(4===n.readyState){var o=200===n.status?n.responseText:"";return l.log("XHR GET:",n.status,e),t(n.status,o)}},n.open("GET",e,!0),n.send()},docma.render=function(e,a){if(!e||!e.exists())return r(a);if(!e.isEqualTo(docma.currentRoute)){docma._.currentRoute=e;var i="function"==typeof a;e.type===t.Type.API?n(docma._.partials.api,function(){o(),i&&a(200),m.fixAnchors(),m.scrollTo()}):docma.fetch(e.contentPath,function(e,t){return 404===e?r(a):void n(docma._.partials.content,function(){m.loadContent(t),o(),i&&a(e),m.fixAnchors()})})}},docma.app.base&&page.base(docma.app.base),page.redirect("(/)?"+docma.template.main,""),s&&(page("(/)?api/:apiName?",function(e,n){var o=e.params.apiName||f,r=t.create(o,t.Type.API);return r&&r.exists()?void r.apply():n()}),page("(/)?:content",function(e,n){var o=e.params.content,r=t.create(o,t.Type.CONTENT);return r&&r.exists()?void r.apply():n()})),page("(/)?",function(e,n){a()||setTimeout(function(){var o,r=i(e.querystring);if(s){if(r)return n();o=c}else l.log("Query-string:",r),o=r?t.fromQuery(r):c;return o&&o.exists()?void(o.isCurrent()||o.apply()):n()},100)}),page("*",function(e){l.warn("Unknown Route:",e.path),t.create(null).apply()}),l.info("Docma SPA Configuration:"),l.info("App Title:          ",docma.app.title),l.info("Routing by:         ",docma.app.routing),l.info("App Server:         ",docma.app.server),l.info("Base Path:          ",docma.app.base),l.info("Entrance Route ID:  ",docma.app.entrance),window.onload=function(){d=!0,c=t.fromID(docma.app.entrance),page.start({click:!0,popstate:!0,dispatch:!0,hashbang:!1,decodeURLComponents:!0}),l.info("Docma SPA loaded!")}}();
docma = Object.freeze(docma);