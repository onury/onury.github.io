/*! dustjs-linkedin - v2.7.5
* http://dustjs.com/
* Copyright (c) 2016 Aleksander Williams; Released under the MIT License */
!function(a,b){"function"==typeof define&&define.amd&&define.amd.dust===!0?define("dust.core",[],b):"object"==typeof exports?module.exports=b():a.dust=b()}(this,function(){function getTemplate(a,b){return a?"function"==typeof a&&a.template?a.template:dust.isTemplateFn(a)?a:b!==!1?dust.cache[a]:void 0:void 0}function load(a,b,c){if(!a)return b.setError(new Error("No template or template name provided to render"));var d=getTemplate(a,dust.config.cache);return d?d(b,Context.wrap(c,d.templateName)):dust.onLoad?b.map(function(b){function d(a,d){var f;if(a)return b.setError(a);if(f=getTemplate(d,!1)||getTemplate(e,dust.config.cache),!f){if(!dust.compile)return b.setError(new Error("Dust compiler not available"));f=dust.loadSource(dust.compile(d,e))}f(b,Context.wrap(c,f.templateName)).end()}var e=a;3===dust.onLoad.length?dust.onLoad(e,c.options,d):dust.onLoad(e,d)}):b.setError(new Error("Template Not Found: "+a))}function Context(a,b,c,d,e){void 0===a||a instanceof Stack||(a=new Stack(a)),this.stack=a,this.global=b,this.options=c,this.blocks=d,this.templateName=e,this._isContext=!0}function getWithResolvedData(a,b,c){return function(d){return a.push(d)._get(b,c)}}function Stack(a,b,c,d){this.tail=b,this.isObject=a&&"object"==typeof a,this.head=a,this.index=c,this.of=d}function Stub(a){this.head=new Chunk(this),this.callback=a,this.out=""}function Stream(){this.head=new Chunk(this)}function Chunk(a,b,c){this.root=a,this.next=b,this.data=[],this.flushable=!1,this.taps=c}function Tap(a,b){this.head=a,this.tail=b}var dust={version:"2.7.5"},NONE="NONE",ERROR="ERROR",WARN="WARN",INFO="INFO",DEBUG="DEBUG",EMPTY_FUNC=function(){};dust.config={whitespace:!1,amd:!1,cjs:!1,cache:!0},dust._aliases={write:"w",end:"e",map:"m",render:"r",reference:"f",section:"s",exists:"x",notexists:"nx",block:"b",partial:"p",helper:"h"},function(){var a,b,c={DEBUG:0,INFO:1,WARN:2,ERROR:3,NONE:4};"undefined"!=typeof console&&console.log?(a=console.log,b="function"==typeof a?function(){a.apply(console,arguments)}:function(){a(Array.prototype.slice.apply(arguments).join(" "))}):b=EMPTY_FUNC,dust.log=function(a,d){d=d||INFO,c[d]>=c[dust.debugLevel]&&b("[DUST:"+d+"]",a)},dust.debugLevel=NONE,"undefined"!=typeof process&&process.env&&/\bdust\b/.test(process.env.DEBUG)&&(dust.debugLevel=DEBUG)}(),dust.helpers={},dust.cache={},dust.register=function(a,b){a&&(b.templateName=a,dust.config.cache!==!1&&(dust.cache[a]=b))},dust.render=function(a,b,c){var d=new Stub(c).head;try{load(a,d,b).end()}catch(e){d.setError(e)}},dust.stream=function(a,b){var c=new Stream,d=c.head;return dust.nextTick(function(){try{load(a,d,b).end()}catch(c){d.setError(c)}}),c},dust.loadSource=function(source){return eval(source)},dust.isArray=Array.isArray?Array.isArray:function(a){return"[object Array]"===Object.prototype.toString.call(a)},dust.nextTick=function(){return function(a){setTimeout(a,0)}}(),dust.isEmpty=function(a){return 0===a?!1:dust.isArray(a)&&!a.length?!0:!a},dust.isEmptyObject=function(a){var b;if(null===a)return!1;if(void 0===a)return!1;if(a.length>0)return!1;for(b in a)if(Object.prototype.hasOwnProperty.call(a,b))return!1;return!0},dust.isTemplateFn=function(a){return"function"==typeof a&&a.__dustBody},dust.isThenable=function(a){return a&&"object"==typeof a&&"function"==typeof a.then},dust.isStreamable=function(a){return a&&"function"==typeof a.on&&"function"==typeof a.pipe},dust.filter=function(a,b,c,d){var e,f,g,h;if(c)for(e=0,f=c.length;f>e;e++)g=c[e],g.length&&(h=dust.filters[g],"s"===g?b=null:"function"==typeof h?a=h(a,d):dust.log("Invalid filter `"+g+"`",WARN));return b&&(a=dust.filters[b](a,d)),a},dust.filters={h:function(a){return dust.escapeHtml(a)},j:function(a){return dust.escapeJs(a)},u:encodeURI,uc:encodeURIComponent,js:function(a){return dust.escapeJSON(a)},jp:function(a){return JSON?JSON.parse(a):(dust.log("JSON is undefined; could not parse `"+a+"`",WARN),a)}},dust.makeBase=dust.context=function(a,b){return new Context(void 0,a,b)},dust.isContext=function(a){return"object"==typeof a&&a._isContext===!0},Context.wrap=function(a,b){return dust.isContext(a)?a:new Context(a,{},{},null,b)},Context.prototype.get=function(a,b){return"string"==typeof a&&("."===a[0]&&(b=!0,a=a.substr(1)),a=a.split(".")),this._get(b,a)},Context.prototype._get=function(a,b){var c,d,e,f,g,h=this.stack||{},i=1;if(d=b[0],e=b.length,a&&0===e)f=h,h=h.head;else{if(a)h&&(h=h.head?h.head[d]:void 0);else{for(;h&&(!h.isObject||(f=h.head,c=h.head[d],void 0===c));)h=h.tail;h=void 0!==c?c:this.global&&this.global[d]}for(;h&&e>i;){if(dust.isThenable(h))return h.then(getWithResolvedData(this,a,b.slice(i)));f=h,h=h[b[i]],i++}}return"function"==typeof h?(g=function(){try{return h.apply(f,arguments)}catch(a){throw dust.log(a,ERROR),a}},g.__dustBody=!!h.__dustBody,g):(void 0===h&&dust.log("Cannot find reference `{"+b.join(".")+"}` in template `"+this.getTemplateName()+"`",INFO),h)},Context.prototype.getPath=function(a,b){return this._get(a,b)},Context.prototype.push=function(a,b,c){return void 0===a?(dust.log("Not pushing an undefined variable onto the context",INFO),this):this.rebase(new Stack(a,this.stack,b,c))},Context.prototype.pop=function(){var a=this.current();return this.stack=this.stack&&this.stack.tail,a},Context.prototype.rebase=function(a){return new Context(a,this.global,this.options,this.blocks,this.getTemplateName())},Context.prototype.clone=function(){var a=this.rebase();return a.stack=this.stack,a},Context.prototype.current=function(){return this.stack&&this.stack.head},Context.prototype.getBlock=function(a){var b,c,d;if("function"==typeof a&&(a=a(new Chunk,this).data.join("")),b=this.blocks,!b)return dust.log("No blocks for context `"+a+"` in template `"+this.getTemplateName()+"`",DEBUG),!1;for(c=b.length;c--;)if(d=b[c][a])return d;return dust.log("Malformed template `"+this.getTemplateName()+"` was missing one or more blocks."),!1},Context.prototype.shiftBlocks=function(a){var b,c=this.blocks;return a?(b=c?c.concat([a]):[a],new Context(this.stack,this.global,this.options,b,this.getTemplateName())):this},Context.prototype.resolve=function(a){var b;return"function"!=typeof a?a:(b=(new Chunk).render(a,this),b instanceof Chunk?b.data.join(""):b)},Context.prototype.getTemplateName=function(){return this.templateName},Stub.prototype.flush=function(){for(var a=this.head;a;){if(!a.flushable)return a.error?(this.callback(a.error),dust.log("Rendering failed with error `"+a.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.out+=a.data.join(""),a=a.next,this.head=a}this.callback(null,this.out)},Stream.prototype.flush=function(){for(var a=this.head;a;){if(!a.flushable)return a.error?(this.emit("error",a.error),this.emit("end"),dust.log("Streaming failed with error `"+a.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.emit("data",a.data.join("")),a=a.next,this.head=a}this.emit("end")},Stream.prototype.emit=function(a,b){var c,d,e=this.events||{},f=e[a]||[];if(!f.length)return dust.log("Stream broadcasting, but no listeners for `"+a+"`",DEBUG),!1;for(f=f.slice(0),c=0,d=f.length;d>c;c++)f[c](b);return!0},Stream.prototype.on=function(a,b){var c=this.events=this.events||{},d=c[a]=c[a]||[];return"function"!=typeof b?dust.log("No callback function provided for `"+a+"` event listener",WARN):d.push(b),this},Stream.prototype.pipe=function(a){if("function"!=typeof a.write||"function"!=typeof a.end)return dust.log("Incompatible stream passed to `pipe`",WARN),this;var b=!1;return"function"==typeof a.emit&&a.emit("pipe",this),"function"==typeof a.on&&a.on("error",function(){b=!0}),this.on("data",function(c){if(!b)try{a.write(c,"utf8")}catch(d){dust.log(d,ERROR)}}).on("end",function(){if(!b)try{a.end(),b=!0}catch(c){dust.log(c,ERROR)}})},Chunk.prototype.write=function(a){var b=this.taps;return b&&(a=b.go(a)),this.data.push(a),this},Chunk.prototype.end=function(a){return a&&this.write(a),this.flushable=!0,this.root.flush(),this},Chunk.prototype.map=function(a){var b=new Chunk(this.root,this.next,this.taps),c=new Chunk(this.root,b,this.taps);this.next=c,this.flushable=!0;try{a(c)}catch(d){dust.log(d,ERROR),c.setError(d)}return b},Chunk.prototype.tap=function(a){var b=this.taps;return this.taps=b?b.push(a):new Tap(a),this},Chunk.prototype.untap=function(){return this.taps=this.taps.tail,this},Chunk.prototype.render=function(a,b){return a(this,b)},Chunk.prototype.reference=function(a,b,c,d){return"function"==typeof a?(a=a.apply(b.current(),[this,b,null,{auto:c,filters:d}]),a instanceof Chunk?a:this.reference(a,b,c,d)):dust.isThenable(a)?this.await(a,b,null,c,d):dust.isStreamable(a)?this.stream(a,b,null,c,d):dust.isEmpty(a)?this:this.write(dust.filter(a,c,d,b))},Chunk.prototype.section=function(a,b,c,d){var e,f,g,h=c.block,i=c["else"],j=this;if("function"==typeof a&&!dust.isTemplateFn(a)){try{a=a.apply(b.current(),[this,b,c,d])}catch(k){return dust.log(k,ERROR),this.setError(k)}if(a instanceof Chunk)return a}if(dust.isEmptyObject(c))return j;if(dust.isEmptyObject(d)||(b=b.push(d)),dust.isArray(a)){if(h){if(f=a.length,f>0){for(g=b.stack&&b.stack.head||{},g.$len=f,e=0;f>e;e++)g.$idx=e,j=h(j,b.push(a[e],e,f));return g.$idx=void 0,g.$len=void 0,j}if(i)return i(this,b)}}else{if(dust.isThenable(a))return this.await(a,b,c);if(dust.isStreamable(a))return this.stream(a,b,c);if(a===!0){if(h)return h(this,b)}else if(a||0===a){if(h)return h(this,b.push(a))}else if(i)return i(this,b)}return dust.log("Section without corresponding key in template `"+b.getTemplateName()+"`",DEBUG),this},Chunk.prototype.exists=function(a,b,c){var d=c.block,e=c["else"];if(dust.isEmpty(a)){if(e)return e(this,b)}else{if(d)return d(this,b);dust.log("No block for exists check in template `"+b.getTemplateName()+"`",DEBUG)}return this},Chunk.prototype.notexists=function(a,b,c){var d=c.block,e=c["else"];if(dust.isEmpty(a)){if(d)return d(this,b);dust.log("No block for not-exists check in template `"+b.getTemplateName()+"`",DEBUG)}else if(e)return e(this,b);return this},Chunk.prototype.block=function(a,b,c){var d=a||c.block;return d?d(this,b):this},Chunk.prototype.partial=function(a,b,c,d){var e;return void 0===d&&(d=c,c=b),dust.isEmptyObject(d)||(c=c.clone(),e=c.pop(),c=c.push(d).push(e)),dust.isTemplateFn(a)?this.capture(a,b,function(a,b){c.templateName=a,load(a,b,c).end()}):(c.templateName=a,load(a,this,c))},Chunk.prototype.helper=function(a,b,c,d,e){var f,g=this,h=d.filters;if(void 0===e&&(e="h"),!dust.helpers[a])return dust.log("Helper `"+a+"` does not exist",WARN),g;try{return f=dust.helpers[a](g,b,c,d),f instanceof Chunk?f:("string"==typeof h&&(h=h.split("|")),dust.isEmptyObject(c)?g.reference(f,b,e,h):g.section(f,b,c,d))}catch(i){return dust.log("Error in helper `"+a+"`: "+i.message,ERROR),g.setError(i)}},Chunk.prototype.await=function(a,b,c,d,e){return this.map(function(f){a.then(function(a){f=c?f.section(a,b,c):f.reference(a,b,d,e),f.end()},function(a){var d=c&&c.error;d?f.render(d,b.push(a)).end():(dust.log("Unhandled promise rejection in `"+b.getTemplateName()+"`",INFO),f.end())})})},Chunk.prototype.stream=function(a,b,c,d,e){var f=c&&c.block,g=c&&c.error;return this.map(function(h){var i=!1;a.on("data",function(a){i||(f?h=h.map(function(c){c.render(f,b.push(a)).end()}):c||(h=h.reference(a,b,d,e)))}).on("error",function(a){i||(g?h.render(g,b.push(a)):dust.log("Unhandled stream error in `"+b.getTemplateName()+"`",INFO),i||(i=!0,h.end()))}).on("end",function(){i||(i=!0,h.end())})})},Chunk.prototype.capture=function(a,b,c){return this.map(function(d){var e=new Stub(function(a,b){a?d.setError(a):c(b,d)});a(e.head,b).end()})},Chunk.prototype.setError=function(a){return this.error=a,this.root.flush(),this};for(var f in Chunk.prototype)dust._aliases[f]&&(Chunk.prototype[dust._aliases[f]]=Chunk.prototype[f]);Tap.prototype.push=function(a){return new Tap(a,this)},Tap.prototype.go=function(a){for(var b=this;b;)a=b.head(a),b=b.tail;return a};var HCHARS=/[&<>"']/,AMP=/&/g,LT=/</g,GT=/>/g,QUOT=/\"/g,SQUOT=/\'/g;dust.escapeHtml=function(a){return"string"==typeof a||a&&"function"==typeof a.toString?("string"!=typeof a&&(a=a.toString()),HCHARS.test(a)?a.replace(AMP,"&amp;").replace(LT,"&lt;").replace(GT,"&gt;").replace(QUOT,"&quot;").replace(SQUOT,"&#39;"):a):a};var BS=/\\/g,FS=/\//g,CR=/\r/g,LS=/\u2028/g,PS=/\u2029/g,NL=/\n/g,LF=/\f/g,SQ=/'/g,DQ=/"/g,TB=/\t/g;return dust.escapeJs=function(a){return"string"==typeof a?a.replace(BS,"\\\\").replace(FS,"\\/").replace(DQ,'\\"').replace(SQ,"\\'").replace(CR,"\\r").replace(LS,"\\u2028").replace(PS,"\\u2029").replace(NL,"\\n").replace(LF,"\\f").replace(TB,"\\t"):a},dust.escapeJSON=function(a){return JSON?JSON.stringify(a).replace(LS,"\\u2028").replace(PS,"\\u2029").replace(LT,"\\u003c"):(dust.log("JSON is undefined; could not escape `"+a+"`",WARN),a)},dust}),"function"==typeof define&&define.amd&&define.amd.dust===!0&&define(["require","dust.core"],function(require,dust){return dust.onLoad=function(a,b){require([a],function(){b()})},dust});
/*! dustjs-helpers - v1.7.4
* http://dustjs.com/
* Copyright (c) 2017 Aleksander Williams; Released under the MIT License */
!function(a,b){"function"==typeof define&&define.amd&&define.amd.dust===!0?define(["dust.core"],b):"object"==typeof exports?(module.exports=b(require("dustjs-linkedin")),module.exports.registerWith=b):b(a.dust)}(this,function(dust){function a(a,b,c){c=c||"INFO",a=a?"{@"+a+"}: ":"",dust.log(a+b,c)}function b(b){k[b]||(a(b,"Deprecation warning: "+b+" is deprecated and will be removed in a future version of dustjs-helpers","WARN"),a(null,"For help and a deprecation timeline, see https://github.com/linkedin/dustjs-helpers/wiki/Deprecated-Features#"+b.replace(/\W+/g,""),"WARN"),k[b]=!0)}function c(a){return a.stack.tail&&a.stack.tail.head&&"undefined"!=typeof a.stack.tail.head.__select__}function d(a){return c(a)&&a.get("__select__")}function e(a,b){var c,d=a.stack.head,e=a.rebase();a.stack&&a.stack.tail&&(e.stack=a.stack.tail);var f={isPending:!1,isResolved:!1,isDeferredComplete:!1,deferreds:[]};for(c in b)f[c]=b[c];return e.push({__select__:f}).push(d,a.stack.index,a.stack.of)}function f(a){var b,c;if(a.isDeferredPending=!0,a.deferreds.length)for(a.isDeferredComplete=!0,b=0,c=a.deferreds.length;c>b;b++)a.deferreds[b]();a.isDeferredPending=!1}function g(a,b){return"function"==typeof b?b.toString().replace(/(^\s+|\s+$)/gm,"").replace(/\n/gm,"").replace(/,\s*/gm,", ").replace(/\)\{/gm,") {"):b}function h(a,b){return function(c,d,e,f){return i(c,d,e,f,a,b)}}function i(b,c,e,f,g,h){var i,k,l,m,n=e.block,o=e["else"],p=d(c)||{};if(p.isResolved&&!p.isDeferredPending)return b;if(f.hasOwnProperty("key"))k=f.key;else{if(!p.hasOwnProperty("key"))return a(g,"No key specified","WARN"),b;k=p.key}return m=f.type||p.type,k=j(c.resolve(k),m),l=j(c.resolve(f.value),m),h(k,l)?(p.isPending||(i=!0,p.isPending=!0),n&&(b=b.render(n,c)),i&&(p.isResolved=!0)):o&&(b=b.render(o,c)),b}function j(a,b){switch(b&&(b=b.toLowerCase()),b){case"number":return+a;case"string":return String(a);case"boolean":return a="false"===a?!1:a,Boolean(a);case"date":return new Date(a)}return a}var k={},l={tap:function(a,c,d){return b("tap"),d.resolve(a)},sep:function(a,b,c){var d=c.block;return b.stack.index===b.stack.of-1?a:d?d(a,b):a},first:function(a,b,c){return 0===b.stack.index?c.block(a,b):a},last:function(a,b,c){return b.stack.index===b.stack.of-1?c.block(a,b):a},contextDump:function(b,c,d,e){var f,h,i=c.resolve(e.to),j=c.resolve(e.key);switch(j){case"full":f=c.stack;break;default:f=c.stack.head}switch(h=JSON.stringify(f,g,2),i){case"console":a("contextDump",h);break;default:h=h.replace(/</g,"\\u003c"),b=b.write(h)}return b},math:function(b,c,g,h){var i,j=h.key,k=h.method,l=h.operand,m=h.round;if(!h.hasOwnProperty("key")||!h.method)return a("math","`key` or `method` was not provided","ERROR"),b;switch(j=parseFloat(c.resolve(j)),l=parseFloat(c.resolve(l)),k){case"mod":0===l&&a("math","Division by 0","ERROR"),i=j%l;break;case"add":i=j+l;break;case"subtract":i=j-l;break;case"multiply":i=j*l;break;case"divide":0===l&&a("math","Division by 0","ERROR"),i=j/l;break;case"ceil":case"floor":case"round":case"abs":i=Math[k](j);break;case"toint":i=parseInt(j,10);break;default:a("math","Method `"+k+"` is not supported","ERROR")}return"undefined"!=typeof i&&(m&&(i=Math.round(i)),g&&g.block?(c=e(c,{key:i}),b=b.render(g.block,c),f(d(c))):b=b.write(i)),b},select:function(b,c,g,h){var i=g.block,j={};return h.hasOwnProperty("key")&&(j.key=c.resolve(h.key)),h.hasOwnProperty("type")&&(j.type=h.type),i?(c=e(c,j),b=b.render(i,c),f(d(c))):a("select","Missing body block","WARN"),b},eq:h("eq",function(a,b){return a===b}),ne:h("ne",function(a,b){return a!==b}),lt:h("lt",function(a,b){return b>a}),lte:h("lte",function(a,b){return b>=a}),gt:h("gt",function(a,b){return a>b}),gte:h("gte",function(a,b){return a>=b}),any:function(b,c,e){var f=d(c);return f?f.isDeferredComplete?a("any","Must not be nested inside {@any} or {@none} block","ERROR"):b=b.map(function(a){f.deferreds.push(function(){f.isResolved&&(a=a.render(e.block,c)),a.end()})}):a("any","Must be used inside a {@select} block","ERROR"),b},none:function(b,c,e){var f=d(c);return f?f.isDeferredComplete?a("none","Must not be nested inside {@any} or {@none} block","ERROR"):b=b.map(function(a){f.deferreds.push(function(){f.isResolved||(a=a.render(e.block,c)),a.end()})}):a("none","Must be used inside a {@select} block","ERROR"),b},size:function(a,b,c,d){var e,f,g=d.key;if(g=b.resolve(d.key),g&&g!==!0)if(dust.isArray(g))e=g.length;else if(!isNaN(parseFloat(g))&&isFinite(g))e=g;else if("object"==typeof g){e=0;for(f in g)g.hasOwnProperty(f)&&e++}else e=(g+"").length;else e=0;return a.write(e)}};for(var m in l)dust.helpers[m]=l[m];return dust});
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.page=e()}(this,function(){"use strict";var p=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)},n=h,t=a,e=function(t){return o(a(t))},r=o,i=c,x=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(t){for(var e,n,r=[],i=0,o=0,a="";null!=(e=x.exec(t));){var s=e[0],c=e[1],h=e.index;if(a+=t.slice(o,h),o=h+s.length,c)a+=c[1];else{a&&(r.push(a),a="");var p=e[2],f=e[3],u=e[4],l=e[5],d=e[6],m=e[7],v="+"===d||"*"===d,g="?"===d||"*"===d,y=p||"/",w=u||l||(m?".*":"[^"+y+"]+?");r.push({name:f||i++,prefix:p||"",delimiter:y,optional:g,repeat:v,pattern:(n=w,n.replace(/([=!:$\/()])/g,"\\$1"))})}}return o<t.length&&(a+=t.substr(o)),a&&r.push(a),r}function o(c){for(var h=new Array(c.length),t=0;t<c.length;t++)"object"==typeof c[t]&&(h[t]=new RegExp("^"+c[t].pattern+"$"));return function(t){for(var e="",n=t||{},r=0;r<c.length;r++){var i=c[r];if("string"!=typeof i){var o,a=n[i.name];if(null==a){if(i.optional)continue;throw new TypeError('Expected "'+i.name+'" to be defined')}if(p(a)){if(!i.repeat)throw new TypeError('Expected "'+i.name+'" to not repeat, but received "'+a+'"');if(0===a.length){if(i.optional)continue;throw new TypeError('Expected "'+i.name+'" to not be empty')}for(var s=0;s<a.length;s++){if(o=encodeURIComponent(a[s]),!h[r].test(o))throw new TypeError('Expected all "'+i.name+'" to match "'+i.pattern+'", but received "'+o+'"');e+=(0===s?i.prefix:i.delimiter)+o}}else{if(o=encodeURIComponent(a),!h[r].test(o))throw new TypeError('Expected "'+i.name+'" to match "'+i.pattern+'", but received "'+o+'"');e+=i.prefix+o}}else e+=i}return e}}function f(t){return t.replace(/([.+*?=^!:${}()[\]|\/])/g,"\\$1")}function s(t,e){return t.keys=e,t}function u(t){return t.sensitive?"":"i"}function c(t,e){for(var n=(e=e||{}).strict,r=!1!==e.end,i="",o=t[t.length-1],a="string"==typeof o&&/\/$/.test(o),s=0;s<t.length;s++){var c=t[s];if("string"==typeof c)i+=f(c);else{var h=f(c.prefix),p=c.pattern;c.repeat&&(p+="(?:"+h+p+")*"),i+=p=c.optional?h?"(?:"+h+"("+p+"))?":"("+p+")?":h+"("+p+")"}}return n||(i=(a?i.slice(0,-2):i)+"(?:\\/(?=$))?"),i+=r?"$":n&&a?"":"(?=\\/|$)",new RegExp("^"+i,u(e))}function h(t,e,n){return p(e=e||[])?n||(n={}):(n=e,e=[]),t instanceof RegExp?function(t,e){var n=t.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,pattern:null});return s(t,e)}(t,e):p(t)?function(t,e,n){for(var r=[],i=0;i<t.length;i++)r.push(h(t[i],e,n).source);return s(new RegExp("(?:"+r.join("|")+")",u(n)),e)}(t,e,n):function(t,e,n){for(var r=a(t),i=c(r,n),o=0;o<r.length;o++)"string"!=typeof r[o]&&e.push(r[o]);return s(i,e)}(t,e,n)}n.parse=t,n.compile=e,n.tokensToFunction=r,n.tokensToRegExp=i;var l=L;(L.default=L).Context=P,L.Route=S,L.sameOrigin=N;var d,m,v,g="undefined"!=typeof document,y="undefined"!=typeof window,w="undefined"!=typeof history,b="undefined"!=typeof process,E=g&&document.ontouchstart?"touchstart":"click",R=y&&!(!window.history.location&&!window.location),k=!0,A=!0,T="",O=!1,C=!1;function L(t,e){if("function"==typeof t)return L("*",t);if("function"==typeof e)for(var n=new S(t),r=1;r<arguments.length;++r)L.callbacks.push(n.middleware(arguments[r]));else"string"==typeof t?L["string"==typeof e?"redirect":"show"](t,e):L.start(t)}function U(t){return"string"!=typeof t?t:A?decodeURIComponent(t.replace(/\+/g," ")):t}function P(t,e){var n=I();"/"===t[0]&&0!==t.indexOf(n)&&(t=n+(C?"#!":"")+t);var r=t.indexOf("?");if(this.canonicalPath=t,this.path=t.replace(n,"")||"/",C&&(this.path=this.path.replace("#!","")||"/"),this.title=g&&v.document.title,this.state=e||{},this.state.path=t,this.querystring=~r?U(t.slice(r+1)):"",this.pathname=U(~r?t.slice(0,r):t),this.params={},this.hash="",!C){if(!~this.path.indexOf("#"))return;var i=this.path.split("#");this.path=this.pathname=i[0],this.hash=U(i[1])||"",this.querystring=this.querystring.split("#")[0]}}function S(t,e){(e=e||{}).strict=e.strict||O,this.path="*"===t?"(.*)":t,this.method="GET",this.regexp=n(this.path,this.keys=[],e)}L.callbacks=[],L.exits=[],L.current="",L.len=0,L.base=function(t){if(0===arguments.length)return T;T=t},L.strict=function(t){if(0===arguments.length)return O;O=t},L.start=function(t){if(t=t||{},!d&&(d=!0,v=t.window||y&&window,!1===t.dispatch&&(k=!1),!1===t.decodeURLComponents&&(A=!1),!1!==t.popstate&&y&&v.addEventListener("popstate",$,!1),!1!==t.click&&g&&v.document.addEventListener(E,j,!1),(C=!!t.hashbang)&&y&&!w&&v.addEventListener("hashchange",$,!1),k)){var e;if(R){var n=v.location;e=C&&~n.hash.indexOf("#!")?n.hash.substr(2)+n.search:C?n.search+n.hash:n.pathname+n.search+n.hash}L.replace(e,null,!0,k)}},L.stop=function(){d&&(L.current="",L.len=0,d=!1,g&&v.document.removeEventListener(E,j,!1),y&&v.removeEventListener("popstate",$,!1),y&&v.removeEventListener("hashchange",$,!1))},L.show=function(t,e,n,r){var i=new P(t,e),o=m;return L.current=(m=i).path,!1!==n&&L.dispatch(i,o),!1!==i.handled&&!1!==r&&i.pushState(),i},L.back=function(t,e){0<L.len?(w&&v.history.back(),L.len--):t?setTimeout(function(){L.show(t,e)}):setTimeout(function(){L.show(I(),e)})},L.redirect=function(t,e){"string"==typeof t&&"string"==typeof e&&L(t,function(t){setTimeout(function(){L.replace(e)},0)}),"string"==typeof t&&void 0===e&&setTimeout(function(){L.replace(t)},0)},L.replace=function(t,e,n,r){var i=new P(t,e),o=m;return L.current=(m=i).path,i.init=n,i.save(),!1!==r&&L.dispatch(i,o),i},L.dispatch=function(e,n){var r=0,i=0;function o(){var t=L.callbacks[r++];if(e.path===L.current)return t?void t(e,o):function(t){if(t.handled)return;var e;e=C?R&&I()+v.location.hash.replace("#!",""):R&&v.location.pathname+v.location.search;if(e===t.canonicalPath)return;L.stop(),t.handled=!1,R&&(v.location.href=t.canonicalPath)}(e);e.handled=!1}n?function t(){var e=L.exits[i++];if(!e)return o();e(n,t)}():o()},L.exit=function(t,e){if("function"==typeof t)return L.exit("*",t);for(var n=new S(t),r=1;r<arguments.length;++r)L.exits.push(n.middleware(arguments[r]))},(L.Context=P).prototype.pushState=function(){L.len++,w&&v.history.pushState(this.state,this.title,C&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},P.prototype.save=function(){w&&"file:"!==v.location.protocol&&v.history.replaceState(this.state,this.title,C&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},(L.Route=S).prototype.middleware=function(n){var r=this;return function(t,e){if(r.match(t.path,t.params))return n(t,e);e()}},S.prototype.match=function(t,e){var n=this.keys,r=t.indexOf("?"),i=~r?t.slice(0,r):t,o=this.regexp.exec(decodeURIComponent(i));if(!o)return!1;for(var a=1,s=o.length;a<s;++a){var c=n[a-1],h=U(o[a]);void 0===h&&hasOwnProperty.call(e,c.name)||(e[c.name]=h)}return!0};var $=function(){var r=!1;if(y)return g&&"complete"===document.readyState?r=!0:window.addEventListener("load",function(){setTimeout(function(){r=!0},0)}),function(t){if(r)if(t.state){var e=t.state.path;L.replace(e,t.state)}else if(R){var n=v.location;L.show(n.pathname+n.hash,void 0,void 0,!1)}}}();function j(t){var e;if(1===(null==(e=(e=t)||y&&window.event).which?e.button:e.which)&&!(t.metaKey||t.ctrlKey||t.shiftKey||t.defaultPrevented)){var n=t.target,r=t.path||(t.composedPath?t.composedPath():null);if(r)for(var i=0;i<r.length;i++)if(r[i].nodeName&&"A"===r[i].nodeName.toUpperCase()&&r[i].href){n=r[i];break}for(;n&&"A"!==n.nodeName.toUpperCase();)n=n.parentNode;if(n&&"A"===n.nodeName.toUpperCase()){var o="object"==typeof n.href&&"SVGAnimatedString"===n.href.constructor.name;if(!n.hasAttribute("download")&&"external"!==n.getAttribute("rel")){var a=n.getAttribute("href");if((C||!function(t){if(!R)return!1;var e=v.location;return t.pathname===e.pathname&&t.search===e.search}(n)||!n.hash&&"#"!==a)&&!(a&&-1<a.indexOf("mailto:"))&&(o?!n.target.baseVal:!n.target)&&(o||N(n.href))){var s=o?n.href.baseVal:n.pathname+n.search+(n.hash||"");s="/"!==s[0]?"/"+s:s,b&&s.match(/^\/[a-zA-Z]:\//)&&(s=s.replace(/^\/[a-zA-Z]:\//,"/"));var c=s,h=I();0===s.indexOf(h)&&(s=s.substr(T.length)),C&&(s=s.replace("#!","")),h&&c===s||(t.preventDefault(),L.show(c))}}}}}function N(t){if(!t||!R)return!1;var e=function(t){if("function"==typeof URL&&R)return new URL(t,location.toString());if(g){var e=document.createElement("a");return e.href=t,e}}(t),n=v.location;return n.protocol===e.protocol&&n.hostname===e.hostname&&n.port===e.port}function I(){if(T)return T;var t=y&&v&&v.location;return y&&C&&t&&"file:"===t.protocol?t.pathname:T}return L.sameOrigin=N,l});
/*!
 * EventEmitter v5.2.4 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */
!function(e){"use strict";function t(){}function n(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function r(e){return function(){return this[e].apply(this,arguments)}}function i(e){return"function"==typeof e||e instanceof RegExp||!(!e||"object"!=typeof e)&&i(e.listener)}var s=t.prototype,o=e.EventEmitter;s.getListeners=function(e){var t,n,r=this._getEvents();if(e instanceof RegExp){t={};for(n in r)r.hasOwnProperty(n)&&e.test(n)&&(t[n]=r[n])}else t=r[e]||(r[e]=[]);return t},s.flattenListeners=function(e){var t,n=[];for(t=0;t<e.length;t+=1)n.push(e[t].listener);return n},s.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&(t={},t[e]=n),t||n},s.addListener=function(e,t){if(!i(t))throw new TypeError("listener must be a function");var r,s=this.getListenersAsObject(e),o="object"==typeof t;for(r in s)s.hasOwnProperty(r)&&n(s[r],t)===-1&&s[r].push(o?t:{listener:t,once:!1});return this},s.on=r("addListener"),s.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},s.once=r("addOnceListener"),s.defineEvent=function(e){return this.getListeners(e),this},s.defineEvents=function(e){for(var t=0;t<e.length;t+=1)this.defineEvent(e[t]);return this},s.removeListener=function(e,t){var r,i,s=this.getListenersAsObject(e);for(i in s)s.hasOwnProperty(i)&&(r=n(s[i],t),r!==-1&&s[i].splice(r,1));return this},s.off=r("removeListener"),s.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},s.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},s.manipulateListeners=function(e,t,n){var r,i,s=e?this.removeListener:this.addListener,o=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(r=n.length;r--;)s.call(this,t,n[r]);else for(r in t)t.hasOwnProperty(r)&&(i=t[r])&&("function"==typeof i?s.call(this,r,i):o.call(this,r,i));return this},s.removeEvent=function(e){var t,n=typeof e,r=this._getEvents();if("string"===n)delete r[e];else if(e instanceof RegExp)for(t in r)r.hasOwnProperty(t)&&e.test(t)&&delete r[t];else delete this._events;return this},s.removeAllListeners=r("removeEvent"),s.emitEvent=function(e,t){var n,r,i,s,o,u=this.getListenersAsObject(e);for(s in u)if(u.hasOwnProperty(s))for(n=u[s].slice(0),i=0;i<n.length;i++)r=n[i],r.once===!0&&this.removeListener(e,r.listener),o=r.listener.apply(this,t||[]),o===this._getOnceReturnValue()&&this.removeListener(e,r.listener);return this},s.trigger=r("emitEvent"),s.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},s.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},s._getOnceReturnValue=function(){return!this.hasOwnProperty("_onceReturnValue")||this._onceReturnValue},s._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return e.EventEmitter=o,t},"function"==typeof define&&define.amd?define(function(){return t}):"object"==typeof module&&module.exports?module.exports=t:e.EventEmitter=t}(this||{});
/* docma (dust) compiled templates */
(function(dust){dust.register("docma-404",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class=\"container container-boxed\"><br /><br /><h1>404</h1><hr /><h3>Page Not Found</h3><br />The file or page you have requested is not found. &nbsp;&nbsp;<br />Please make sure page address is entered correctly.<br /><br /><br /></div></div>");}body_0.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-api",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{}).w("<div id=\"wrapper\">").x(ctx.getPath(false, ["template","options","sidebar","enabled"]),ctx,{"block":body_1},{}).w("<div id=\"page-content-wrapper\"><div class=\"container\"><br />").s(ctx.get(["documentation"], false),ctx,{"block":body_2},{}).w("<br /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" href=\"https://onury.io/docma\">Docma</a></b>.</span></div></div></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div id=\"sidebar-wrapper\">").p("sidebar",ctx,ctx,{}).w("</div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(true, []),"template":ctx.get(["template"], false)});}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-content",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class='").h("eq",ctx,{"block":body_1},{"key":ctx.getPath(false, ["currentRoute","sourceType"]),"value":"md"},"h").w("'><div id=\"docma-content\"></div>").h("eq",ctx,{"block":body_2},{"key":ctx.getPath(false, ["currentRoute","sourceType"]),"value":"md"},"h").w("</div></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("container container-boxed");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<br /><hr /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" href=\"https://onury.io/docma\">Docma</a></b>.</span>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("enums",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["$members"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.h("eq",ctx,{"else":body_2,"block":body_4},{"key":ctx.getPath(false, ["template","options","symbols","enums"]),"value":"table"},"h");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<div class=\"space-top-sm space-bottom-xs fw-bold\">Enumeration</div><ul class=\"param-list\">").s(ctx.get(["$members"], false),ctx,{"block":body_3},{}).w("</ul>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<li><div class=\"param-meta clearfix\"><span class=\"inline-block space-right-sm\"><code>").f(ctx.getPath(true, []),ctx,"h",["$longname","s","$dot_prop"]).w("</code>&nbsp;:&nbsp;<code>").f(ctx.getPath(true, []),ctx,"h",["s","$type"]).w("</code></span><span class=\"param-info-box\"><span class=\"param-info value\">Value:&nbsp;</span><code>").f(ctx.getPath(true, []),ctx,"h",["$val"]).w("</code></span></div><div class=\"param-desc\">").f(ctx.getPath(true, []),ctx,"h",["s","$desc"]).w("</div></li>");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Enumeration</th><th>Type</th><th>Value</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["$members"], false),ctx,{"block":body_5},{}).w("</tbody></table>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<tr><td><code>").f(ctx.getPath(true, []),ctx,"h",["$longname","s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["s","$type"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$val"]).w("</code></td><td>").f(ctx.getPath(true, []),ctx,"h",["s","$desc"]).w("</td></tr>");}body_5.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navbar",body_0);function body_0(chk,ctx){return chk.x(ctx.getPath(false, ["template","options","navbar","enabled"]),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<nav class=\"navbar ").x(ctx.getPath(false, ["template","options","navbar","dark"]),ctx,{"block":body_2},{}).w("\"><div class=\"navbar-inner ").x(ctx.get(["boxed"], false),ctx,{"block":body_3},{}).w("\"><div class=\"navbar-brand\">").x(ctx.getPath(false, ["template","options","logo","dark"]),ctx,{"block":body_4},{}).w("<span class=\"navbar-title\"><a href=\"").f(ctx.getPath(false, ["template","options","title","href"]),ctx,"h").w("\">").f(ctx.getPath(false, ["template","options","title","label"]),ctx,"h").w("</a></span></div>").h("gt",ctx,{"block":body_7},{"key":ctx.getPath(false, ["template","options","navbar","menu","length"]),"value":0},"h").w("</div></nav>").x(ctx.getPath(false, ["template","options","navbar","fixed"]),ctx,{"block":body_16},{}).w("<div class=\"nav-overlay\"></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("dark");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("container container-boxed");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.x(ctx.getPath(false, ["template","options","navbar","dark"]),ctx,{"else":body_5,"block":body_6},{});}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<img src=\"").f(ctx.getPath(false, ["template","options","logo","dark"]),ctx,"h").w("\" alt=\"logo\" class=\"navbar-logo\" />");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<img src=\"").f(ctx.getPath(false, ["template","options","logo","light"]),ctx,"h").w("\" alt=\"logo\" class=\"navbar-logo\" />");}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<div class=\"navbar-menu-btn\" tabindex=\"0\"><i class=\"fas fa-lg fa-bars trans-all-ease\"></i><i class=\"fas fa-md fa-times trans-all-ease\"></i></div><div class=\"navbar-menu\"><ul class=\"navbar-list\">").s(ctx.getPath(false, ["template","options","navbar","menu"]),ctx,{"block":body_8},{}).w("</ul></div>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.x(ctx.get(["items"], false),ctx,{"else":body_9,"block":body_10},{});}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.w("<li class=\"dropdown\"><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_11,"block":body_12},{}).w("\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"nav-icon ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>").x(ctx.get(["label"], false),ctx,{"block":body_13},{}).x(ctx.get(["chevron"], false),ctx,{"block":body_14},{}).w("</a><ul>").s(ctx.get(["items"], false),ctx,{"block":body_15},{}).w("</ul></li>");}body_10.__dustBody=!0;function body_11(chk,ctx){return chk.w("#");}body_11.__dustBody=!0;function body_12(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_12.__dustBody=!0;function body_13(chk,ctx){return chk.w("<span class=\"nav-label\">").f(ctx.get(["label"], false),ctx,"h").w("</span>");}body_13.__dustBody=!0;function body_14(chk,ctx){return chk.w("<i class=\"nav-arrow fas fa-sm fa-angle-down\"></i>");}body_14.__dustBody=!0;function body_15(chk,ctx){return chk.w(" ").p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{}).w(" ");}body_15.__dustBody=!0;function body_16(chk,ctx){return chk.w("<div class=\"nav-spacer\"></div>");}body_16.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navitem",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["separator"], false),ctx,{"else":body_1,"block":body_6},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<li><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_2,"block":body_3},{}).w("\" target=\"").f(ctx.get(["target"], false),ctx,"h").w("\">").x(ctx.get(["iconClass"], false),ctx,{"block":body_4},{}).x(ctx.get(["label"], false),ctx,{"block":body_5},{}).w("</a></li>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("#");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<i class=\"nav-icon ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<span class=\"nav-label\">").f(ctx.get(["label"], false),ctx,"h",["s"]).w("</span>");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<li role=\"separator\" class=\"divider\"></li>");}body_6.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("params",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["params"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.h("eq",ctx,{"else":body_2,"block":body_8},{"key":ctx.getPath(false, ["template","options","symbols","params"]),"value":"table"},"h");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<div class=\"space-top-sm space-bottom-xs fw-bold\">Parameters</div><ul class=\"param-list\">").s(ctx.get(["params"], false),ctx,{"block":body_3},{}).w("</ul>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<li><div class=\"param-meta clearfix\"><span class=\"inline-block space-right-sm\"><code>").x(ctx.get(["variable"], false),ctx,{"block":body_4},{}).f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code>&nbsp;:&nbsp;<code>").x(ctx.get(["variable"], false),ctx,{"block":body_5},{}).f(ctx.getPath(true, []),ctx,"h",["s","$type"]).w("</code></span><span class=\"param-info-box\">").x(ctx.get(["optional"], false),ctx,{"else":body_6,"block":body_7},{}).w("</span></div><div class=\"param-desc\">").f(ctx.getPath(true, []),ctx,"h",["s","$param_desc"]).w("</div></li>");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("...");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("...");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<span class=\"param-info required boxed\">Required</span>");}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<span class=\"param-info default\">Default:&nbsp;</span><code>").f(ctx.getPath(true, []),ctx,"h",["$def"]).w("</code>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["params"], false),ctx,{"block":body_9},{}).w("</tbody></table>");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.w("<tr><td><code>").x(ctx.get(["variable"], false),ctx,{"block":body_10},{}).f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").x(ctx.get(["variable"], false),ctx,{"block":body_11},{}).f(ctx.getPath(true, []),ctx,"h",["s","$type"]).w("</code></td><td>").x(ctx.get(["optional"], false),ctx,{"else":body_12,"block":body_13},{}).f(ctx.getPath(true, []),ctx,"h",["s","$param_desc"]).w("</td></tr>");}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.w("...");}body_10.__dustBody=!0;function body_11(chk,ctx){return chk.w("...");}body_11.__dustBody=!0;function body_12(chk,ctx){return chk.w("<span class=\"param-info required boxed\">Required</span>");}body_12.__dustBody=!0;function body_13(chk,ctx){return chk.w("<span class=\"param-info default boxed\">Default</span><span class=\"color-gray\">:</span><code>").f(ctx.getPath(true, []),ctx,"h",["$def"]).w("</code>");}body_13.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("properties",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["properties"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.h("eq",ctx,{"else":body_2,"block":body_4},{"key":ctx.getPath(false, ["template","options","symbols","props"]),"value":"table"},"h");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<div class=\"space-top-sm space-bottom-xs fw-bold\">Properties</div><ul class=\"param-list\">").s(ctx.get(["properties"], false),ctx,{"block":body_3},{}).w("</ul>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<li><div class=\"param-meta clearfix\"><span class=\"inline-block space-right-sm\"><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code>&nbsp;:&nbsp;<code>").f(ctx.getPath(true, []),ctx,"h",["s","$type"]).w("</code></span></div><div class=\"param-desc\">").f(ctx.get(["description"], false),ctx,"h",["s","$p"]).w("</div></li>");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["properties"], false),ctx,{"block":body_5},{}).w("</tbody></table>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<tr><td><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["s","$type"]).w("</code></td><td>").f(ctx.get(["description"], false),ctx,"h",["s","$p"]).w("</td></tr>");}body_5.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("sidebar",body_0);function body_0(chk,ctx){return chk.w("<div class=\"sidebar-header\"><div id=\"sidebar-toggle\"><i class=\"fas fa-lg fa-bars trans-all-ease\"></i></div><div class=\"sidebar-brand\">").x(ctx.getPath(false, ["template","options","logo","light"]),ctx,{"block":body_1},{}).w("<span class=\"sidebar-title\"><a href=\"").f(ctx.getPath(false, ["template","options","title","href"]),ctx,"h").w("\">").f(ctx.getPath(false, ["template","options","title","label"]),ctx,"h").w("</a></span></div>").x(ctx.getPath(false, ["template","options","sidebar","search"]),ctx,{"block":body_2},{}).x(ctx.getPath(false, ["template","options","sidebar","toolbar"]),ctx,{"block":body_3},{}).w("</div><div class=\"sidebar-nav-container\"><ul class=\"sidebar-nav\">").f(ctx.get(["symbols"], false),ctx,"h",["s","$navnodes"]).w("</ul></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<img src=\"").f(ctx.getPath(false, ["template","options","logo","light"]),ctx,"h").w("\" alt=\"logo\" class=\"sidebar-logo\" />");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<div class=\"sidebar-search\"><div class=\"sidebar-search-icon\"><i class=\"fas fa-md fa-search\"></i></div><input id=\"txt-search\" type=\"search\" placeholder=\"Search...\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" /><div class=\"sidebar-search-clean\"><i class=\"fas fa-lg fa-times-circle\"></i></div></div>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<div class=\"sidebar-toolbar\"><div class=\"toolbar-scope-filters\"></div><div class=\"toolbar-kind-filters\"></div><div class=\"toolbar-buttons\"><span class=\"btn-switch-fold inline-block\" title=\"Fold Symbols\">").h("eq",ctx,{"else":body_4,"block":body_5},{"key":ctx.getPath(false, ["template","options","sidebar","itemsFolded"]),"type":"boolean","value":"true"},"h").w("</span><span class=\"btn-switch-outline inline-block space-left-xs\" title=\"Toggle Outline\">").h("eq",ctx,{"else":body_6,"block":body_7},{"key":ctx.getPath(false, ["template","options","sidebar","outline"]),"type":"string","value":"tree"},"h").w("</span></div></div>");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<i class=\"far fa-lg fa-caret-square-down\"></i>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<i class=\"far fa-lg fa-caret-square-right\"></i>");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<i class=\"fas fa-lg fa-outdent\"></i>");}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<i class=\"fas fa-lg fa-indent\"></i>");}body_7.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("symbol",body_0);function body_0(chk,ctx){return chk.nx(ctx.getPath(false, ["symbol","$hide"]),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div id=\"").f(ctx.get(["symbol"], false),ctx,"h",["$id"]).w("\" class=\"symbol-container\"><div class=\"symbol-heading\"><div class=\"symbol\"><a href=\"#").f(ctx.get(["symbol"], false),ctx,"h",["$id"]).w("\"><i class=\"fas fa-link color-gray-light\" aria-hidden=\"true\"></i></a><code class=\"symbol-name\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$longname_params"]).w("</code><span class=\"symbol-sep\">").f(ctx.get(["symbol"], false),ctx,"h",["$type_sep"]).w("</span><code class=\"symbol-type\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$type"]).w("</code>").f(ctx.get(["symbol"], false),ctx,"h",["s","$tags"]).w("</div></div><div class=\"symbol-definition\"><div class=\"symbol-info\">").x(ctx.getPath(false, ["symbol","alias"]),ctx,{"block":body_2},{}).x(ctx.getPath(false, ["symbol","augments"]),ctx,{"block":body_4},{}).x(ctx.getPath(false, ["symbol","version"]),ctx,{"block":body_5},{}).x(ctx.getPath(false, ["symbol","since"]),ctx,{"block":body_6},{}).x(ctx.getPath(false, ["symbol","copyright"]),ctx,{"block":body_7},{}).x(ctx.getPath(false, ["symbol","author"]),ctx,{"block":body_8},{}).x(ctx.getPath(false, ["symbol","license"]),ctx,{"block":body_9},{}).w("</div>").f(ctx.get(["symbol"], false),ctx,"h",["s","$desc"]).x(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_10},{}).h("ne",ctx,{"block":body_15},{"key":ctx.getPath(false, ["symbol","meta","code","type"]),"value":"ClassDeclaration"},"h").x(ctx.getPath(false, ["symbol","fires"]),ctx,{"block":body_18},{}).x(ctx.getPath(false, ["symbol","returns"]),ctx,{"block":body_20},{}).x(ctx.getPath(false, ["symbol","generator"]),ctx,{"block":body_23},{}).x(ctx.getPath(false, ["symbol","exceptions"]),ctx,{"block":body_27},{}).x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"block":body_30},{}).x(ctx.getPath(false, ["symbol","examples"]),ctx,{"block":body_31},{}).x(ctx.getPath(false, ["template","options","symbols","meta"]),ctx,{"block":body_34},{}).w("</div></div><hr />").x(ctx.getPath(false, ["symbol","$constructor"]),ctx,{"block":body_38},{}).nx(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"block":body_40},{});}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.nx(ctx.get(["$constructor"], false),ctx,{"block":body_3},{});}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<p><b class=\"caption\">Alias:</b> <code>").f(ctx.getPath(false, ["symbol","alias"]),ctx,"h",["s","$dot_prop"]).w("</code></p>");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<p><b class=\"caption\">Extends:</b> ").f(ctx.get(["symbol"], false),ctx,"h",["s","$extends"]).w("</p>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<p><b class=\"caption\">Version:</b>&nbsp;").f(ctx.getPath(false, ["symbol","version"]),ctx,"h",["s"]).w("</p>");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<p><b class=\"caption\">Since:</b>&nbsp;").f(ctx.getPath(false, ["symbol","since"]),ctx,"h",["s"]).w("</p>");}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<p><b class=\"caption\">Copyright:</b>&nbsp;").f(ctx.getPath(false, ["symbol","copyright"]),ctx,"h",["s"]).w("</p>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("<p><b class=\"caption\">Author:</b>&nbsp;").f(ctx.getPath(false, ["symbol","author"]),ctx,"h",["s","$author"]).w("</p>");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.w("<p><b class=\"caption\">License:</b>&nbsp;").f(ctx.getPath(false, ["symbol","license"]),ctx,"h",["s"]).w("</p>");}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.w("<p class=\"no-margin\"><b>See</b>").h("gt",ctx,{"else":body_11,"block":body_13},{"key":ctx.getPath(false, ["symbol","see","length"]),"value":1},"h").w("</p>");}body_10.__dustBody=!0;function body_11(chk,ctx){return chk.s(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_12},{});}body_11.__dustBody=!0;function body_12(chk,ctx){return chk.w("&nbsp;").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]);}body_12.__dustBody=!0;function body_13(chk,ctx){return chk.w("<ul>").s(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_14},{}).w("</ul>");}body_13.__dustBody=!0;function body_14(chk,ctx){return chk.w("<li>").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]).w("</li>");}body_14.__dustBody=!0;function body_15(chk,ctx){return chk.p("params",ctx,ctx.rebase(ctx.get(["symbol"], false)),{"template":ctx.get(["template"], false)}).w(" ").x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"else":body_16,"block":body_17},{});}body_15.__dustBody=!0;function body_16(chk,ctx){return chk.p("properties",ctx,ctx.rebase(ctx.get(["symbol"], false)),{"template":ctx.get(["template"], false)}).w(" ");}body_16.__dustBody=!0;function body_17(chk,ctx){return chk;}body_17.__dustBody=!0;function body_18(chk,ctx){return chk.h("gt",ctx,{"block":body_19},{"key":ctx.getPath(false, ["symbol","fires","length"]),"value":"0","type":"number"},"h");}body_18.__dustBody=!0;function body_19(chk,ctx){return chk.w("<p><b class=\"caption\">Emits:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$emits"]).w("</p>");}body_19.__dustBody=!0;function body_20(chk,ctx){return chk.h("gt",ctx,{"else":body_21,"block":body_22},{"key":ctx.getPath(false, ["symbol","returns","length"]),"value":"1","type":"number"},"h");}body_20.__dustBody=!0;function body_21(chk,ctx){return chk.w("<p><b class=\"caption\">Returns:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$returns"]).w("</p>");}body_21.__dustBody=!0;function body_22(chk,ctx){return chk.w("<b class=\"caption\">Returns:</b><p class=\"pad-left\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$returns"]).w("</p>");}body_22.__dustBody=!0;function body_23(chk,ctx){return chk.x(ctx.getPath(false, ["symbol","yields"]),ctx,{"block":body_24},{});}body_23.__dustBody=!0;function body_24(chk,ctx){return chk.h("gt",ctx,{"else":body_25,"block":body_26},{"key":ctx.getPath(false, ["symbol","yields","length"]),"value":"1","type":"number"},"h");}body_24.__dustBody=!0;function body_25(chk,ctx){return chk.w("<p><b class=\"caption\">Yields:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$yields"]).w("</p>");}body_25.__dustBody=!0;function body_26(chk,ctx){return chk.w("<b class=\"caption\">Yields:</b><p class=\"pad-left\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$yields"]).w("</p>");}body_26.__dustBody=!0;function body_27(chk,ctx){return chk.h("gt",ctx,{"else":body_28,"block":body_29},{"key":ctx.getPath(false, ["symbol","exceptions","length"]),"value":"1","type":"number"},"h");}body_27.__dustBody=!0;function body_28(chk,ctx){return chk.w("<p><b class=\"caption\">Throws:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$exceptions"]).w("</p>");}body_28.__dustBody=!0;function body_29(chk,ctx){return chk.w("<b class=\"caption\">Throws:</b><p class=\"pad-left\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$exceptions"]).w("</p>");}body_29.__dustBody=!0;function body_30(chk,ctx){return chk.p("enums",ctx,ctx.rebase(ctx.get(["symbol"], false)),{"template":ctx.get(["template"], false)}).w(" ");}body_30.__dustBody=!0;function body_31(chk,ctx){return chk.s(ctx.getPath(false, ["symbol","examples"]),ctx,{"block":body_32},{});}body_31.__dustBody=!0;function body_32(chk,ctx){return chk.w("<p><b>Example").h("gt",ctx,{"block":body_33},{"key":ctx.getPath(false, ["symbol","examples","length"]),"value":1},"h").w("</b>").f(ctx.getPath(true, []),ctx,"h",["$get_caption","s"]).w("</p><pre><code>").f(ctx.getPath(true, []),ctx,"h",["$nt","$tnl","$remove_caption"]).w("</code></pre>");}body_32.__dustBody=!0;function body_33(chk,ctx){return chk.w("&nbsp;#").h("math",ctx,{},{"key":ctx.get(["$idx"], false),"method":"add","operand":"1"},"h");}body_33.__dustBody=!0;function body_34(chk,ctx){return chk.x(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,{"block":body_35},{});}body_34.__dustBody=!0;function body_35(chk,ctx){return chk.w("<p class=\"symbol-meta\">").x(ctx.getPath(false, ["symbol","meta","filename"]),ctx,{"block":body_36},{}).x(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,{"block":body_37},{}).w("</p>");}body_35.__dustBody=!0;function body_36(chk,ctx){return chk.w("<b>File:</b> ").f(ctx.getPath(false, ["symbol","meta","filename"]),ctx,"h").w("&nbsp;&nbsp;");}body_36.__dustBody=!0;function body_37(chk,ctx){return chk.w("<b>Line:</b> ").f(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,"h").w("&nbsp;&nbsp;");}body_37.__dustBody=!0;function body_38(chk,ctx){return chk.h("ne",ctx,{"block":body_39},{"key":ctx.getPath(false, ["symbol","hideconstructor"]),"type":"boolean","value":"true"},"h");}body_38.__dustBody=!0;function body_39(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(false, ["symbol","$constructor"]),"template":ctx.get(["template"], false)});}body_39.__dustBody=!0;function body_40(chk,ctx){return chk.s(ctx.getPath(false, ["symbol","$members"]),ctx,{"block":body_41},{});}body_40.__dustBody=!0;function body_41(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(true, []),"template":ctx.get(["template"], false)});}body_41.__dustBody=!0;return body_0}(dust));
/*!
 * Docma (Web) Core
 * https://github.com/onury/docma
 * @license MIT
 */
var DocmaWeb = (function () {
'use strict';

var Utils={};function getStr(e){return e&&""!==e.trim()?e:null}function cleanName(e){return(e||"").replace(/([^>]+>)?~?(.*)/,"$2").replace(/^(module\.)?exports\./,"")}function getMetaCodeName(e){return cleanName(Utils.notate(e,"meta.code.name")||"")}function identity(e){return e}function decodeHash(e){return decodeURIComponent(e).replace(/^#/,"")}Utils.type=function(e){return Object.prototype.toString.call(e).match(/\s(\w+)/i)[1].toLowerCase()},Utils.notate=function(e,t){if("object"==typeof e){var n,r=Array.isArray(t)?t:t.split("."),i=r[0];if(i)return n=e[i],1<r.length?(r.shift(),Utils.notate(n,r)):n}},Utils.getName=function(e){if(e.alias){var t=getMetaCodeName(e);if(t)return t.replace(/.*?[#.~:](\w+)$/i,"$1")}return e.name},Utils.getLongName=function(e){var t=cleanName(e.longname),n=getMetaCodeName(e)||t,r=cleanName(e.memberof||"");if(e.name===r&&Utils.isConstructor(e))return n;var i=e.alias?n:t;if(!r)return i;var l=new RegExp("^"+r+"[#.~:]"),o="instance"===e.scope?"#":".";return l.test(i)?i:r+o+i},Utils.getFullName=Utils.getLongName,Utils.getCodeName=function(e){return getMetaCodeName(e)||Utils.getLongName(e)},Utils.getSymbolByName=function(e,t){var n,r,i,l;if("object"===Utils.type(e)){var o=Object.keys(e);for(n=0;n<o.length;n++)if(i=e[o[n]].documentation,l=Utils.getSymbolByName(i,t))return l;return null}for(i=e,n=0;n<i.length;n++){if((r=i[n]).name===t||r.longname===t||Utils.getFullName(r)===t)return r;if(r.$members&&(l=Utils.getSymbolByName(r.$members,t)))return l}return null},Utils.getLevels=function(e){var t=("string"==typeof e?e:e.$longname)||"";return(t=cleanName(t))?((t||"").split(/[.#~]/)||[]).length:0},Utils.getParentName=function(e){var t;if("string"!=typeof e){if(e.memberof)return cleanName(e.memberof);t=cleanName(e.$longname)}else t=cleanName(e);return t&&/[.#~]/g.test(t)?t.replace(/[.#~][^.#~]*$/,""):""},Utils.getParent=function(e,t){var n="string"==typeof t?Utils.getSymbolByName(e,t):t;if(!n)return null;var r=n&&cleanName(n.memberof)||Utils.getParentName(t);return r?Utils.getSymbolByName(e,r):null},Utils.isDeprecated=function(e){return e.deprecated},Utils.isGlobal=function(e){return"global"===e.scope},Utils.isNamespace=function(e){return"namespace"===e.kind},Utils.isModule=function(e){return"module"===e.kind},Utils.isMixin=function(e){return"mixin"===e.kind},Utils.isClass=function(e){return"class"===e.kind&&"MethodDefinition"!==Utils.notate(e,"meta.code.type")},Utils.isConstant=function(e){return"constant"===e.kind},Utils.isConstructor=function(e){return"class"===e.kind&&"MethodDefinition"===Utils.notate(e,"meta.code.type")},Utils.isStaticMember=function(e){return"static"===e.scope},Utils.isStatic=Utils.isStaticMember,Utils.isInner=function(e){return"inner"===e.scope},Utils.isInstanceMember=function(e){return"instance"===e.scope},Utils.isInterface=function(e){return"interface"===e.scope},Utils.isMethod=function(e){var t=Utils.notate(e,"meta.code.type");return"function"===e.kind||"FunctionExpression"===t||"FunctionDeclaration"===t},Utils.isFunction=Utils.isMethod,Utils.isInstanceMethod=function(e){return Utils.isInstanceMember(e)&&Utils.isMethod(e)},Utils.isStaticMethod=function(e){return Utils.isStaticMember(e)&&Utils.isMethod(e)},Utils.isProperty=function(e){return"member"===e.kind&&!Utils.isMethod(e)},Utils.isInstanceProperty=function(e){return Utils.isInstanceMember(e)&&Utils.isProperty(e)},Utils.isStaticProperty=function(e){return Utils.isStaticMember(e)&&Utils.isProperty(e)},Utils.isTypeDef=function(e){return"typedef"===e.kind},Utils.isCustomType=Utils.isTypeDef,Utils.isCallback=function(e){var t=(e.type||{}).names||[];return"typedef"===e.kind&&0<=(e.comment||"").indexOf("@callback "+e.longname)&&1===t.length&&"function"===t[0]},Utils.isEnum=function(e){return Boolean(e.isEnum)},Utils.isEvent=function(e){return"event"===e.kind},Utils.isExternal=function(e){return"external"===e.kind},Utils.isGenerator=function(e){return e.generator&&"function"===e.kind},Utils.isReadOnly=function(e){return e.readonly},Utils.isPublic=function(e){return"string"!=typeof e.access||"public"===e.access},Utils.isPrivate=function(e){return"private"===e.access},Utils.isPackagePrivate=function(e){return"package"===e.access},Utils.isProtected=function(e){return"protected"===e.access},Utils.isUndocumented=function(e){return!e.comments},Utils.hasDescription=function(e){return Boolean(getStr(e.classdesc)||getStr(e.description))},Utils.trimLeft=function(e){return e.replace(/^[\s\n\r\-—]*/,"")},Utils.trimNewLines=function(e){return e.replace(/^[\r\n]+|[\r\n]+$/,"")},Utils.parseTicks=function(e){return e.replace(/(```\s*)([\s\S]*?)(\s*```)/g,function(e,t,n){return Utils.normalizeTabs(Utils._wrapEscapeCode(n,!0).replace(/`/g,"&#x60;"))}).replace(/(`)(.*?)(`)/g,function(e,t,n){return Utils._wrapEscapeCode(n)})},Utils.parseNewLines=function(e,r){return r=r||{},Utils._tokenize(e,function(e,t){if(t)return e;var n=e.split(/[\r\n]{2,}/);return n.length<=1&&r.keepIfSingle?e:n.map(function(e){return"<p>"+e+"</p>"}).join("")}).join("")},Utils.parseLinks=function(e,l){l=l||{};var t=e.replace(/\{@link +([^}]*?)\}/g,function(e,t){var n,r,i=t.split("|");return 1===i.length?n=r=i[0].trim():(n=i[0].trim(),r=i[1].trim()),'<a href="'+n+'"'+(l.target?' target="'+l.target+'"':"")+">"+r+"</a>"});return Utils.parseTicks(t)},Utils.parse=function(e,t){return t=t||{},e=Utils.trimLeft(e),e=Utils.parseNewLines(e,t),e=Utils.parseTicks(e),Utils.parseLinks(e,t)},Utils.normalizeTabs=function(e){var r,t=e.match(/^\s*/gm),n=1/0;if(t.forEach(function(e,t){e=e.replace(/\t/g,"  "),0<t&&(n=Math.min(e.length,n))}),n!==1/0){var i=new RegExp("^\\s{"+n+"}","g");e=e.replace(i,"")}return(e=e.replace(/^\s*/,"")).replace(/([\r\n]+)(\s+)/gm,function(e,t,n){return r=n.replace(/\t/g,"  "),t+(r=new Array(r.length-r.length%2+1).join(" "))})},Utils.getKeywords=function(e){if("string"==typeof e)return e.toLowerCase();var t=Utils.getFullName(e)+" "+e.longname+" "+e.name+" "+(e.alias||"")+" "+(e.memberOf||"")+" "+(e.$kind||"")+" "+(e.scope||"")+" "+(e.classdesc||"")+" "+(e.description||"")+" "+(e.filename||"")+" "+(e.readonly?"readonly":"")+(e.isEnum?"enum":"");return Utils.isConstructor(e)&&(t+=" constructor"),Utils.isMethod(e)&&(t+=" method"),Utils.isProperty(e)&&(t+=" property"),t.replace(/[><"'`\n\r]/g,"").toLowerCase()},Utils.getCodeFileInfo=function(e){return{filename:Utils.notate(e,"meta.filename"),lineno:Utils.notate(e,"meta.lineno"),path:Utils.notate(e,"meta.path")}},Utils.getSymbolLink=function(e,t){if("string"!=typeof t)return t.$docmaLink;var n=Utils.getSymbolByName(e,t);return n?n.$docmaLink:""},Utils._getAnchorLink=function(e,t,n){var r,i=n||{},l="";return"internal"!==i.linkType&&(r=Utils._getTypeExternalLink(t))&&(l=' target="_blank"'),r||"external"===i.linkType||(r=Utils.getSymbolLink(e,t)),r&&(t='<a href="'+r+'"'+l+">"+(i.displayText||t)+"</a>"),t},Utils.getTypes=function(t,e,n){var r=n||{},i="class"===e.kind?["class"]:Utils.notate(e,"type.names")||[];return i=i.map(function(e){return e=e.replace(/\.</g,"<"),r.links&&(e=Utils._getAnchorLink(t,e,{linkType:r.links})),e}).join('<span class="code-delim">|</span>'),e.isEnum?"enum&lt;"+i+"&gt;":i},Utils.getReturnTypes=function(n,e,t){var r=e.returns;if(!Array.isArray(r))return"void";var i,l=t||{},o=r.reduce(function(e,t){return i=Utils.notate(t,"type.names"),Array.isArray(i)?(l.links&&(i=i.map(function(e){return Utils._getAnchorLink(n,e,{linkType:l.links})})),e.concat(i)):e},[]);return 0<o.length?o.join('<span class="code-delim">|</span>'):"void"},Utils.getCodeTags=function(t,e,n){var r,i=n||{};return e.map(function(e){return r=Utils._wrapEscapeCode(e),i.links&&(r=Utils._getAnchorLink(t,e,{displayText:r,linkType:i.links})),r}).join(i.demileter||",")},Utils.getFormattedTypeList=function(r,e,t){if(!e||0===e.length)return"";var i=t||{},l='<span class="code-delim">'+(i.delimeter||"|")+"</span>",o="boolean"!=typeof i.descriptions||i.descriptions,a=i.descDelimeter||"&nbsp;&nbsp;—&nbsp;&nbsp;",s="",n=e.map(function(e){o&&(s=Utils.parse(e.description||"",{keepIfSingle:!0}))&&(s=a+s);var t,n=e.type.names;return(n=n.map(function(e){return t=Utils._wrapEscapeCode(e),i.links&&(t=Utils._getAnchorLink(r,e,{linkType:i.links,displayText:t})),t})).join(l)+s});return 1<n.length?"<ul>\n"+n.join("</li>\n<li>")+"\n</ul>":n},Utils.getEmittedEvents=function(t,e,n){if(!e||0===e.length)return"";var r,i,l,o=n||{},a=o.delimeter||", ";return(e||[]).map(function(e){return r=e.split(/\s*[\s-—]\s*/g),i=(r[0]||"").trim(),l=Utils._wrapEscapeCode(i),o.links&&(l=Utils._getAnchorLink(t,i,{linkType:o.links,displayText:l})),l}).join(a)},Utils._find=function(e,t){if(!e||!t)return null;var n,r,i=null;for(n=0;n<e.length;n++)if((r=e[n])&&"object"==typeof r){for(var l in t)if(void 0!==t[l]&&t.hasOwnProperty(l)){if(t[l]!==r[l]){i=null;break}i=r}if(i)break}return i},Utils._assign=function(e,t,n){var r;for(r in e=e||{},t)t.hasOwnProperty(r)&&(n?Object.defineProperty(e,r,{enumerable:!0,value:t[r]}):e[r]=t[r]);return e},Utils._values=function(e){if(Array.isArray(e))return e;var t,n=[];for(t in e)e.hasOwnProperty(t)&&n.push(e[t]);return n},Utils._wrapEscapeCode=function(e,t){return e="<code>"+(e=e.replace(/</g,"&lt;").replace(/>/g,"&gt;"))+"</code>",t?"<pre>"+e+"</pre>":e},Utils._tokenize=function(e,t){"function"!=typeof t&&(t=identity);if(e.indexOf("```")<0)return[t(e,!1)];var n,r="```".length,i="",l="",o=[],a=!1;for(n=0;n<e.length;n++)i+=e[n],l+=e[n],i.length>r&&(i=i.slice(-r)),"```"===i&&((a=!a)?(o.push(t(l.slice(0,-r),!1)),l=i):(o.push(t(l,!0)),l=""));return o},Utils._ensureSlash=function(e,t,n){return t?(e&&"/"!==t.slice(0,1)&&(t="/"+t),n&&"/"!==t.slice(-1)&&(t+="/"),t):e||n?"/":""},Utils.DOM={};var ATTR_BODY_STYLE="data-body-style";Utils.DOM.getOffset=function(e){var t="object"==typeof e?e:document.getElementById(e);if(t){var n=t.getBoundingClientRect();if(n.width||n.height||t.getClientRects().length){var r=document.documentElement;return{top:n.top+window.pageYOffset-r.clientTop,left:n.left+window.pageXOffset-r.clientLeft}}}},Utils.DOM.scrollTo=function(e){var t=document.documentElement||document.body;if(e=decodeHash(e||window.location.hash||"")){var n=document.getElementById(e);n&&(t.scrollTop=Utils.DOM.getOffset(n).top)}else t.scrollTop=0},Utils.DOM._createChild=function(e,t,n){n=n||{};var r=document.createElement(t||"div");return Object.keys(n).forEach(function(e){r[e]=n[e]}),e.appendChild(r),r},Utils.DOM._removePrevBodyStyles=function(){for(var e=document.getElementsByTagName("head")[0].querySelectorAll("["+ATTR_BODY_STYLE+"]");0<e.length;)e[0].parentNode.removeChild(e[0])},Utils.DOM._moveBodyStylesToHead=function(){var e,t,n=document.getElementsByTagName("head")[0],r=document.body.getElementsByTagName("style");for(e=0;e<r.length;e++)(t=r[e]).parentNode.removeChild(t),t.setAttribute(ATTR_BODY_STYLE,""),n.appendChild(t)};var _builtinURLs={globals:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/",statements:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/",operators:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/",functions:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/",web:"https://developer.mozilla.org/en-US/docs/Web/API/"},_builtins={globals:["Infinity","NaN","undefined","null","Object","Function","function","Boolean","boolean","Symbol","Error","EvalError","InternalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError","Number","number","Math","Date","String","string","RegExp","Array","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","Map","Set","WeakMap","WeakSet","ArrayBuffer","DataView","JSON","Promise","Generator","GeneratorFunction","Reflect","Proxy","TypedArray","Intl","Intl.Collator","Intl.DateTimeFormat","Intl.NumberFormat","WebAssembly","WebAssembly.Module","WebAssembly.Instance","WebAssembly.Memory","WebAssembly.Table","WebAssembly.CompileError","WebAssembly.LinkError","WebAssembly.RuntimeError"],statements:["function","function*","async function","class","debugger"],operators:["void","super","this"],functions:["arguments"],web:["AbstractWorker","AnalyserNode","AudioBuffer","AudioContext","AudioListener","AudioNode","BaseAudioContext","BeforeUnloadEvent","Blob","BlobEvent","BufferSource","ByteString","CSSMediaRule","CSSPageRule","CSSPrimitiveValue","CSSRule","CSSRuleList","CSSStyleDeclaration","CSSStyleRule","CSSStyleSheet","CSSSupportsRule","CSSValue","CSSValueList","CloseEvent","CompositionEvent","Console","Coordinates","Crypto","CryptoKey","CustomEvent","DOMException","DOMImplementation","Document","DocumentFragment","DocumentType","DoubleRange","DragEvent","Element","ErrorEvent","Event","EventListener","EventSource","EventTarget","File","FileList","FileReader","FileReaderSync","FormData","Geolocation","HTMLAnchorElement","HTMLAreaElement","HTMLAudioElement","HTMLBRElement","HTMLBaseElement","HTMLBodyElement","HTMLButtonElement","HTMLCanvasElement","HTMLCollection","HTMLDListElement","HTMLDataElement","HTMLDataListElement","HTMLDetailsElement","HTMLDivElement","HTMLDocument","HTMLElement","HTMLEmbedElement","HTMLFieldSetElement","HTMLFormControlsCollection","HTMLFormElement","HTMLHRElement","HTMLHeadElement","HTMLHeadingElement","HTMLHtmlElement","HTMLIFrameElement","HTMLImageElement","HTMLInputElement","HTMLKeygenElement","HTMLLIElement","HTMLLabelElement","HTMLLegendElement","HTMLLinkElement","HTMLMapElement","HTMLMediaElement","HTMLMetaElement","HTMLMeterElement","HTMLModElement","HTMLOListElement","HTMLObjectElement","HTMLOptGroupElement","HTMLOptionElement","HTMLOptionsCollection","HTMLOutputElement","HTMLParagraphElement","HTMLParamElement","HTMLPreElement","HTMLProgressElement","HTMLQuoteElement","HTMLScriptElement","HTMLSelectElement","HTMLSlotElement","HTMLSourceElement","HTMLSpanElement","HTMLStyleElement","HTMLTableCaptionElement","HTMLTableCellElement","HTMLTableColElement","HTMLTableDataCellElement","HTMLTableElement","HTMLTableHeaderCellElement","HTMLTableRowElement","HTMLTableSectionElement","HTMLTemplateElement","HTMLTextAreaElement","HTMLTimeElement","HTMLTitleElement","HTMLTrackElement","HTMLUListElement","HTMLUnknownElement","HTMLVideoElement","HashChangeEvent","History","ImageData","InputEvent","KeyboardEvent","LinkStyle","Location","LongRange","MediaDevices","MediaDeviceInfo","MediaError","MediaRecorder","MediaStream","MessageChannel","MessageEvent","MessagePort","MouseEvent","MutationObserver","MutationRecord","NamedNodeMap","Navigator","NavigatorGeolocation","Node","NodeIterator","NodeList","NonDocumentTypeChildNode","Notification","PageTransitionEvent","PointerEvent","PopStateEvent","Position","PositionError","PositionOptions","ProgressEvent","PromiseRejectionEvent","RTCCertificate","RTCConfiguration","RTCDTMFSender","RTCDTMFToneChangeEvent","RTCDataChannel","RTCPeerConnection","RTCPeerConnection","RTCRtpCodecParameters","RTCRtpContributingSource","RTCRtpReceiver","RTCRtpSender","RTCRtpSynchronizationSource","RTCRtpTransceiver","RTCRtpTransceiverDirection","RTCRtpTransceiverInit","RTCStatsReport","RadioNodeList","RandomSource","Range","RenderingContext","SVGAnimateElement","SVGAnimateMotionElement","SVGAnimateTransformElement","SVGAnimationElement","SVGCircleElement","SVGClipPathElement","SVGCursorElement","SVGElement","SVGEllipseElement","SVGEvent","SVGFilterElement","SVGGeometryElement","SVGGradientElement","SVGGraphicsElement","SVGImageElement","SVGLineElement","SVGLinearGradientElement","SVGMPathElement","SVGMaskElement","SVGMetadataElement","SVGPathElement","SVGPatternElement","SVGPolygonElement","SVGPolylineElement","SVGRadialGradientElement","SVGRect","SVGRectElement","SVGSVGElement","SVGScriptElement","SVGSetElement","SVGStopElement","SVGStyleElement","SVGSwitchElement","SVGSymbolElement","SVGTSpanElement","SVGTextContentElement","SVGTextElement","SVGTextPathElement","SVGTextPositioningElement","SVGTitleElement","SVGTransform","SVGTransformList","SVGTransformable","SVGUseElement","SVGViewElement","ShadowRoot","SharedWorker","Storage","StorageEvent","StyleSheet","StyleSheetList","Text","TextMetrics","TimeEvent","TimeRanges","Touch","TouchEvent","TouchList","Transferable","TreeWalker","UIEvent","URL","WebGLActiveInfo","WebGLBuffer","WebGLContextEvent","WebGLFramebuffer","WebGLProgram","WebGLRenderbuffer","WebGLRenderingContext","WebGLShader","WebGLTexture","WebGLUniformLocation","WebGLVertexArrayObject","WebSocket","WheelEvent","Window","Worker","WorkerGlobalScope","WorkerLocation","WorkerNavigator","XMLHttpRequest","XMLHttpRequestEventTarget","XMLSerializer","XPathExpression","XPathResult","XSLTProcessor"]},_cats=Object.keys(_builtins);Utils._getTypeExternalLink=function(e){var t,n;for(t=0;t<_cats.length;t++)if(n=_cats[t],0<=_builtins[n].indexOf(e))return _builtinURLs[n]+e.replace(/^([^.]*\.)/,"");return""};

function DocmaWeb(t){this._=t||{},this._.initialLoad=!1,this._.appEntranceRI=null,this._.emitter=new EventEmitter,Object.defineProperty(this,"app",{configurable:!1,get:function(){return this._.app||null}}),Object.defineProperty(this,"apis",{configurable:!1,get:function(){return this._.apis||{}}}),Object.defineProperty(this,"routes",{configurable:!1,get:function(){return this._.routes||{}}}),Object.defineProperty(this,"template",{configurable:!1,get:function(){return this._.template||{}}}),Object.defineProperty(this,"location",{configurable:!1,get:function(){var t=Utils._ensureSlash(!0,window.location.pathname,!0),e=Utils._ensureSlash(!0,docma.app.base,!0),o=t;return t.slice(0,e.length)===e&&(o=t.slice(e.length-1,t.length)),{host:window.location.host,hostname:window.location.hostname,origin:window.location.origin,port:window.location.port,protocol:(window.location.protocol||"").replace(/:$/,""),entrance:Utils._ensureSlash(!0,docma.app.entrance,!1),base:e,hash:(window.location.hash||"").replace(/^#/,""),query:(window.location.search||"").replace(/^\?/,""),href:window.location.href,fullpath:t,pathname:o,path:o+(window.location.search||""),getQuery:function(t,e){"?"===(e=void 0===e?window.location.search||"":e).slice(0,1)&&(e=e.slice(1)),t=t.replace(/[[\]]/g,"\\$&");var o=new RegExp("&?"+t+"(=([^&#]*)|&|#|$)").exec(e);return o&&o[2]?decodeURIComponent(o[2].replace(/\+/g," ")):""}}}}),Object.defineProperty(this,"currentRoute",{configurable:!1,get:function(){return this._.currentRoute||null}}),Object.defineProperty(this,"documentation",{configurable:!1,get:function(){return this._.documentation||[]}}),Object.defineProperty(this,"symbols",{configurable:!1,get:function(){return this._.symbols||[]}})}DocmaWeb.prototype._trigger=function(t,e){this.info("Event:",t,e?e[0]:""),this._.emitter.trigger(t,e)},DocmaWeb.Event={Ready:"ready",Render:"render",Route:"route",Navigate:"navigate"},DocmaWeb.prototype.on=function(t,e){return this._.emitter.on.apply(this._.emitter,arguments),docma},DocmaWeb.prototype.once=function(){return this._.emitter.once.apply(this._.emitter,arguments),this},DocmaWeb.prototype.off=function(){return this._.emitter.off.apply(this._.emitter,arguments),this},DocmaWeb.prototype.addListener=DocmaWeb.prototype.on,DocmaWeb.prototype.addListenerOnce=DocmaWeb.prototype.once,DocmaWeb.prototype.removeListener=DocmaWeb.prototype.off,DocmaWeb.prototype.log=function(){docma._.logsEnabled&&console.log.apply(console,arguments)},DocmaWeb.prototype.info=function(){docma._.logsEnabled&&console.info.apply(console,arguments)},DocmaWeb.prototype.warn=function(){docma._.logsEnabled&&console.warn.apply(console,arguments)},DocmaWeb.prototype.error=function(){docma._.logsEnabled&&console.error.apply(console,arguments)},DocmaWeb.prototype.getDocmaElem=function(){var t=document.getElementById(this._.elementID);return t||(t=Utils.DOM.createChild(document.body,"div",{id:this._.elementID})),t},DocmaWeb.prototype.getContentElem=function(){var t=document.getElementById(this._.contentElementID);if(!t)throw new Error("Partial "+this._.partials.content+' should have an element with id="'+this._.contentElementID+'".');return t},DocmaWeb.prototype.loadContent=function(t){this.getContentElem().innerHTML=t,Utils.DOM._removePrevBodyStyles(),Utils.DOM._moveBodyStylesToHead(),Utils.DOM.scrollTo()},DocmaWeb.prototype._loadCompiledContent=function(t){this.getDocmaElem().innerHTML=t},DocmaWeb.prototype._fixAnchors=function(r){this.app.base&&setTimeout(function(){var t,e,o=document.querySelectorAll('a[href^="#"]');for(t=0;t<o.length;t++){var n=(e=o[t]).getAttribute("href");"#"===n.slice(0,1)&&1<n.length&&(n=window.location.pathname+(window.location.search||"")+n,e.setAttribute("href",n))}"function"==typeof r&&r()},50)},DocmaWeb.prototype.addFilter=function(t,e){if(this.filterExists(t))throw new Error('Filter "'+t+'" already exists.');return dust.filters[t]=e,this},DocmaWeb.prototype.removeFilter=function(t){return delete dust.filters[t],this},DocmaWeb.prototype.filterExists=function(t){return"function"==typeof dust.filters[t]},DocmaWeb.prototype.createRoute=function(t,e){return new DocmaWeb.Route(this,t,e)},DocmaWeb.prototype.createRouteFromID=function(t){if("string"!=typeof t)return this.warn("Route ID is not a string: "+t),new DocmaWeb.Route(this,null);var e=t.split(":");return new DocmaWeb.Route(this,e[1],e[0])},DocmaWeb.prototype.createRouteFromQuery=function(t){if(!t)return new DocmaWeb.Route(null);var e=t.split("&")[0].split("="),o=e[0].toLowerCase(),n=e[1];return new DocmaWeb.Route(this,n,o)},DocmaWeb.prototype._render=function(t,o){var n=this;dust.render(t,this,function(t,e){if(t)throw t;n._loadCompiledContent(e),"function"==typeof o&&o()})},DocmaWeb.prototype._triggerAfterRender=function(){this._trigger(DocmaWeb.Event.Render,[docma.currentRoute]),this._.initialLoad&&(this._trigger(DocmaWeb.Event.Ready),this._.initialLoad=!1)},DocmaWeb.prototype._render404=function(t,e){this._.currentRoute=this.createRoute(null);var o=this;this._render(this._.partials.notFound,function(){if(o._trigger(DocmaWeb.Event.Render,[null]),Utils.DOM.scrollTo(),"function"==typeof e)return e(404);throw new Error("Page or content not found for route: "+JSON.stringify(t))})},DocmaWeb.prototype.fetch=function(e,o){var n=new XMLHttpRequest,r=this;n.onreadystatechange=function(){if(4===n.readyState){var t=200===n.status?n.responseText:"";return r.log("XHR GET:",n.status,e),o(n.status,t)}},n.open("GET",e,!0),n.send()},DocmaWeb.prototype.render=function(o,n){if(!o||!o.exists())return this._render404(o,n);if(!o.isEqualTo(this.currentRoute)){this._.currentRoute=o;var r="function"==typeof n,i=this;o.type===DocmaWeb.Route.Type.API?this._render(this._.partials.api,function(){i._triggerAfterRender(),r&&n(200),i._fixAnchors(function(){Utils.DOM.scrollTo()})}):docma.fetch(o.contentPath,function(t,e){if(404===t)return i._render404(o,n);i._render(i._.partials.content,function(){i.loadContent(e),i._triggerAfterRender(),r&&n(t),i._fixAnchors()})})}},DocmaWeb.Utils=Utils;

var _arrRouteTypes;DocmaWeb.Route=function(t,e,o){if(this._docma=t,o&&!(_arrRouteTypes.indexOf(o)<0)){if(e)t.app.routing.caseSensitive||(e=e.toLowerCase());else{if(o!==DocmaWeb.Route.Type.API)return;e=t._.defaultApiName}var i=Utils._find(t.routes,{type:o,name:e});i&&Utils._assign(this,i)}},DocmaWeb.Route.Type={API:"api",CONTENT:"content"},_arrRouteTypes=Utils._values(DocmaWeb.Route.Type),DocmaWeb.Route.SourceType={JS:"js",MD:"md",HTML:"html"},DocmaWeb.Route.prototype.exists=function(){return Boolean(this.id)},DocmaWeb.Route.prototype.isEqualTo=function(t){return!!(t&&t.exists()&&this.exists())&&t.path===this.path},DocmaWeb.Route.prototype.isCurrent=function(){return this.isEqualTo(this._docma.currentRoute)},DocmaWeb.Route.prototype.apply=function(){return this.type===DocmaWeb.Route.Type.API?(this._docma._.documentation=this._docma.apis[this.name].documentation,this._docma._.symbols=this._docma.apis[this.name].symbols):(this._docma._.documentation=null,this._docma._.symbols=null),this._docma._trigger(DocmaWeb.Event.Route,[this.exists()?this:null]),this._docma.render(this),this},DocmaWeb.Route.prototype.toString=function(){return JSON.stringify(this)};

dust.filters=dust.filters||{},dust.filters.$pt=function(t){return DocmaWeb.Utils.parseTicks(t)},dust.filters.$pnl=function(t){return DocmaWeb.Utils.parseNewLines(t,{keepIfSingle:!0})},dust.filters.$pl=function(t){return DocmaWeb.Utils.parseLinks(t)},dust.filters.$tl=function(t){return DocmaWeb.Utils.trimLeft(t)},dust.filters.$tnl=function(t){return DocmaWeb.Utils.trimNewLines(t)},dust.filters.$p=function(t){return DocmaWeb.Utils.parse(t,{keepIfSingle:!0})},dust.filters.$nt=function(t){return DocmaWeb.Utils.normalizeTabs(t)},dust.filters.$desc=function(t){return DocmaWeb.Utils.parse(t.classdesc||t.description||"")},dust.filters.$def=function(t){return t.optional?String(t.defaultvalue):""};var reJSValues=/true|false|null|undefined|Infinity|NaN|\d+|Number\.\w+|Math\.(PI|E|LN(2|10)|LOG(2|10)E|SQRT(1_)?2)|\[.*?]|\{.*?}|new [a-zA-Z]+.*|\/.+\/[gmiu]*|Date\.(now\(\)|UTC\(.*)|window|document/;dust.filters.$val=function(t){var e=DocmaWeb.Utils.notate(t,"meta.code.value");if(void 0===e)return"";if("string"!=typeof e)return e;var n=DocmaWeb.Utils.notate(t,"type.names")||[];return!/['"`]/.test(e.slice(0,1))&&0<=n.indexOf("String")&&(1===n.length||-1===reJSValues.indexOf(e))?'"'+e+'"':e},dust.filters.$id=function(t){var e;"string"==typeof t?e=t:e=(DocmaWeb.Utils.isConstructor(t)?"new-":"")+t.$longname;return e.replace(/ /g,"-")};

DocmaWeb.version = "2.0.0";
return DocmaWeb;
})();
var docma = Object.freeze(new DocmaWeb({"version":"2.0.0","routes":[{"id":"api:","type":"api","name":"_def_","path":"/?api","contentPath":null,"sourceType":"js"},{"id":"api:ac","type":"api","name":"ac","path":"/?api=ac","contentPath":null,"sourceType":"js"},{"id":"content:changelog","type":"content","name":"changelog","path":"/?content=changelog","contentPath":"content/changelog.html","sourceType":"md"},{"id":"content:faq","type":"content","name":"faq","path":"/?content=faq","contentPath":"content/faq.html","sourceType":"md"},{"id":"content:guide","type":"content","name":"guide","path":"/?content=guide","contentPath":"content/guide.html","sourceType":"md"}],"apis":{"_def_":{"documentation":[],"symbols":[]},"ac":{"documentation":[{"comment":"/**\n *  @classdesc\n *  AccessControl class that implements RBAC (Role-Based Access Control) basics\n *  and ABAC (Attribute-Based Access Control) <i>resource</i> and <i>action</i>\n *  attributes.\n *\n *  Construct an `AccessControl` instance by either passing a grants object (or\n *  array fetched from database) or simply omit `grants` parameter if you are\n *  willing to build it programmatically.\n *\n *  <p><pre><code> const grants = {\n *      role1: {\n *          resource1: {\n *              \"create:any\": [ attrs ],\n *              \"read:own\": [ attrs ]\n *          },\n *          resource2: {\n *              \"create:any\": [ attrs ],\n *              \"update:own\": [ attrs ]\n *          }\n *      },\n *      role2: { ... }\n *  };\n *  const ac = new AccessControl(grants);</code></pre></p>\n *\n *  The `grants` object can also be an array, such as a flat list\n *  fetched from a database.\n *\n *  <p><pre><code> const flatList = [\n *      { role: 'role1', resource: 'resource1', action: 'create:any', attributes: [ attrs ] },\n *      { role: 'role1', resource: 'resource1', action: 'read:own', attributes: [ attrs ] },\n *      { role: 'role2', ... },\n *      ...\n *  ];</code></pre></p>\n *\n *  We turn this list into a hashtable for better performance. We aggregate\n *  the list by roles first, resources second. If possession (in action\n *  value or as a separate property) is omitted, it will default to `\"any\"`.\n *  e.g. `\"create\"` ➞ `\"create:any\"`\n *\n *  Below are equivalent:\n *  <p><pre><code> const grants = { role: 'role1', resource: 'resource1', action: 'create:any', attributes: [ attrs ] }\n *  const same = { role: 'role1', resource: 'resource1', action: 'create', possession: 'any', attributes: [ attrs ] }</code></pre></p>\n *\n *  So we can also initialize with this flat list of grants:\n *  <p><pre><code> const ac = new AccessControl(flatList);\n *  console.log(ac.getGrants());</code></pre></p>\n *\n *  @author   Onur Yıldırım <onur@cutepilot.com>\n *  @license  MIT\n *\n *  @class\n *  @global\n *\n *  @example\n *  const ac = new AccessControl(grants);\n *\n *  ac.grant('admin').createAny('profile');\n *\n *  // or you can chain methods\n *  ac.grant('admin')\n *      .createAny('profile')\n *      .readAny('profile', [\"*\", \"!password\"])\n *      .readAny('video')\n *      .deleteAny('video');\n *\n *  // since these permissions have common resources, there is an alternative way:\n *  ac.grant('admin')\n *      .resource('profile').createAny().readAny(null, [\"*\", \"!password\"])\n *      .resource('video').readAny()..deleteAny();\n *\n *  ac.grant('user')\n *      .readOwn('profile', [\"uid\", \"email\", \"address.*\", \"account.*\", \"!account.roles\"])\n *      .updateOwn('profile', [\"uid\", \"email\", \"password\", \"address.*\", \"!account.roles\"])\n *      .deleteOwn('profile')\n *      .createOwn('video', [\"*\", \"!geo.*\"])\n *      .readAny('video')\n *      .updateOwn('video', [\"*\", \"!geo.*\"])\n *      .deleteOwn('video');\n *\n *  // now we can check for granted or denied permissions\n *  const permission = ac.can('admin').readAny('profile');\n *  permission.granted // true\n *  permission.attributes // [\"*\", \"!password\"]\n *  permission.filter(data) // { uid, email, address, account }\n *  // deny permission\n *  ac.deny('admin').createAny('profile');\n *  ac.can('admin').createAny('profile').granted; // false\n *\n *  // To add a grant but deny access via attributes\n *  ac.grant('admin').createAny('profile', []); // no attributes allowed\n *  ac.can('admin').createAny('profile').granted; // false\n *\n *  // To prevent any more changes:\n *  ac.lock();\n */","meta":{"range":[3730,29633],"filename":"AccessControl.js","lineno":102,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{"id":"astnode100000033","name":"AccessControl","type":"CallExpression","value":""}},"classdesc":"AccessControl class that implements RBAC (Role-Based Access Control) basics\n and ABAC (Attribute-Based Access Control) <i>resource</i> and <i>action</i>\n attributes.\n\n Construct an `AccessControl` instance by either passing a grants object (or\n array fetched from database) or simply omit `grants` parameter if you are\n willing to build it programmatically.\n\n <p><pre><code> const grants = {\n     role1: {\n         resource1: {\n             \"create:any\": [ attrs ],\n             \"read:own\": [ attrs ]\n         },\n         resource2: {\n             \"create:any\": [ attrs ],\n             \"update:own\": [ attrs ]\n         }\n     },\n     role2: { ... }\n };\n const ac = new AccessControl(grants);</code></pre></p>\n\n The `grants` object can also be an array, such as a flat list\n fetched from a database.\n\n <p><pre><code> const flatList = [\n     { role: 'role1', resource: 'resource1', action: 'create:any', attributes: [ attrs ] },\n     { role: 'role1', resource: 'resource1', action: 'read:own', attributes: [ attrs ] },\n     { role: 'role2', ... },\n     ...\n ];</code></pre></p>\n\n We turn this list into a hashtable for better performance. We aggregate\n the list by roles first, resources second. If possession (in action\n value or as a separate property) is omitted, it will default to `\"any\"`.\n e.g. `\"create\"` ➞ `\"create:any\"`\n\n Below are equivalent:\n <p><pre><code> const grants = { role: 'role1', resource: 'resource1', action: 'create:any', attributes: [ attrs ] }\n const same = { role: 'role1', resource: 'resource1', action: 'create', possession: 'any', attributes: [ attrs ] }</code></pre></p>\n\n So we can also initialize with this flat list of grants:\n <p><pre><code> const ac = new AccessControl(flatList);\n console.log(ac.getGrants());</code></pre></p>","author":["Onur Yıldırım <onur@cutepilot.com>"],"license":"MIT","kind":"class","scope":"global","examples":["const ac = new AccessControl(grants);\n\n ac.grant('admin').createAny('profile');\n\n // or you can chain methods\n ac.grant('admin')\n     .createAny('profile')\n     .readAny('profile', [\"*\", \"!password\"])\n     .readAny('video')\n     .deleteAny('video');\n\n // since these permissions have common resources, there is an alternative way:\n ac.grant('admin')\n     .resource('profile').createAny().readAny(null, [\"*\", \"!password\"])\n     .resource('video').readAny()..deleteAny();\n\n ac.grant('user')\n     .readOwn('profile', [\"uid\", \"email\", \"address.*\", \"account.*\", \"!account.roles\"])\n     .updateOwn('profile', [\"uid\", \"email\", \"password\", \"address.*\", \"!account.roles\"])\n     .deleteOwn('profile')\n     .createOwn('video', [\"*\", \"!geo.*\"])\n     .readAny('video')\n     .updateOwn('video', [\"*\", \"!geo.*\"])\n     .deleteOwn('video');\n\n // now we can check for granted or denied permissions\n const permission = ac.can('admin').readAny('profile');\n permission.granted // true\n permission.attributes // [\"*\", \"!password\"]\n permission.filter(data) // { uid, email, address, account }\n // deny permission\n ac.deny('admin').createAny('profile');\n ac.can('admin').createAny('profile').granted; // false\n\n // To add a grant but deny access via attributes\n ac.grant('admin').createAny('profile', []); // no attributes allowed\n ac.can('admin').createAny('profile').granted; // false\n\n // To prevent any more changes:\n ac.lock();"],"name":"AccessControl","longname":"AccessControl","params":[],"$longname":"AccessControl","$kind":"class","$docmaLink":"?api=ac#AccessControl","$members":[{"comment":"/**\n *  Error class specific to `AccessControl`.\n *  @readonly\n *  @name AccessControl.Error\n *  @class\n *  @static\n */","meta":{"filename":"AccessControlError.js","lineno":13,"columnno":0,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{}},"description":"Error class specific to `AccessControl`.","readonly":true,"name":"Error","kind":"class","scope":"static","memberof":"AccessControl","longname":"AccessControl.Error","$longname":"AccessControl.Error","$kind":"class","$docmaLink":"?api=ac#AccessControl.Error"},{"comment":"/**\n     *  A utility method for deep cloning the given data object(s) while\n     *  filtering its properties by the given attribute (glob) notations.\n     *  Includes all matched properties and removes the rest.\n     *\n     *  Note that this should be used to manipulate data / arbitrary objects\n     *  with enumerable properties. It will not deal with preserving the\n     *  prototype-chain of the given object.\n     *\n     *  @param {Object|Array} data - A single or array of data objects\n     *      to be filtered.\n     *  @param {Array|String} attributes - The attribute glob notation(s)\n     *      to be processed. You can use wildcard stars (*) and negate\n     *      the notation by prepending a bang (!). A negated notation\n     *      will be excluded. Order of the globs do not matter, they will\n     *      be logically sorted. Loose globs will be processed first and\n     *      verbose globs or normal notations will be processed last.\n     *      e.g. `[ \"car.model\", \"*\", \"!car.*\" ]`\n     *      will be sorted as:\n     *      `[ \"*\", \"!car.*\", \"car.model\" ]`.\n     *      Passing no parameters or passing an empty string (`\"\"` or `[\"\"]`)\n     *      will empty the source object.\n     *\n     *  @returns {Object|Array} - Returns the filtered data object or array\n     *      of data objects.\n     *\n     *  @example\n     *  var assets = { notebook: \"Mac\", car: { brand: \"Ford\", model: \"Mustang\", year: 1970, color: \"red\" } };\n     *\n     *  var filtered = AccessControl.filter(assets, [ \"*\", \"!car.*\", \"car.model\" ]);\n     *  console.log(assets); // { notebook: \"Mac\", car: { model: \"Mustang\" } }\n     *\n     *  filtered = AccessControl.filter(assets, \"*\"); // or AccessControl.filter(assets, [\"*\"]);\n     *  console.log(assets); // { notebook: \"Mac\", car: { model: \"Mustang\" } }\n     *\n     *  filtered = AccessControl.filter(assets); // or AccessControl.filter(assets, \"\");\n     *  console.log(assets); // {}\n     */","meta":{"range":[28881,28997],"filename":"AccessControl.js","lineno":742,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{"id":"astnode100001006","name":"AccessControl.filter","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["data","attributes"]}},"description":"A utility method for deep cloning the given data object(s) while\n filtering its properties by the given attribute (glob) notations.\n Includes all matched properties and removes the rest.\n\n Note that this should be used to manipulate data / arbitrary objects\n with enumerable properties. It will not deal with preserving the\n prototype-chain of the given object.","params":[{"type":{"names":["Object","Array"]},"description":"A single or array of data objects\n     to be filtered.","name":"data"},{"type":{"names":["Array","String"]},"description":"The attribute glob notation(s)\n     to be processed. You can use wildcard stars (*) and negate\n     the notation by prepending a bang (!). A negated notation\n     will be excluded. Order of the globs do not matter, they will\n     be logically sorted. Loose globs will be processed first and\n     verbose globs or normal notations will be processed last.\n     e.g. `[ \"car.model\", \"*\", \"!car.*\" ]`\n     will be sorted as:\n     `[ \"*\", \"!car.*\", \"car.model\" ]`.\n     Passing no parameters or passing an empty string (`\"\"` or `[\"\"]`)\n     will empty the source object.","name":"attributes"}],"returns":[{"type":{"names":["Object","Array"]},"description":"- Returns the filtered data object or array\n     of data objects."}],"examples":["var assets = { notebook: \"Mac\", car: { brand: \"Ford\", model: \"Mustang\", year: 1970, color: \"red\" } };\n\n var filtered = AccessControl.filter(assets, [ \"*\", \"!car.*\", \"car.model\" ]);\n console.log(assets); // { notebook: \"Mac\", car: { model: \"Mustang\" } }\n\n filtered = AccessControl.filter(assets, \"*\"); // or AccessControl.filter(assets, [\"*\"]);\n console.log(assets); // { notebook: \"Mac\", car: { model: \"Mustang\" } }\n\n filtered = AccessControl.filter(assets); // or AccessControl.filter(assets, \"\");\n console.log(assets); // {}"],"name":"filter","longname":"<anonymous>~AccessControl.filter","kind":"function","memberof":"<anonymous>~AccessControl","scope":"static","$longname":"AccessControl.filter","$kind":"method","$docmaLink":"?api=ac#AccessControl.filter"},{"comment":"/**\n     *  Checks whether the given object is an instance of `AccessControl.Error`.\n     *  @name AccessControl.isACError\n     *  @alias AccessControl.isAccessControlError\n     *  @function\n     *\n     *  @param {Any} object\n     *         Object to be checked.\n     *\n     *  @returns {Boolean}\n     */","meta":{"filename":"AccessControl.js","lineno":745,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{}},"description":"Checks whether the given object is an instance of `AccessControl.Error`.","name":"isACError","alias":"AccessControl.isAccessControlError","kind":"function","params":[{"type":{"names":["Any"]},"description":"Object to be checked.","name":"object"}],"returns":[{"type":{"names":["Boolean"]}}],"memberof":"AccessControl","longname":"AccessControl.isACError","scope":"static","$longname":"AccessControl.isACError","$kind":"method","$docmaLink":"?api=ac#AccessControl.isACError"},{"comment":"/**\n *  Enumerates the possible actions of a role.\n *  An action defines the type of an operation that will be executed on a\n *  \"resource\" by a \"role\".\n *  This is known as CRUD (CREATE, READ, UPDATE, DELETE).\n *  @enum {String}\n *  @readonly\n *  @memberof! AccessControl\n */","meta":{"range":[358,1175],"filename":"Action.js","lineno":12,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/enums","code":{"id":"astnode100002857","name":"Action","type":"ObjectExpression","value":"{\"CREATE\":\"create\",\"READ\":\"read\",\"UPDATE\":\"update\",\"DELETE\":\"delete\"}"}},"description":"Enumerates the possible actions of a role.\n An action defines the type of an operation that will be executed on a\n \"resource\" by a \"role\".\n This is known as CRUD (CREATE, READ, UPDATE, DELETE).","kind":"member","isEnum":true,"type":{"names":["String"]},"readonly":true,"forceMemberof":true,"memberof":"AccessControl","name":"Action","longname":"AccessControl.Action","scope":"static","params":[],"properties":[{"comment":"/**\n     *  Specifies a CREATE action to be performed on a resource.\n     *  For example, an HTTP POST request or an INSERT database operation.\n     *  @type {String}\n     */","meta":{"range":[552,568],"filename":"Action.js","lineno":18,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/enums","code":{"id":"astnode100002860","name":"CREATE","type":"Literal","value":"create"}},"description":"Specifies a CREATE action to be performed on a resource.\n For example, an HTTP POST request or an INSERT database operation.","type":{"names":["String"]},"name":"CREATE","longname":"AccessControl.Action.CREATE","kind":"member","memberof":"AccessControl.Action","scope":"static","defaultvalue":"create"},{"comment":"/**\n     *  Specifies a DELETE action to be performed on a resource.\n     *  For example, an HTTP DELETE request or a database DELETE operation.\n     *  @type {String}\n     */","meta":{"range":[1157,1173],"filename":"Action.js","lineno":36,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/enums","code":{"id":"astnode100002866","name":"DELETE","type":"Literal","value":"delete"}},"description":"Specifies a DELETE action to be performed on a resource.\n For example, an HTTP DELETE request or a database DELETE operation.","type":{"names":["String"]},"name":"DELETE","longname":"AccessControl.Action.DELETE","kind":"member","memberof":"AccessControl.Action","scope":"static","defaultvalue":"delete"},{"comment":"/**\n     *  Specifies a READ action to be performed on a resource.\n     *  For example, an HTTP GET request or an database SELECT operation.\n     *  @type {String}\n     */","meta":{"range":[750,762],"filename":"Action.js","lineno":24,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/enums","code":{"id":"astnode100002862","name":"READ","type":"Literal","value":"read"}},"description":"Specifies a READ action to be performed on a resource.\n For example, an HTTP GET request or an database SELECT operation.","type":{"names":["String"]},"name":"READ","longname":"AccessControl.Action.READ","kind":"member","memberof":"AccessControl.Action","scope":"static","defaultvalue":"read"},{"comment":"/**\n     *  Specifies an UPDATE action to be performed on a resource.\n     *  For example, an HTTP PUT or POST request or an database UPDATE operation.\n     *  @type {String}\n     */","meta":{"range":[955,971],"filename":"Action.js","lineno":30,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/enums","code":{"id":"astnode100002864","name":"UPDATE","type":"Literal","value":"update"}},"description":"Specifies an UPDATE action to be performed on a resource.\n For example, an HTTP PUT or POST request or an database UPDATE operation.","type":{"names":["String"]},"name":"UPDATE","longname":"AccessControl.Action.UPDATE","kind":"member","memberof":"AccessControl.Action","scope":"static","defaultvalue":"update"}],"$longname":"AccessControl.Action","$kind":"enum","$docmaLink":"?api=ac#AccessControl.Action","$members":[{"comment":"/**\n     *  Specifies a CREATE action to be performed on a resource.\n     *  For example, an HTTP POST request or an INSERT database operation.\n     *  @type {String}\n     */","meta":{"range":[552,568],"filename":"Action.js","lineno":18,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/enums","code":{"id":"astnode100002860","name":"CREATE","type":"Literal","value":"create"}},"description":"Specifies a CREATE action to be performed on a resource.\n For example, an HTTP POST request or an INSERT database operation.","type":{"names":["String"]},"name":"CREATE","longname":"AccessControl.Action.CREATE","kind":"member","memberof":"AccessControl.Action","scope":"static","defaultvalue":"create","$longname":"AccessControl.Action.CREATE","$kind":"property","$docmaLink":"?api=ac#AccessControl.Action.CREATE"},{"comment":"/**\n     *  Specifies a DELETE action to be performed on a resource.\n     *  For example, an HTTP DELETE request or a database DELETE operation.\n     *  @type {String}\n     */","meta":{"range":[1157,1173],"filename":"Action.js","lineno":36,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/enums","code":{"id":"astnode100002866","name":"DELETE","type":"Literal","value":"delete"}},"description":"Specifies a DELETE action to be performed on a resource.\n For example, an HTTP DELETE request or a database DELETE operation.","type":{"names":["String"]},"name":"DELETE","longname":"AccessControl.Action.DELETE","kind":"member","memberof":"AccessControl.Action","scope":"static","defaultvalue":"delete","$longname":"AccessControl.Action.DELETE","$kind":"property","$docmaLink":"?api=ac#AccessControl.Action.DELETE"},{"comment":"/**\n     *  Specifies a READ action to be performed on a resource.\n     *  For example, an HTTP GET request or an database SELECT operation.\n     *  @type {String}\n     */","meta":{"range":[750,762],"filename":"Action.js","lineno":24,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/enums","code":{"id":"astnode100002862","name":"READ","type":"Literal","value":"read"}},"description":"Specifies a READ action to be performed on a resource.\n For example, an HTTP GET request or an database SELECT operation.","type":{"names":["String"]},"name":"READ","longname":"AccessControl.Action.READ","kind":"member","memberof":"AccessControl.Action","scope":"static","defaultvalue":"read","$longname":"AccessControl.Action.READ","$kind":"property","$docmaLink":"?api=ac#AccessControl.Action.READ"},{"comment":"/**\n     *  Specifies an UPDATE action to be performed on a resource.\n     *  For example, an HTTP PUT or POST request or an database UPDATE operation.\n     *  @type {String}\n     */","meta":{"range":[955,971],"filename":"Action.js","lineno":30,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/enums","code":{"id":"astnode100002864","name":"UPDATE","type":"Literal","value":"update"}},"description":"Specifies an UPDATE action to be performed on a resource.\n For example, an HTTP PUT or POST request or an database UPDATE operation.","type":{"names":["String"]},"name":"UPDATE","longname":"AccessControl.Action.UPDATE","kind":"member","memberof":"AccessControl.Action","scope":"static","defaultvalue":"update","$longname":"AccessControl.Action.UPDATE","$kind":"property","$docmaLink":"?api=ac#AccessControl.Action.UPDATE"}]},{"comment":"/**\n *  Enumerates the possible possessions of a resource, for an action.\n *  A possession defines whether the action is (or not) to be performed on \"own\"\n *  resource(s) of the current subject or \"any\" resources - including \"own\".\n *  @enum {String}\n *  @readonly\n *  @memberof! AccessControl\n */","meta":{"range":[379,778],"filename":"Possession.js","lineno":11,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/enums","code":{"id":"astnode100002987","name":"Possession","type":"ObjectExpression","value":"{\"OWN\":\"own\",\"ANY\":\"any\"}"}},"description":"Enumerates the possible possessions of a resource, for an action.\n A possession defines whether the action is (or not) to be performed on \"own\"\n resource(s) of the current subject or \"any\" resources - including \"own\".","kind":"member","isEnum":true,"type":{"names":["String"]},"readonly":true,"forceMemberof":true,"memberof":"AccessControl","name":"Possession","longname":"AccessControl.Possession","scope":"static","params":[],"properties":[{"comment":"/**\n     *  Indicates that the action is (or not) to be performed on <b>any</b>\n     *  resource(s); including <i>own</i> resource(s) of the current subject.\n     *  @type {String}\n     */","meta":{"range":[766,776],"filename":"Possession.js","lineno":23,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/enums","code":{"id":"astnode100002992","name":"ANY","type":"Literal","value":"any"}},"description":"Indicates that the action is (or not) to be performed on <b>any</b>\n resource(s); including <i>own</i> resource(s) of the current subject.","type":{"names":["String"]},"name":"ANY","longname":"AccessControl.Possession.ANY","kind":"member","memberof":"AccessControl.Possession","scope":"static","defaultvalue":"any"},{"comment":"/**\n     *  Indicates that the action is (or not) to be performed on <b>own</b>\n     *  resource(s) of the current subject.\n     *  @type {String}\n     */","meta":{"range":[557,567],"filename":"Possession.js","lineno":17,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/enums","code":{"id":"astnode100002990","name":"OWN","type":"Literal","value":"own"}},"description":"Indicates that the action is (or not) to be performed on <b>own</b>\n resource(s) of the current subject.","type":{"names":["String"]},"name":"OWN","longname":"AccessControl.Possession.OWN","kind":"member","memberof":"AccessControl.Possession","scope":"static","defaultvalue":"own"}],"$longname":"AccessControl.Possession","$kind":"enum","$docmaLink":"?api=ac#AccessControl.Possession","$members":[{"comment":"/**\n     *  Indicates that the action is (or not) to be performed on <b>any</b>\n     *  resource(s); including <i>own</i> resource(s) of the current subject.\n     *  @type {String}\n     */","meta":{"range":[766,776],"filename":"Possession.js","lineno":23,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/enums","code":{"id":"astnode100002992","name":"ANY","type":"Literal","value":"any"}},"description":"Indicates that the action is (or not) to be performed on <b>any</b>\n resource(s); including <i>own</i> resource(s) of the current subject.","type":{"names":["String"]},"name":"ANY","longname":"AccessControl.Possession.ANY","kind":"member","memberof":"AccessControl.Possession","scope":"static","defaultvalue":"any","$longname":"AccessControl.Possession.ANY","$kind":"property","$docmaLink":"?api=ac#AccessControl.Possession.ANY"},{"comment":"/**\n     *  Indicates that the action is (or not) to be performed on <b>own</b>\n     *  resource(s) of the current subject.\n     *  @type {String}\n     */","meta":{"range":[557,567],"filename":"Possession.js","lineno":17,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/enums","code":{"id":"astnode100002990","name":"OWN","type":"Literal","value":"own"}},"description":"Indicates that the action is (or not) to be performed on <b>own</b>\n resource(s) of the current subject.","type":{"names":["String"]},"name":"OWN","longname":"AccessControl.Possession.OWN","kind":"member","memberof":"AccessControl.Possession","scope":"static","defaultvalue":"own","$longname":"AccessControl.Possession.OWN","$kind":"property","$docmaLink":"?api=ac#AccessControl.Possession.OWN"}]},{"comment":"/**\n     *  Gets an instance of `Query` object. This is used to check whether the\n     *  defined access is allowed for the given role(s) and resource. This\n     *  object provides chainable methods to define and query the access\n     *  permissions to be checked.\n     *  @name AccessControl#can\n     *  @alias AccessControl#query\n     *  @function\n     *  @chainable\n     *\n     *  @param {string|Array|IQueryInfo} role - A single role (as a string), a\n     *  list of roles (as an array) or an\n     *  {@link ?api=ac#AccessControl~IQueryInfo|`IQueryInfo` object} that fully\n     *  or partially defines the access to be checked.\n     *\n     *  @returns {Query} - The returned object provides chainable methods to\n     *  define and query the access permissions to be checked. See\n     *  {@link ?api=ac#AccessControl~Query|`Query` inner class}.\n     *\n     *  @example\n     *  const ac = new AccessControl(grants);\n     *\n     *  ac.can('admin').createAny('profile');\n     *  // equivalent to:\n     *  ac.can().role('admin').createAny('profile');\n     *  // equivalent to:\n     *  ac.can().role('admin').resource('profile').createAny();\n     *\n     *  // To check for multiple roles:\n     *  ac.can(['admin', 'user']).createOwn('profile');\n     *  // Note: when multiple roles checked, acquired attributes are unioned (merged).\n     */","meta":{"filename":"AccessControl.js","lineno":407,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{}},"description":"Gets an instance of `Query` object. This is used to check whether the\n defined access is allowed for the given role(s) and resource. This\n object provides chainable methods to define and query the access\n permissions to be checked.","name":"can","alias":"AccessControl#query","kind":"function","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["string","Array","IQueryInfo"]},"description":"A single role (as a string), a\n list of roles (as an array) or an\n {@link ?api=ac#AccessControl~IQueryInfo|`IQueryInfo` object} that fully\n or partially defines the access to be checked.","name":"role"}],"returns":[{"type":{"names":["Query"]},"description":"- The returned object provides chainable methods to\n define and query the access permissions to be checked. See\n {@link ?api=ac#AccessControl~Query|`Query` inner class}."}],"examples":["const ac = new AccessControl(grants);\n\n ac.can('admin').createAny('profile');\n // equivalent to:\n ac.can().role('admin').createAny('profile');\n // equivalent to:\n ac.can().role('admin').resource('profile').createAny();\n\n // To check for multiple roles:\n ac.can(['admin', 'user']).createOwn('profile');\n // Note: when multiple roles checked, acquired attributes are unioned (merged)."],"memberof":"AccessControl","longname":"AccessControl#can","scope":"instance","$longname":"AccessControl#can","$kind":"method","$docmaLink":"?api=ac#AccessControl#can"},{"comment":"/**\n     *  Gets an instance of `Access` object. This is used to deny access to\n     *  specified resource(s) for the given role(s). Denying will only remove a\n     *  previously created grant. So if not granted before, you don't need to\n     *  deny an access.\n     *  @name AccessControl#deny\n     *  @alias AccessControl#reject\n     *  @function\n     *  @chainable\n     *\n     *  @param {string|Array<String>|IAccessInfo} role A single role (as a\n     *  string), a list of roles (as an array) or an\n     *  {@link ?api=ac#AccessControl~IAccessInfo|`IAccessInfo` object} that\n     *  fully or partially defines the access to be denied.\n     *\n     *  @return {Access} The returned object provides chainable properties to\n     *  build and define the access to be granted. See\n     *  {@link ?api=ac#AccessControl~Access|`Access` inner class}.\n     *\n     *  @throws {AccessControlError} - If `role` is explicitly set to an invalid value.\n     *  @throws {AccessControlError} - If called after `.lock()` is called.\n     *\n     *  @example\n     *  const ac = new AccessControl();\n     *\n     *  ac.deny('admin').createAny('profile');\n     *  // equivalent to:\n     *  ac.deny().role('admin').createAny('profile');\n     *  // equivalent to:\n     *  ac.deny().role('admin').resource('profile').createAny();\n     *  // equivalent to:\n     *  ac.deny({\n     *      role: 'admin',\n     *      resource: 'profile',\n     *  }).createAny();\n     *  // equivalent to:\n     *  ac.deny({\n     *      role: 'admin',\n     *      resource: 'profile',\n     *      action: 'create:any'\n     *  });\n     *  // equivalent to:\n     *  ac.deny({\n     *      role: 'admin',\n     *      resource: 'profile',\n     *      action: 'create',\n     *      possession: 'any' // omitting this will default to 'any'\n     *  });\n     *\n     *  // To deny same resource for multiple roles:\n     *  ac.deny(['admin', 'user']).createOwn('profile');\n     */","meta":{"filename":"AccessControl.js","lineno":557,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{}},"description":"Gets an instance of `Access` object. This is used to deny access to\n specified resource(s) for the given role(s). Denying will only remove a\n previously created grant. So if not granted before, you don't need to\n deny an access.","name":"deny","alias":"AccessControl#reject","kind":"function","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["string","Array.<String>","IAccessInfo"]},"description":"A single role (as a\n string), a list of roles (as an array) or an\n {@link ?api=ac#AccessControl~IAccessInfo|`IAccessInfo` object} that\n fully or partially defines the access to be denied.","name":"role"}],"returns":[{"type":{"names":["Access"]},"description":"The returned object provides chainable properties to\n build and define the access to be granted. See\n {@link ?api=ac#AccessControl~Access|`Access` inner class}."}],"exceptions":[{"type":{"names":["AccessControlError"]},"description":"- If `role` is explicitly set to an invalid value."},{"type":{"names":["AccessControlError"]},"description":"- If called after `.lock()` is called."}],"examples":["const ac = new AccessControl();\n\n ac.deny('admin').createAny('profile');\n // equivalent to:\n ac.deny().role('admin').createAny('profile');\n // equivalent to:\n ac.deny().role('admin').resource('profile').createAny();\n // equivalent to:\n ac.deny({\n     role: 'admin',\n     resource: 'profile',\n }).createAny();\n // equivalent to:\n ac.deny({\n     role: 'admin',\n     resource: 'profile',\n     action: 'create:any'\n });\n // equivalent to:\n ac.deny({\n     role: 'admin',\n     resource: 'profile',\n     action: 'create',\n     possession: 'any' // omitting this will default to 'any'\n });\n\n // To deny same resource for multiple roles:\n ac.deny(['admin', 'user']).createOwn('profile');"],"memberof":"AccessControl","longname":"AccessControl#deny","scope":"instance","$longname":"AccessControl#deny","$kind":"method","$docmaLink":"?api=ac#AccessControl#deny"},{"comment":"/**\n     *  Extends the given role(s) with privileges of one or more other roles.\n     *  @chainable\n     *\n     *  @param {string|Array<String>} roles Role(s) to be extended. Single role\n     *         as a `String` or multiple roles as an `Array`. Note that if a\n     *         role does not exist, it will be automatically created.\n     *\n     *  @param {string|Array<String>} extenderRoles Role(s) to inherit from.\n     *         Single role as a `String` or multiple roles as an `Array`. Note\n     *         that if a extender role does not exist, it will throw.\n     *\n     *  @returns {AccessControl} - `AccessControl` instance for chaining.\n     *\n     *  @throws {AccessControlError} - If a role is extended by itself or a\n     *  non-existent role. Or if called after `.lock()` is called.\n     */","meta":{"range":[9904,10165],"filename":"AccessControl.js","lineno":269,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{"id":"astnode100000191","name":"AccessControl.prototype.extendRole","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["roles","extenderRoles"]}},"description":"Extends the given role(s) with privileges of one or more other roles.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["string","Array.<String>"]},"description":"Role(s) to be extended. Single role\n        as a `String` or multiple roles as an `Array`. Note that if a\n        role does not exist, it will be automatically created.","name":"roles"},{"type":{"names":["string","Array.<String>"]},"description":"Role(s) to inherit from.\n        Single role as a `String` or multiple roles as an `Array`. Note\n        that if a extender role does not exist, it will throw.","name":"extenderRoles"}],"returns":[{"type":{"names":["AccessControl"]},"description":"- `AccessControl` instance for chaining."}],"exceptions":[{"type":{"names":["AccessControlError"]},"description":"- If a role is extended by itself or a\n non-existent role. Or if called after `.lock()` is called."}],"name":"extendRole","longname":"<anonymous>~AccessControl#extendRole","kind":"function","memberof":"<anonymous>~AccessControl","scope":"instance","$longname":"AccessControl#extendRole","$kind":"method","$docmaLink":"?api=ac#AccessControl#extendRole"},{"comment":"/**\n     *  Gets the internal grants object that stores all current grants.\n     *\n     *  @return {Object} - Hash-map of grants.\n     *\n     *  @example\n     *  ac.grant('admin')\n     *      .createAny(['profile', 'video'])\n     *      .deleteAny(['profile', 'video'])\n     *      .readAny(['video'])\n     *      .readAny('profile', ['*', '!password'])\n     *      .grant('user')\n     *      .readAny(['profile', 'video'], ['*', '!id', '!password'])\n     *      .createOwn(['profile', 'video'])\n     *      .deleteOwn(['video']);\n     *  // logging underlying grants model\n     *  console.log(ac.getGrants());\n     *  // outputs:\n     *  {\n     *    \"admin\": {\n     *      \"profile\": {\n     *        \"create:any\": [\"*\"],\n     *        \"delete:any\": [\"*\"],\n     *        \"read:any\": [\"*\", \"!password\"]\n     *      },\n     *      \"video\": {\n     *        \"create:any\": [\"*\"],\n     *        \"delete:any\": [\"*\"],\n     *        \"read:any\": [\"*\"]\n     *      }\n     *    },\n     *    \"user\": {\n     *      \"profile\": {\n     *        \"read:any\": [\"*\", \"!id\", \"!password\"],\n     *        \"create:own\": [\"*\"]\n     *      },\n     *      \"video\": {\n     *        \"read:any\": [\"*\", \"!id\", \"!password\"],\n     *        \"create:own\": [\"*\"],\n     *        \"delete:own\": [\"*\"]\n     *      }\n     *    }\n     *  }\n     */","meta":{"range":[6288,6372],"filename":"AccessControl.js","lineno":183,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{"id":"astnode100000094","name":"AccessControl.prototype.getGrants","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":[]}},"description":"Gets the internal grants object that stores all current grants.","returns":[{"type":{"names":["Object"]},"description":"- Hash-map of grants."}],"examples":["ac.grant('admin')\n     .createAny(['profile', 'video'])\n     .deleteAny(['profile', 'video'])\n     .readAny(['video'])\n     .readAny('profile', ['*', '!password'])\n     .grant('user')\n     .readAny(['profile', 'video'], ['*', '!id', '!password'])\n     .createOwn(['profile', 'video'])\n     .deleteOwn(['video']);\n // logging underlying grants model\n console.log(ac.getGrants());\n // outputs:\n {\n   \"admin\": {\n     \"profile\": {\n       \"create:any\": [\"*\"],\n       \"delete:any\": [\"*\"],\n       \"read:any\": [\"*\", \"!password\"]\n     },\n     \"video\": {\n       \"create:any\": [\"*\"],\n       \"delete:any\": [\"*\"],\n       \"read:any\": [\"*\"]\n     }\n   },\n   \"user\": {\n     \"profile\": {\n       \"read:any\": [\"*\", \"!id\", \"!password\"],\n       \"create:own\": [\"*\"]\n     },\n     \"video\": {\n       \"read:any\": [\"*\", \"!id\", \"!password\"],\n       \"create:own\": [\"*\"],\n       \"delete:own\": [\"*\"]\n     }\n   }\n }"],"name":"getGrants","longname":"<anonymous>~AccessControl#getGrants","kind":"function","memberof":"<anonymous>~AccessControl","scope":"instance","$longname":"AccessControl#getGrants","$kind":"method","$docmaLink":"?api=ac#AccessControl#getGrants"},{"comment":"/**\n     *  Gets the list of inherited roles by the given role.\n     *  @name AccessControl#getInheritedRolesOf\n     *  @alias AccessControl#getExtendedRolesOf\n     *  @function\n     *\n     *  @param {string} role - Target role name.\n     *\n     *  @returns {Array<String>}\n     */","meta":{"filename":"AccessControl.js","lineno":344,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{}},"description":"Gets the list of inherited roles by the given role.","name":"getInheritedRolesOf","alias":"AccessControl#getExtendedRolesOf","kind":"function","params":[{"type":{"names":["string"]},"description":"Target role name.","name":"role"}],"returns":[{"type":{"names":["Array.<String>"]}}],"memberof":"AccessControl","longname":"AccessControl#getInheritedRolesOf","scope":"instance","$longname":"AccessControl#getInheritedRolesOf","$kind":"method","$docmaLink":"?api=ac#AccessControl#getInheritedRolesOf"},{"comment":"/**\n     *  Gets all the unique resources that are granted access for at\n     *  least one role.\n     *\n     *  @returns {Array<String>}\n     */","meta":{"range":[13965,14080],"filename":"AccessControl.js","lineno":372,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{"id":"astnode100000460","name":"AccessControl.prototype.getResources","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":[]}},"description":"Gets all the unique resources that are granted access for at\n least one role.","returns":[{"type":{"names":["Array.<String>"]}}],"name":"getResources","longname":"<anonymous>~AccessControl#getResources","kind":"function","memberof":"<anonymous>~AccessControl","scope":"instance","$longname":"AccessControl#getResources","$kind":"method","$docmaLink":"?api=ac#AccessControl#getResources"},{"comment":"/**\n     *  Gets all the unique roles that have at least one access information.\n     *\n     *  @returns {Array<String>}\n     *\n     *  @example\n     *  ac.grant('admin, user').createAny('video').grant('user').readOwn('profile');\n     *  console.log(ac.getRoles()); // [\"admin\", \"user\"]\n     */","meta":{"range":[13041,13137],"filename":"AccessControl.js","lineno":341,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{"id":"astnode100000397","name":"AccessControl.prototype.getRoles","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":[]}},"description":"Gets all the unique roles that have at least one access information.","returns":[{"type":{"names":["Array.<String>"]}}],"examples":["ac.grant('admin, user').createAny('video').grant('user').readOwn('profile');\n console.log(ac.getRoles()); // [\"admin\", \"user\"]"],"name":"getRoles","longname":"<anonymous>~AccessControl#getRoles","kind":"function","memberof":"<anonymous>~AccessControl","scope":"instance","$longname":"AccessControl#getRoles","$kind":"method","$docmaLink":"?api=ac#AccessControl#getRoles"},{"comment":"/**\n     *  Gets an instance of `Grant` (inner) object. This is used to grant access\n     *  to specified resource(s) for the given role(s).\n     *  @name AccessControl#grant\n     *  @alias AccessControl#allow\n     *  @function\n     *  @chainable\n     *\n     *  @param {string|Array<String>|IAccessInfo} [role] A single role (as a\n     *  string), a list of roles (as an array) or an\n     *  {@link ?api=ac#AccessControl~IAccessInfo|`IAccessInfo` object} that\n     *  fully or partially defines the access to be granted. This can be omitted\n     *  and chained with `.role()` to define the role.\n     *\n     *  @return {Access} - The returned object provides chainable properties to\n     *  build and define the access to be granted. See the examples for details.\n     *  See {@link ?api=ac#AccessControl~Access|`Access` inner class}.\n     *\n     *  @throws {AccessControlError} - If `role` is explicitly set to an invalid value.\n     *  @throws {AccessControlError} - If called after `.lock()` is called.\n     *\n     *  @example\n     *  const ac = new AccessControl();\n     *  let attributes = ['*'];\n     *\n     *  ac.grant('admin').createAny('profile', attributes);\n     *  // equivalent to:\n     *  ac.grant().role('admin').createAny('profile', attributes);\n     *  // equivalent to:\n     *  ac.grant().role('admin').resource('profile').createAny(null, attributes);\n     *  // equivalent to:\n     *  ac.grant({\n     *      role: 'admin',\n     *      resource: 'profile',\n     *  }).createAny(null, attributes);\n     *  // equivalent to:\n     *  ac.grant({\n     *      role: 'admin',\n     *      resource: 'profile',\n     *      action: 'create:any',\n     *      attributes: attributes\n     *  });\n     *  // equivalent to:\n     *  ac.grant({\n     *      role: 'admin',\n     *      resource: 'profile',\n     *      action: 'create',\n     *      possession: 'any', // omitting this will default to 'any'\n     *      attributes: attributes\n     *  });\n     *\n     *  // To grant same resource and attributes for multiple roles:\n     *  ac.grant(['admin', 'user']).createOwn('profile', attributes);\n     *\n     *  // Note: when attributes is omitted, it will default to `['*']`\n     *  // which means all attributes (of the resource) are allowed.\n     */","meta":{"filename":"AccessControl.js","lineno":483,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{}},"description":"Gets an instance of `Grant` (inner) object. This is used to grant access\n to specified resource(s) for the given role(s).","name":"grant","alias":"AccessControl#allow","kind":"function","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["string","Array.<String>","IAccessInfo"]},"optional":true,"description":"A single role (as a\n string), a list of roles (as an array) or an\n {@link ?api=ac#AccessControl~IAccessInfo|`IAccessInfo` object} that\n fully or partially defines the access to be granted. This can be omitted\n and chained with `.role()` to define the role.","name":"role"}],"returns":[{"type":{"names":["Access"]},"description":"- The returned object provides chainable properties to\n build and define the access to be granted. See the examples for details.\n See {@link ?api=ac#AccessControl~Access|`Access` inner class}."}],"exceptions":[{"type":{"names":["AccessControlError"]},"description":"- If `role` is explicitly set to an invalid value."},{"type":{"names":["AccessControlError"]},"description":"- If called after `.lock()` is called."}],"examples":["const ac = new AccessControl();\n let attributes = ['*'];\n\n ac.grant('admin').createAny('profile', attributes);\n // equivalent to:\n ac.grant().role('admin').createAny('profile', attributes);\n // equivalent to:\n ac.grant().role('admin').resource('profile').createAny(null, attributes);\n // equivalent to:\n ac.grant({\n     role: 'admin',\n     resource: 'profile',\n }).createAny(null, attributes);\n // equivalent to:\n ac.grant({\n     role: 'admin',\n     resource: 'profile',\n     action: 'create:any',\n     attributes: attributes\n });\n // equivalent to:\n ac.grant({\n     role: 'admin',\n     resource: 'profile',\n     action: 'create',\n     possession: 'any', // omitting this will default to 'any'\n     attributes: attributes\n });\n\n // To grant same resource and attributes for multiple roles:\n ac.grant(['admin', 'user']).createOwn('profile', attributes);\n\n // Note: when attributes is omitted, it will default to `['*']`\n // which means all attributes (of the resource) are allowed."],"memberof":"AccessControl","longname":"AccessControl#grant","scope":"instance","$longname":"AccessControl#grant","$kind":"method","$docmaLink":"?api=ac#AccessControl#grant"},{"comment":"/**\n     *  Checks whether grants include the given resource or resources.\n     *\n     *  @param {string|string[]} resource - Resource to be checked. You can also pass an\n     *  array of strings to check multiple resources at once.\n     *\n     *  @returns {Boolean}\n     */","meta":{"range":[14907,15295],"filename":"AccessControl.js","lineno":398,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{"id":"astnode100000524","name":"AccessControl.prototype.hasResource","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["resource"]},"vars":{"resources":"<anonymous>~AccessControl#hasResource~resources","":null}},"description":"Checks whether grants include the given resource or resources.","params":[{"type":{"names":["string","Array.<string>"]},"description":"Resource to be checked. You can also pass an\n array of strings to check multiple resources at once.","name":"resource"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"hasResource","longname":"<anonymous>~AccessControl#hasResource","kind":"function","memberof":"<anonymous>~AccessControl","scope":"instance","$longname":"AccessControl#hasResource","$kind":"method","$docmaLink":"?api=ac#AccessControl#hasResource"},{"comment":"/**\n     *  Checks whether the grants include the given role or roles.\n     *\n     *  @param {string|string[]} role - Role to be checked. You can also pass an\n     *  array of strings to check multiple roles at once.\n     *\n     *  @returns {Boolean}\n     */","meta":{"range":[14349,14622],"filename":"AccessControl.js","lineno":383,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{"id":"astnode100000479","name":"AccessControl.prototype.hasRole","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["role"]},"vars":{"_this":"<anonymous>~AccessControl#hasRole~_this","":null}},"description":"Checks whether the grants include the given role or roles.","params":[{"type":{"names":["string","Array.<string>"]},"description":"Role to be checked. You can also pass an\n array of strings to check multiple roles at once.","name":"role"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"hasRole","longname":"<anonymous>~AccessControl#hasRole","kind":"function","memberof":"<anonymous>~AccessControl","scope":"instance","$longname":"AccessControl#hasRole","$kind":"method","$docmaLink":"?api=ac#AccessControl#hasRole"},{"comment":"/**\n     *  Freezes the underlying grants model and disables all functionality for\n     *  modifying it. This is useful when you want to restrict any changes. Any\n     *  attempts to modify (such as `#setGrants()`, `#reset()`, `#grant()`,\n     *  `#deny()`, etc) will throw after grants are locked. Note that <b>there\n     *  is no `unlock()` method</b>. It's like you lock the door and swallow the\n     *  key. ;)\n     *\n     *  Remember that this does not prevent the `AccessControl` instance from\n     *  being altered/replaced. Only the grants inner object is locked.\n     *\n     *  <b>A note about performance</b>: This uses recursive `Object.freeze()`.\n     *  In NodeJS & V8, enumeration performance is not impacted because of this.\n     *  In fact, it increases the performance because of V8 optimization.\n     *  @chainable\n     *\n     *  @returns {AccessControl} - `AccessControl` instance for chaining.\n     *\n     *  @example\n     *  ac.grant('admin').create('product');\n     *  ac.lock(); // called on the AccessControl instance.\n     *  // or\n     *  ac.grant('admin').create('product').lock(); // called on the chained Access instance.\n     *\n     *  // After this point, any attempt of modification will throw\n     *  ac.setGrants({}); // throws\n     *  ac.grant('user'); // throws..\n     *  // underlying grants model is not changed\n     */","meta":{"range":[8980,9087],"filename":"AccessControl.js","lineno":248,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{"id":"astnode100000172","name":"AccessControl.prototype.lock","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":[]}},"description":"Freezes the underlying grants model and disables all functionality for\n modifying it. This is useful when you want to restrict any changes. Any\n attempts to modify (such as `#setGrants()`, `#reset()`, `#grant()`,\n `#deny()`, etc) will throw after grants are locked. Note that <b>there\n is no `unlock()` method</b>. It's like you lock the door and swallow the\n key. ;)\n\n Remember that this does not prevent the `AccessControl` instance from\n being altered/replaced. Only the grants inner object is locked.\n\n <b>A note about performance</b>: This uses recursive `Object.freeze()`.\n In NodeJS & V8, enumeration performance is not impacted because of this.\n In fact, it increases the performance because of V8 optimization.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["AccessControl"]},"description":"- `AccessControl` instance for chaining."}],"examples":["ac.grant('admin').create('product');\n ac.lock(); // called on the AccessControl instance.\n // or\n ac.grant('admin').create('product').lock(); // called on the chained Access instance.\n\n // After this point, any attempt of modification will throw\n ac.setGrants({}); // throws\n ac.grant('user'); // throws..\n // underlying grants model is not changed"],"name":"lock","longname":"<anonymous>~AccessControl#lock","kind":"function","memberof":"<anonymous>~AccessControl","scope":"instance","$longname":"AccessControl#lock","$kind":"method","$docmaLink":"?api=ac#AccessControl#lock"},{"comment":"/**\n     *  Gets an instance of `Permission` object that checks and defines the\n     *  granted access permissions for the target resource and role. Normally\n     *  you would use `AccessControl#can()` method to check for permissions but\n     *  this is useful if you need to check at once by passing a `IQueryInfo`\n     *  object; instead of chaining methods (as in\n     *  `.can(<role>).<action>(<resource>)`).\n     *\n     *  @param {IQueryInfo} queryInfo - A fulfilled\n     *  {@link ?api=ac#AccessControl~IQueryInfo|`IQueryInfo` object}.\n     *\n     *  @returns {Permission} - An object that provides properties and methods\n     *  that defines the granted access permissions. See\n     *  {@link ?api=ac#AccessControl~Permission|`Permission` inner class}.\n     *\n     *  @example\n     *  const ac = new AccessControl(grants);\n     *  const permission = ac.permission({\n     *      role: \"user\",\n     *      action: \"update:own\",\n     *      resource: \"profile\"\n     *  });\n     *  permission.granted; // Boolean\n     *  permission.attributes; // Array e.g. [ 'username', 'password', 'company.*']\n     *  permission.filter(object); // { username, password, company: { name, address, ... } }\n     */","meta":{"range":[18374,18502],"filename":"AccessControl.js","lineno":480,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{"id":"astnode100000635","name":"AccessControl.prototype.permission","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["queryInfo"]}},"description":"Gets an instance of `Permission` object that checks and defines the\n granted access permissions for the target resource and role. Normally\n you would use `AccessControl#can()` method to check for permissions but\n this is useful if you need to check at once by passing a `IQueryInfo`\n object; instead of chaining methods (as in\n `.can(<role>).<action>(<resource>)`).","params":[{"type":{"names":["IQueryInfo"]},"description":"A fulfilled\n {@link ?api=ac#AccessControl~IQueryInfo|`IQueryInfo` object}.","name":"queryInfo"}],"returns":[{"type":{"names":["Permission"]},"description":"- An object that provides properties and methods\n that defines the granted access permissions. See\n {@link ?api=ac#AccessControl~Permission|`Permission` inner class}."}],"examples":["const ac = new AccessControl(grants);\n const permission = ac.permission({\n     role: \"user\",\n     action: \"update:own\",\n     resource: \"profile\"\n });\n permission.granted; // Boolean\n permission.attributes; // Array e.g. [ 'username', 'password', 'company.*']\n permission.filter(object); // { username, password, company: { name, address, ... } }"],"name":"permission","longname":"<anonymous>~AccessControl#permission","kind":"function","memberof":"<anonymous>~AccessControl","scope":"instance","$longname":"AccessControl#permission","$kind":"method","$docmaLink":"?api=ac#AccessControl#permission"},{"comment":"/**\n     *  Removes all the given resources for all roles, at once.\n     *  Pass the `roles` argument to remove access to resources for those\n     *  roles only.\n     *  @chainable\n     *\n     *  @param {string|Array<String>} resources - A single or array of resources to\n     *      be removed.\n     *  @param {string|Array<String>} [roles] - A single or array of roles to\n     *      be removed. If omitted, permissions for all roles to all given\n     *      resources will be removed.\n     *\n     *  @returns {AccessControl} - `AccessControl` instance for chaining.\n     *\n     *  @throws {AccessControlError} - If called after `.lock()` is called.\n     */","meta":{"range":[12352,12736],"filename":"AccessControl.js","lineno":324,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{"id":"astnode100000365","name":"AccessControl.prototype.removeResources","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["resources","roles"]}},"description":"Removes all the given resources for all roles, at once.\n Pass the `roles` argument to remove access to resources for those\n roles only.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["string","Array.<String>"]},"description":"A single or array of resources to\n     be removed.","name":"resources"},{"type":{"names":["string","Array.<String>"]},"optional":true,"description":"A single or array of roles to\n     be removed. If omitted, permissions for all roles to all given\n     resources will be removed.","name":"roles"}],"returns":[{"type":{"names":["AccessControl"]},"description":"- `AccessControl` instance for chaining."}],"exceptions":[{"type":{"names":["AccessControlError"]},"description":"- If called after `.lock()` is called."}],"name":"removeResources","longname":"<anonymous>~AccessControl#removeResources","kind":"function","memberof":"<anonymous>~AccessControl","scope":"instance","$longname":"AccessControl#removeResources","$kind":"method","$docmaLink":"?api=ac#AccessControl#removeResources"},{"comment":"/**\n     *  Removes all the given role(s) and their granted permissions, at once.\n     *  @chainable\n     *\n     *  @param {string|Array<String>} roles - An array of roles to be removed.\n     *      Also accepts a string that can be used to remove a single role.\n     *\n     *  @returns {AccessControl} - `AccessControl` instance for chaining.\n     *\n     *  @throws {AccessControlError} - If called after `.lock()` is called.\n     */","meta":{"range":[10610,11682],"filename":"AccessControl.js","lineno":286,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{"id":"astnode100000228","name":"AccessControl.prototype.removeRoles","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["roles"]},"vars":{"_this":"<anonymous>~AccessControl#removeRoles~_this","rolesToRemove":"<anonymous>~AccessControl#removeRoles~rolesToRemove","":null}},"description":"Removes all the given role(s) and their granted permissions, at once.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["string","Array.<String>"]},"description":"An array of roles to be removed.\n     Also accepts a string that can be used to remove a single role.","name":"roles"}],"returns":[{"type":{"names":["AccessControl"]},"description":"- `AccessControl` instance for chaining."}],"exceptions":[{"type":{"names":["AccessControlError"]},"description":"- If called after `.lock()` is called."}],"name":"removeRoles","longname":"<anonymous>~AccessControl#removeRoles","kind":"function","memberof":"<anonymous>~AccessControl","scope":"instance","$longname":"AccessControl#removeRoles","$kind":"method","$docmaLink":"?api=ac#AccessControl#removeRoles"},{"comment":"/**\n     *  Resets the internal grants object and removes all previous grants.\n     *  @chainable\n     *\n     *  @returns {AccessControl} - `AccessControl` instance for chaining.\n     *\n     *  @throws {AccessControlError} - If called after `.lock()` is called.\n     */","meta":{"range":[7419,7612],"filename":"AccessControl.js","lineno":213,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{"id":"astnode100000143","name":"AccessControl.prototype.reset","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":[]},"vars":{"this._grants":"<anonymous>~AccessControl#reset#_grants"}},"description":"Resets the internal grants object and removes all previous grants.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["AccessControl"]},"description":"- `AccessControl` instance for chaining."}],"exceptions":[{"type":{"names":["AccessControlError"]},"description":"- If called after `.lock()` is called."}],"name":"reset","longname":"<anonymous>~AccessControl#reset","kind":"function","memberof":"<anonymous>~AccessControl","scope":"instance","$longname":"AccessControl#reset","$kind":"method","$docmaLink":"?api=ac#AccessControl#reset"},{"comment":"/**\n     *  Sets all access grants at once, from an object or array. Note that this\n     *  will reset the object and remove all previous grants.\n     *  @chainable\n     *\n     *  @param {Object|Array} grantsObject - A list containing the access grant\n     *         definitions.\n     *\n     *  @returns {AccessControl} - `AccessControl` instance for chaining.\n     *\n     *  @throws {AccessControlError} - If called after `.lock()` is called or if\n     *  passed grants object fails inspection.\n     */","meta":{"range":[6886,7139],"filename":"AccessControl.js","lineno":199,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{"id":"astnode100000107","name":"AccessControl.prototype.setGrants","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["grantsObject"]},"vars":{"this._grants":"<anonymous>~AccessControl#setGrants#_grants"}},"description":"Sets all access grants at once, from an object or array. Note that this\n will reset the object and remove all previous grants.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Object","Array"]},"description":"A list containing the access grant\n        definitions.","name":"grantsObject"}],"returns":[{"type":{"names":["AccessControl"]},"description":"- `AccessControl` instance for chaining."}],"exceptions":[{"type":{"names":["AccessControlError"]},"description":"- If called after `.lock()` is called or if\n passed grants object fails inspection."}],"name":"setGrants","longname":"<anonymous>~AccessControl#setGrants","kind":"function","memberof":"<anonymous>~AccessControl","scope":"instance","$longname":"AccessControl#setGrants","$kind":"method","$docmaLink":"?api=ac#AccessControl#setGrants"},{"comment":"/**\n         *  Specifies whether the underlying grants object is frozen and all\n         *  functionality for modifying it is disabled.\n         *  @name AccessControl#isLocked\n         *  @type {Boolean}\n         */","meta":{"filename":"AccessControl.js","lineno":124,"columnno":8,"path":"/Users/oy/Developer/@onury/accesscontrol/lib","code":{}},"description":"Specifies whether the underlying grants object is frozen and all\n functionality for modifying it is disabled.","name":"isLocked","type":{"names":["Boolean"]},"memberof":"AccessControl","longname":"AccessControl#isLocked","scope":"instance","kind":"member","$longname":"AccessControl#isLocked","$kind":"property","$docmaLink":"?api=ac#AccessControl#isLocked"},{"comment":"/**\n *  Represents the inner `Access` class that helps build an access information\n *  to be granted or denied; and finally commits it to the underlying grants\n *  model. You can get a first instance of this class by calling\n *  `AccessControl#grant()` or `AccessControl#deny()` methods.\n *  @class\n *  @inner\n *  @memberof AccessControl\n */","meta":{"range":[526,19947],"filename":"Access.js","lineno":15,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100001092","name":"Access","type":"CallExpression","value":""}},"description":"Represents the inner `Access` class that helps build an access information\n to be granted or denied; and finally commits it to the underlying grants\n model. You can get a first instance of this class by calling\n `AccessControl#grant()` or `AccessControl#deny()` methods.","kind":"class","scope":"inner","memberof":"AccessControl","name":"Access","longname":"AccessControl~Access","params":[],"$longname":"AccessControl~Access","$kind":"class","$docmaLink":"?api=ac#AccessControl~Access","$members":[{"comment":"/**\n     *  Sets the array of allowed attributes for this `Access` instance.\n     *  @param {String|Array<String>} value\n     *         Attributes to be set.\n     *  @returns {Access}\n     *           Self instance of `Access`.\n     */","meta":{"range":[4484,4594],"filename":"Access.js","lineno":116,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100001324","name":"Access.prototype.attributes","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["value"]},"vars":{"this._.attributes":"AccessControl~Access#_.attributes"}},"description":"Sets the array of allowed attributes for this `Access` instance.","params":[{"type":{"names":["String","Array.<String>"]},"description":"Attributes to be set.","name":"value"}],"returns":[{"type":{"names":["Access"]},"description":"Self instance of `Access`."}],"name":"attributes","longname":"AccessControl~Access#attributes","kind":"function","memberof":"AccessControl~Access","scope":"instance","$longname":"AccessControl~Access#attributes","$kind":"method","$docmaLink":"?api=ac#AccessControl~Access#attributes"},{"comment":"/**\n     *  Sets the action to `\"create\"` and possession to `\"any\"` and commits the\n     *  current access instance to the underlying grant model.\n     *  @alias Access#create\n     *  @name AccessControl~Access#createAny\n     *  @function\n     *\n     *  @param {String|Array<String>} [resource]\n     *         Defines the target resource this access is granted or denied for.\n     *         This is only optional if the resource is previously defined.\n     *         If not defined and omitted, this will throw.\n     *  @param {String|Array<String>} [attributes]\n     *         Defines the resource attributes for which the access is granted\n     *         for. If access is denied previously by calling `.deny()` this\n     *         will default to an empty array (which means no attributes allowed).\n     *         Otherwise (if granted before via `.grant()`) this will default\n     *         to `[\"*\"]` (which means all attributes allowed.)\n     *\n     *  @throws {AccessControlError}\n     *          If the access instance to be committed has any invalid data.\n     *\n     *  @returns {Access}\n     *           Self instance of `Access` so that you can chain and define\n     *           another access instance to be committed.\n     */","meta":{"filename":"Access.js","lineno":219,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{}},"description":"Sets the action to `\"create\"` and possession to `\"any\"` and commits the\n current access instance to the underlying grant model.","alias":"Access#create","name":"createAny","kind":"function","params":[{"type":{"names":["String","Array.<String>"]},"optional":true,"description":"Defines the target resource this access is granted or denied for.\n        This is only optional if the resource is previously defined.\n        If not defined and omitted, this will throw.","name":"resource"},{"type":{"names":["String","Array.<String>"]},"optional":true,"description":"Defines the resource attributes for which the access is granted\n        for. If access is denied previously by calling `.deny()` this\n        will default to an empty array (which means no attributes allowed).\n        Otherwise (if granted before via `.grant()`) this will default\n        to `[\"*\"]` (which means all attributes allowed.)","name":"attributes"}],"exceptions":[{"type":{"names":["AccessControlError"]},"description":"If the access instance to be committed has any invalid data."}],"returns":[{"type":{"names":["Access"]},"description":"Self instance of `Access` so that you can chain and define\n          another access instance to be committed."}],"memberof":"AccessControl~Access","longname":"AccessControl~Access#createAny","scope":"instance","$longname":"AccessControl~Access#createAny","$kind":"method","$docmaLink":"?api=ac#AccessControl~Access#createAny"},{"comment":"/**\n     *  Sets the action to `\"create\"` and possession to `\"own\"` and commits the\n     *  current access instance to the underlying grant model.\n     *\n     *  @param {String|Array<String>} [resource]\n     *         Defines the target resource this access is granted or denied for.\n     *         This is only optional if the resource is previously defined.\n     *         If not defined and omitted, this will throw.\n     *  @param {String|Array<String>} [attributes]\n     *         Defines the resource attributes for which the access is granted\n     *         for. If access is denied previously by calling `.deny()` this\n     *         will default to an empty array (which means no attributes allowed).\n     *         Otherwise (if granted before via `.grant()`) this will default\n     *         to `[\"*\"]` (which means all attributes allowed.)\n     *\n     *  @throws {AccessControlError}\n     *          If the access instance to be committed has any invalid\n     *  data.\n     *\n     *  @returns {Access}\n     *           Self instance of `Access` so that you can chain and define\n     *           another access instance to be committed.\n     */","meta":{"range":[8204,8380],"filename":"Access.js","lineno":216,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100001456","name":"Access.prototype.createOwn","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["resource","attributes"]}},"description":"Sets the action to `\"create\"` and possession to `\"own\"` and commits the\n current access instance to the underlying grant model.","params":[{"type":{"names":["String","Array.<String>"]},"optional":true,"description":"Defines the target resource this access is granted or denied for.\n        This is only optional if the resource is previously defined.\n        If not defined and omitted, this will throw.","name":"resource"},{"type":{"names":["String","Array.<String>"]},"optional":true,"description":"Defines the resource attributes for which the access is granted\n        for. If access is denied previously by calling `.deny()` this\n        will default to an empty array (which means no attributes allowed).\n        Otherwise (if granted before via `.grant()`) this will default\n        to `[\"*\"]` (which means all attributes allowed.)","name":"attributes"}],"exceptions":[{"type":{"names":["AccessControlError"]},"description":"If the access instance to be committed has any invalid\n data."}],"returns":[{"type":{"names":["Access"]},"description":"Self instance of `Access` so that you can chain and define\n          another access instance to be committed."}],"name":"createOwn","longname":"AccessControl~Access#createOwn","kind":"function","memberof":"AccessControl~Access","scope":"instance","$longname":"AccessControl~Access#createOwn","$kind":"method","$docmaLink":"?api=ac#AccessControl~Access#createOwn"},{"comment":"/**\n     *  Sets the action to `\"delete\"` and possession to `\"any\"` and commits the\n     *  current access instance to the underlying grant model.\n     *  @alias Access#delete\n     *  @name AccessControl~Access#deleteAny\n     *  @function\n     *\n     *  @param {String|Array<String>} [resource]\n     *         Defines the target resource this access is granted or denied for.\n     *         This is only optional if the resource is previously defined.\n     *         If not defined and omitted, this will throw.\n     *  @param {String|Array<String>} [attributes]\n     *         Defines the resource attributes for which the access is granted\n     *         for. If access is denied previously by calling `.deny()` this\n     *         will default to an empty array (which means no attributes allowed).\n     *         Otherwise (if granted before via `.grant()`) this will default\n     *         to `[\"*\"]` (which means all attributes allowed.)\n     *\n     *  @throws {AccessControlError}\n     *          If the access instance to be committed has any invalid data.\n     *\n     *  @returns {Access}\n     *           Self instance of `Access` so that you can chain and define\n     *           another access instance to be committed.\n     */","meta":{"filename":"Access.js","lineno":399,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{}},"description":"Sets the action to `\"delete\"` and possession to `\"any\"` and commits the\n current access instance to the underlying grant model.","alias":"Access#delete","name":"deleteAny","kind":"function","params":[{"type":{"names":["String","Array.<String>"]},"optional":true,"description":"Defines the target resource this access is granted or denied for.\n        This is only optional if the resource is previously defined.\n        If not defined and omitted, this will throw.","name":"resource"},{"type":{"names":["String","Array.<String>"]},"optional":true,"description":"Defines the resource attributes for which the access is granted\n        for. If access is denied previously by calling `.deny()` this\n        will default to an empty array (which means no attributes allowed).\n        Otherwise (if granted before via `.grant()`) this will default\n        to `[\"*\"]` (which means all attributes allowed.)","name":"attributes"}],"exceptions":[{"type":{"names":["AccessControlError"]},"description":"If the access instance to be committed has any invalid data."}],"returns":[{"type":{"names":["Access"]},"description":"Self instance of `Access` so that you can chain and define\n          another access instance to be committed."}],"memberof":"AccessControl~Access","longname":"AccessControl~Access#deleteAny","scope":"instance","$longname":"AccessControl~Access#deleteAny","$kind":"method","$docmaLink":"?api=ac#AccessControl~Access#deleteAny"},{"comment":"/**\n     *  Sets the action to `\"delete\"` and possession to `\"own\"` and commits the\n     *  current access instance to the underlying grant model.\n     *\n     *  @param {String|Array<String>} [resource]\n     *         Defines the target resource this access is granted or denied for.\n     *         This is only optional if the resource is previously defined.\n     *         If not defined and omitted, this will throw.\n     *  @param {String|Array<String>} [attributes]\n     *         Defines the resource attributes for which the access is granted\n     *         for. If access is denied previously by calling `.deny()` this\n     *         will default to an empty array (which means no attributes allowed).\n     *         Otherwise (if granted before via `.grant()`) this will default\n     *         to `[\"*\"]` (which means all attributes allowed.)\n     *\n     *  @throws {AccessControlError}\n     *          If the access instance to be committed has any invalid data.\n     *\n     *  @returns {Access}\n     *           Self instance of `Access` so that you can chain and define\n     *           another access instance to be committed.\n     */","meta":{"range":[17020,17196],"filename":"Access.js","lineno":396,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100001678","name":"Access.prototype.deleteOwn","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["resource","attributes"]}},"description":"Sets the action to `\"delete\"` and possession to `\"own\"` and commits the\n current access instance to the underlying grant model.","params":[{"type":{"names":["String","Array.<String>"]},"optional":true,"description":"Defines the target resource this access is granted or denied for.\n        This is only optional if the resource is previously defined.\n        If not defined and omitted, this will throw.","name":"resource"},{"type":{"names":["String","Array.<String>"]},"optional":true,"description":"Defines the resource attributes for which the access is granted\n        for. If access is denied previously by calling `.deny()` this\n        will default to an empty array (which means no attributes allowed).\n        Otherwise (if granted before via `.grant()`) this will default\n        to `[\"*\"]` (which means all attributes allowed.)","name":"attributes"}],"exceptions":[{"type":{"names":["AccessControlError"]},"description":"If the access instance to be committed has any invalid data."}],"returns":[{"type":{"names":["Access"]},"description":"Self instance of `Access` so that you can chain and define\n          another access instance to be committed."}],"name":"deleteOwn","longname":"AccessControl~Access#deleteOwn","kind":"function","memberof":"AccessControl~Access","scope":"instance","$longname":"AccessControl~Access#deleteOwn","$kind":"method","$docmaLink":"?api=ac#AccessControl~Access#deleteOwn"},{"comment":"/**\n     *  Shorthand to switch to a new `Access` instance with a different\n     *  (or same) role within the method chain.\n     *\n     *  @param {String|Array<String>|IAccessInfo} [roleOrInfo]\n     *         Either a single or an array of roles or an\n     *         {@link ?api=ac#AccessControl~IAccessInfo|`IAccessInfo` object}.\n     *\n     *  @returns {Access}\n     *           A new `Access` instance.\n     *\n     *  @example\n     *  ac.grant('admin').createAny('video')\n     *    .deny('user').deleteAny('video');\n     */","meta":{"range":[6658,6783],"filename":"Access.js","lineno":182,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100001413","name":"Access.prototype.deny","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["roleOrInfo"]}},"description":"Shorthand to switch to a new `Access` instance with a different\n (or same) role within the method chain.","params":[{"type":{"names":["String","Array.<String>","IAccessInfo"]},"optional":true,"description":"Either a single or an array of roles or an\n        {@link ?api=ac#AccessControl~IAccessInfo|`IAccessInfo` object}.","name":"roleOrInfo"}],"returns":[{"type":{"names":["Access"]},"description":"A new `Access` instance."}],"examples":["ac.grant('admin').createAny('video')\n   .deny('user').deleteAny('video');"],"name":"deny","longname":"AccessControl~Access#deny","kind":"function","memberof":"AccessControl~Access","scope":"instance","$longname":"AccessControl~Access#deny","$kind":"method","$docmaLink":"?api=ac#AccessControl~Access#deny"},{"comment":"/**\n     *  Sets the roles to be extended for this `Access` instance.\n     *  @alias Access#inherit\n     *  @name AccessControl~Access#extend\n     *  @function\n     *\n     *  @param {String|Array<String>} roles\n     *         A single or array of roles.\n     *  @returns {Access}\n     *           Self instance of `Access`.\n     *\n     *  @example\n     *  ac.grant('user').createAny('video')\n     *    .grant('admin').extend('user');\n     *  const permission = ac.can('admin').createAny('video');\n     *  console.log(permission.granted); // true\n     */","meta":{"filename":"Access.js","lineno":120,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{}},"description":"Sets the roles to be extended for this `Access` instance.","alias":"Access#inherit","name":"extend","kind":"function","params":[{"type":{"names":["String","Array.<String>"]},"description":"A single or array of roles.","name":"roles"}],"returns":[{"type":{"names":["Access"]},"description":"Self instance of `Access`."}],"examples":["ac.grant('user').createAny('video')\n   .grant('admin').extend('user');\n const permission = ac.can('admin').createAny('video');\n console.log(permission.granted); // true"],"memberof":"AccessControl~Access","longname":"AccessControl~Access#extend","scope":"instance","$longname":"AccessControl~Access#extend","$kind":"method","$docmaLink":"?api=ac#AccessControl~Access#extend"},{"comment":"/**\n     *  Shorthand to switch to a new `Access` instance with a different role\n     *  within the method chain.\n     *\n     *  @param {String|Array<String>|IAccessInfo} [roleOrInfo]\n     *         Either a single or an array of roles or an\n     *         {@link ?api=ac#AccessControl~IAccessInfo|`IAccessInfo` object}.\n     *\n     *  @returns {Access}\n     *           A new `Access` instance.\n     *\n     *  @example\n     *  ac.grant('user').createOwn('video')\n     *    .grant('admin').updateAny('video');\n     */","meta":{"range":[5991,6121],"filename":"Access.js","lineno":164,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100001390","name":"Access.prototype.grant","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["roleOrInfo"]}},"description":"Shorthand to switch to a new `Access` instance with a different role\n within the method chain.","params":[{"type":{"names":["String","Array.<String>","IAccessInfo"]},"optional":true,"description":"Either a single or an array of roles or an\n        {@link ?api=ac#AccessControl~IAccessInfo|`IAccessInfo` object}.","name":"roleOrInfo"}],"returns":[{"type":{"names":["Access"]},"description":"A new `Access` instance."}],"examples":["ac.grant('user').createOwn('video')\n   .grant('admin').updateAny('video');"],"name":"grant","longname":"AccessControl~Access#grant","kind":"function","memberof":"AccessControl~Access","scope":"instance","$longname":"AccessControl~Access#grant","$kind":"method","$docmaLink":"?api=ac#AccessControl~Access#grant"},{"comment":"/**\n     *  Chainable, convenience shortcut for {@link ?api=ac#AccessControl#lock|`AccessControl#lock()`}.\n     *  @returns {Access}\n     */","meta":{"range":[6934,7038],"filename":"Access.js","lineno":189,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100001435","name":"Access.prototype.lock","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":[]}},"description":"Chainable, convenience shortcut for {@link ?api=ac#AccessControl#lock|`AccessControl#lock()`}.","returns":[{"type":{"names":["Access"]}}],"name":"lock","longname":"AccessControl~Access#lock","kind":"function","memberof":"AccessControl~Access","scope":"instance","$longname":"AccessControl~Access#lock","$kind":"method","$docmaLink":"?api=ac#AccessControl~Access#lock"},{"comment":"/**\n     *  Sets the action to `\"read\"` and possession to `\"any\"` and commits the\n     *  current access instance to the underlying grant model.\n     *  @alias Access#read\n     *  @name AccessControl~Access#readAny\n     *  @function\n     *\n     *  @param {String|Array<String>} [resource]\n     *         Defines the target resource this access is granted or denied for.\n     *         This is only optional if the resource is previously defined.\n     *         If not defined and omitted, this will throw.\n     *  @param {String|Array<String>} [attributes]\n     *         Defines the resource attributes for which the access is granted\n     *         for. If access is denied previously by calling `.deny()` this\n     *         will default to an empty array (which means no attributes allowed).\n     *         Otherwise (if granted before via `.grant()`) this will default\n     *         to `[\"*\"]` (which means all attributes allowed.)\n     *\n     *  @throws {AccessControlError}\n     *          If the access instance to be committed has any invalid data.\n     *\n     *  @returns {Access}\n     *           Self instance of `Access` so that you can chain and define\n     *           another access instance to be committed.\n     */","meta":{"filename":"Access.js","lineno":279,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{}},"description":"Sets the action to `\"read\"` and possession to `\"any\"` and commits the\n current access instance to the underlying grant model.","alias":"Access#read","name":"readAny","kind":"function","params":[{"type":{"names":["String","Array.<String>"]},"optional":true,"description":"Defines the target resource this access is granted or denied for.\n        This is only optional if the resource is previously defined.\n        If not defined and omitted, this will throw.","name":"resource"},{"type":{"names":["String","Array.<String>"]},"optional":true,"description":"Defines the resource attributes for which the access is granted\n        for. If access is denied previously by calling `.deny()` this\n        will default to an empty array (which means no attributes allowed).\n        Otherwise (if granted before via `.grant()`) this will default\n        to `[\"*\"]` (which means all attributes allowed.)","name":"attributes"}],"exceptions":[{"type":{"names":["AccessControlError"]},"description":"If the access instance to be committed has any invalid data."}],"returns":[{"type":{"names":["Access"]},"description":"Self instance of `Access` so that you can chain and define\n          another access instance to be committed."}],"memberof":"AccessControl~Access","longname":"AccessControl~Access#readAny","scope":"instance","$longname":"AccessControl~Access#readAny","$kind":"method","$docmaLink":"?api=ac#AccessControl~Access#readAny"},{"comment":"/**\n     *  Sets the action to `\"read\"` and possession to `\"own\"` and commits the\n     *  current access instance to the underlying grant model.\n     *\n     *  @param {String|Array<String>} [resource]\n     *         Defines the target resource this access is granted or denied for.\n     *         This is only optional if the resource is previously defined.\n     *         If not defined and omitted, this will throw.\n     *  @param {String|Array<String>} [attributes]\n     *         Defines the resource attributes for which the access is granted\n     *         for. If access is denied previously by calling `.deny()` this\n     *         will default to an empty array (which means no attributes allowed).\n     *         Otherwise (if granted before via `.grant()`) this will default\n     *         to `[\"*\"]` (which means all attributes allowed.)\n     *\n     *  @throws {AccessControlError}\n     *          If the access instance to be committed has any invalid data.\n     *\n     *  @returns {Access}\n     *           Self instance of `Access` so that you can chain and define\n     *           another access instance to be committed.\n     */","meta":{"range":[11148,11320],"filename":"Access.js","lineno":276,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100001530","name":"Access.prototype.readOwn","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["resource","attributes"]}},"description":"Sets the action to `\"read\"` and possession to `\"own\"` and commits the\n current access instance to the underlying grant model.","params":[{"type":{"names":["String","Array.<String>"]},"optional":true,"description":"Defines the target resource this access is granted or denied for.\n        This is only optional if the resource is previously defined.\n        If not defined and omitted, this will throw.","name":"resource"},{"type":{"names":["String","Array.<String>"]},"optional":true,"description":"Defines the resource attributes for which the access is granted\n        for. If access is denied previously by calling `.deny()` this\n        will default to an empty array (which means no attributes allowed).\n        Otherwise (if granted before via `.grant()`) this will default\n        to `[\"*\"]` (which means all attributes allowed.)","name":"attributes"}],"exceptions":[{"type":{"names":["AccessControlError"]},"description":"If the access instance to be committed has any invalid data."}],"returns":[{"type":{"names":["Access"]},"description":"Self instance of `Access` so that you can chain and define\n          another access instance to be committed."}],"name":"readOwn","longname":"AccessControl~Access#readOwn","kind":"function","memberof":"AccessControl~Access","scope":"instance","$longname":"AccessControl~Access#readOwn","$kind":"method","$docmaLink":"?api=ac#AccessControl~Access#readOwn"},{"comment":"/**\n     *  A chainer method that sets the resource for this `Access` instance.\n     *  @param {String|Array<String>} value\n     *         Target resource for this `Access` instance.\n     *  @returns {Access}\n     *           Self instance of `Access`.\n     */","meta":{"range":[4037,4238],"filename":"Access.js","lineno":103,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100001295","name":"Access.prototype.resource","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["value"]},"vars":{"this._.resource":"AccessControl~Access#_.resource"}},"description":"A chainer method that sets the resource for this `Access` instance.","params":[{"type":{"names":["String","Array.<String>"]},"description":"Target resource for this `Access` instance.","name":"value"}],"returns":[{"type":{"names":["Access"]},"description":"Self instance of `Access`."}],"name":"resource","longname":"AccessControl~Access#resource","kind":"function","memberof":"AccessControl~Access","scope":"instance","$longname":"AccessControl~Access#resource","$kind":"method","$docmaLink":"?api=ac#AccessControl~Access#resource"},{"comment":"/**\n     *  A chainer method that sets the role(s) for this `Access` instance.\n     *  @param {String|Array<String>} value\n     *         A single or array of roles.\n     *  @returns {Access}\n     *           Self instance of `Access`.\n     */","meta":{"range":[3467,3766],"filename":"Access.js","lineno":89,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100001264","name":"Access.prototype.role","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["value"]},"vars":{"this._.role":"AccessControl~Access#_.role"}},"description":"A chainer method that sets the role(s) for this `Access` instance.","params":[{"type":{"names":["String","Array.<String>"]},"description":"A single or array of roles.","name":"value"}],"returns":[{"type":{"names":["Access"]},"description":"Self instance of `Access`."}],"name":"role","longname":"AccessControl~Access#role","kind":"function","memberof":"AccessControl~Access","scope":"instance","$longname":"AccessControl~Access#role","$kind":"method","$docmaLink":"?api=ac#AccessControl~Access#role"},{"comment":"/**\n     *  Sets the action to `\"update\"` and possession to `\"any\"` and commits the\n     *  current access instance to the underlying grant model.\n     *  @alias Access#update\n     *  @name AccessControl~Access#updateAny\n     *  @function\n     *\n     *  @param {String|Array<String>} [resource]\n     *         Defines the target resource this access is granted or denied for.\n     *         This is only optional if the resource is previously defined.\n     *         If not defined and omitted, this will throw.\n     *  @param {String|Array<String>} [attributes]\n     *         Defines the resource attributes for which the access is granted\n     *         for. If access is denied previously by calling `.deny()` this\n     *         will default to an empty array (which means no attributes allowed).\n     *         Otherwise (if granted before via `.grant()`) this will default\n     *         to `[\"*\"]` (which means all attributes allowed.)\n     *\n     *  @throws {AccessControlError}\n     *          If the access instance to be committed has any invalid data.\n     *\n     *  @returns {Access}\n     *           Self instance of `Access` so that you can chain and define\n     *           another access instance to be committed.\n     */","meta":{"filename":"Access.js","lineno":339,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{}},"description":"Sets the action to `\"update\"` and possession to `\"any\"` and commits the\n current access instance to the underlying grant model.","alias":"Access#update","name":"updateAny","kind":"function","params":[{"type":{"names":["String","Array.<String>"]},"optional":true,"description":"Defines the target resource this access is granted or denied for.\n        This is only optional if the resource is previously defined.\n        If not defined and omitted, this will throw.","name":"resource"},{"type":{"names":["String","Array.<String>"]},"optional":true,"description":"Defines the resource attributes for which the access is granted\n        for. If access is denied previously by calling `.deny()` this\n        will default to an empty array (which means no attributes allowed).\n        Otherwise (if granted before via `.grant()`) this will default\n        to `[\"*\"]` (which means all attributes allowed.)","name":"attributes"}],"exceptions":[{"type":{"names":["AccessControlError"]},"description":"If the access instance to be committed has any invalid data."}],"returns":[{"type":{"names":["Access"]},"description":"Self instance of `Access` so that you can chain and define\n          another access instance to be committed."}],"memberof":"AccessControl~Access","longname":"AccessControl~Access#updateAny","scope":"instance","$longname":"AccessControl~Access#updateAny","$kind":"method","$docmaLink":"?api=ac#AccessControl~Access#updateAny"},{"comment":"/**\n     *  Sets the action to `\"update\"` and possession to `\"own\"` and commits the\n     *  current access instance to the underlying grant model.\n     *\n     *  @param {String|Array<String>} [resource]\n     *         Defines the target resource this access is granted or denied for.\n     *         This is only optional if the resource is previously defined.\n     *         If not defined and omitted, this will throw.\n     *  @param {String|Array<String>} [attributes]\n     *         Defines the resource attributes for which the access is granted\n     *         for. If access is denied previously by calling `.deny()` this\n     *         will default to an empty array (which means no attributes allowed).\n     *         Otherwise (if granted before via `.grant()`) this will default\n     *         to `[\"*\"]` (which means all attributes allowed.)\n     *\n     *  @throws {AccessControlError}\n     *          If the access instance to be committed has any invalid data.\n     *\n     *  @returns {Access}\n     *           Self instance of `Access` so that you can chain and define\n     *           another access instance to be committed.\n     */","meta":{"range":[14074,14250],"filename":"Access.js","lineno":336,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100001604","name":"Access.prototype.updateOwn","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["resource","attributes"]}},"description":"Sets the action to `\"update\"` and possession to `\"own\"` and commits the\n current access instance to the underlying grant model.","params":[{"type":{"names":["String","Array.<String>"]},"optional":true,"description":"Defines the target resource this access is granted or denied for.\n        This is only optional if the resource is previously defined.\n        If not defined and omitted, this will throw.","name":"resource"},{"type":{"names":["String","Array.<String>"]},"optional":true,"description":"Defines the resource attributes for which the access is granted\n        for. If access is denied previously by calling `.deny()` this\n        will default to an empty array (which means no attributes allowed).\n        Otherwise (if granted before via `.grant()`) this will default\n        to `[\"*\"]` (which means all attributes allowed.)","name":"attributes"}],"exceptions":[{"type":{"names":["AccessControlError"]},"description":"If the access instance to be committed has any invalid data."}],"returns":[{"type":{"names":["Access"]},"description":"Self instance of `Access` so that you can chain and define\n          another access instance to be committed."}],"name":"updateOwn","longname":"AccessControl~Access#updateOwn","kind":"function","memberof":"AccessControl~Access","scope":"instance","$longname":"AccessControl~Access#updateOwn","$kind":"method","$docmaLink":"?api=ac#AccessControl~Access#updateOwn"},{"comment":"/**\n         *  Specifies whether this access is initally denied.\n         *  @name AccessControl~Access#denied\n         *  @type {Boolean}\n         *  @readonly\n         */","meta":{"filename":"Access.js","lineno":67,"columnno":8,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{}},"description":"Specifies whether this access is initally denied.","name":"denied","type":{"names":["Boolean"]},"readonly":true,"memberof":"AccessControl~Access","longname":"AccessControl~Access#denied","scope":"instance","kind":"member","$longname":"AccessControl~Access#denied","$kind":"property","$docmaLink":"?api=ac#AccessControl~Access#denied"}]},{"comment":"/**\n *  Represents the inner `Permission` class that defines the granted or denied\n *  access permissions for the target resource and role.\n *\n *  You can check for a permission in two ways:\n *\n *  <ul>\n *  <li>\n *  You can first obtain a {@link ?api=ac#AccessControl~Query|`Query` instance}\n *  via {@link ?api=ac#AccessControl#can|`AccessControl#can`} which returns\n *  a `Permission` instance when an action method such as\n *  {@link ?api=ac#AccessControl~Query#createAny|`.createAny()`} is\n *  called.\n *  <p><pre><code> var permission = ac.can('user').createAny('video');\n *  console.log(permission.granted); // boolean</code></pre></p>\n *  </li>\n *  <li>\n *  Or you can call {@link ?api=ac#AccessControl#permission|`AccessControl#permission`}\n *  by passing a fulfilled {@link ?api=ac#AccessControl#IQueryInfo|`IQueryInfo` object}.\n *  <p><pre><code> var permission = ac.permission({\n *      role: 'user',\n *      resource: 'video',\n *      action: 'create',\n *      possession: 'any'\n *  });\n *  console.log(permission.granted); // boolean</code></pre></p>\n *  </li>\n *  </ul>\n *\n *  @class\n *  @inner\n *  @memberof AccessControl\n */","meta":{"range":[1257,5192],"filename":"Permission.js","lineno":37,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100002152","name":"Permission","type":"CallExpression","value":""}},"description":"Represents the inner `Permission` class that defines the granted or denied\n access permissions for the target resource and role.\n\n You can check for a permission in two ways:\n\n <ul>\n <li>\n You can first obtain a {@link ?api=ac#AccessControl~Query|`Query` instance}\n via {@link ?api=ac#AccessControl#can|`AccessControl#can`} which returns\n a `Permission` instance when an action method such as\n {@link ?api=ac#AccessControl~Query#createAny|`.createAny()`} is\n called.\n <p><pre><code> var permission = ac.can('user').createAny('video');\n console.log(permission.granted); // boolean</code></pre></p>\n </li>\n <li>\n Or you can call {@link ?api=ac#AccessControl#permission|`AccessControl#permission`}\n by passing a fulfilled {@link ?api=ac#AccessControl#IQueryInfo|`IQueryInfo` object}.\n <p><pre><code> var permission = ac.permission({\n     role: 'user',\n     resource: 'video',\n     action: 'create',\n     possession: 'any'\n });\n console.log(permission.granted); // boolean</code></pre></p>\n </li>\n </ul>","kind":"class","scope":"inner","memberof":"AccessControl","name":"Permission","longname":"AccessControl~Permission","params":[],"$longname":"AccessControl~Permission","$kind":"class","$docmaLink":"?api=ac#AccessControl~Permission","$members":[{"comment":"/**\n     *  Filters the given data object (or array of objects) by the permission\n     *  attributes and returns this data with allowed attributes.\n     *\n     *  @param {Object|Array} data\n     *         Data object to be filtered. Either a single object or array\n     *         of objects.\n     *\n     *  @returns {Object|Array}\n     *           The filtered data object.\n     */","meta":{"range":[5047,5163],"filename":"Permission.js","lineno":141,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100002327","name":"Permission.prototype.filter","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["data"]}},"description":"Filters the given data object (or array of objects) by the permission\n attributes and returns this data with allowed attributes.","params":[{"type":{"names":["Object","Array"]},"description":"Data object to be filtered. Either a single object or array\n        of objects.","name":"data"}],"returns":[{"type":{"names":["Object","Array"]},"description":"The filtered data object."}],"name":"filter","longname":"AccessControl~Permission#filter","kind":"function","memberof":"AccessControl~Permission","scope":"instance","$longname":"AccessControl~Permission#filter","$kind":"method","$docmaLink":"?api=ac#AccessControl~Permission#filter"},{"comment":"/**\n         *  Gets an array of allowed attributes which are defined via\n         *  Glob notation. If access is not granted, this will be an empty array.\n         *\n         *  Note that when a permission is queried for multiple roles, attributes\n         *  are unioned (merged) for all given roles. This means \"at least one of\n         *  these roles\" have the permission for this action and resource attribute.\n         *\n         *  @name AccessControl~Permission#attributes\n         *  @type {Array<String>}\n         *  @readonly\n         */","meta":{"filename":"Permission.js","lineno":92,"columnno":8,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{}},"description":"Gets an array of allowed attributes which are defined via\n Glob notation. If access is not granted, this will be an empty array.\n\n Note that when a permission is queried for multiple roles, attributes\n are unioned (merged) for all given roles. This means \"at least one of\n these roles\" have the permission for this action and resource attribute.","name":"attributes","type":{"names":["Array.<String>"]},"readonly":true,"memberof":"AccessControl~Permission","longname":"AccessControl~Permission#attributes","scope":"instance","kind":"member","$longname":"AccessControl~Permission#attributes","$kind":"property","$docmaLink":"?api=ac#AccessControl~Permission#attributes"},{"comment":"/**\n         *  Specifies whether the permission is granted. If `true`, this means at\n         *  least one attribute of the target resource is allowed.\n         *\n         *  @name AccessControl~Permission#granted\n         *  @type {Boolean}\n         *  @readonly\n         */","meta":{"filename":"Permission.js","lineno":111,"columnno":8,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{}},"description":"Specifies whether the permission is granted. If `true`, this means at\n least one attribute of the target resource is allowed.","name":"granted","type":{"names":["Boolean"]},"readonly":true,"memberof":"AccessControl~Permission","longname":"AccessControl~Permission#granted","scope":"instance","kind":"member","$longname":"AccessControl~Permission#granted","$kind":"property","$docmaLink":"?api=ac#AccessControl~Permission#granted"},{"comment":"/**\n         *  Specifies the target resource for which the permission is queried for.\n         *\n         *  @name AccessControl~Permission#resource\n         *  @type {String}\n         *  @readonly\n         */","meta":{"filename":"Permission.js","lineno":78,"columnno":8,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{}},"description":"Specifies the target resource for which the permission is queried for.","name":"resource","type":{"names":["String"]},"readonly":true,"memberof":"AccessControl~Permission","longname":"AccessControl~Permission#resource","scope":"instance","kind":"member","$longname":"AccessControl~Permission#resource","$kind":"property","$docmaLink":"?api=ac#AccessControl~Permission#resource"},{"comment":"/**\n         *  Specifies the roles for which the permission is queried for.\n         *  Even if the permission is queried for a single role, this will still\n         *  return an array.\n         *\n         *  If the returned array has multiple roles, this does not necessarily mean\n         *  that the queried permission is granted or denied for each and all roles.\n         *  Note that when a permission is queried for multiple roles, attributes\n         *  are unioned (merged) for all given roles. This means \"at least one of\n         *  these roles\" have the permission for this action and resource attribute.\n         *\n         *  @name AccessControl~Permission#roles\n         *  @type {Array<String>}\n         *  @readonly\n         */","meta":{"filename":"Permission.js","lineno":56,"columnno":8,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{}},"description":"Specifies the roles for which the permission is queried for.\n Even if the permission is queried for a single role, this will still\n return an array.\n\n If the returned array has multiple roles, this does not necessarily mean\n that the queried permission is granted or denied for each and all roles.\n Note that when a permission is queried for multiple roles, attributes\n are unioned (merged) for all given roles. This means \"at least one of\n these roles\" have the permission for this action and resource attribute.","name":"roles","type":{"names":["Array.<String>"]},"readonly":true,"memberof":"AccessControl~Permission","longname":"AccessControl~Permission#roles","scope":"instance","kind":"member","$longname":"AccessControl~Permission#roles","$kind":"property","$docmaLink":"?api=ac#AccessControl~Permission#roles"}]},{"comment":"/**\n *  Represents the inner `Query` class that helps build an access information\n *  for querying and checking permissions, from the underlying grants model.\n *  You can get a first instance of this class by calling\n *  `AccessControl#can(<role>)` method.\n *  @class\n *  @inner\n *  @memberof AccessControl\n */","meta":{"range":[495,10749],"filename":"Query.js","lineno":15,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100002388","name":"Query","type":"CallExpression","value":""}},"description":"Represents the inner `Query` class that helps build an access information\n for querying and checking permissions, from the underlying grants model.\n You can get a first instance of this class by calling\n `AccessControl#can(<role>)` method.","kind":"class","scope":"inner","memberof":"AccessControl","name":"Query","longname":"AccessControl~Query","params":[],"$longname":"AccessControl~Query","$kind":"class","$docmaLink":"?api=ac#AccessControl~Query","$members":[{"comment":"/**\n     *  Queries the underlying grant model and checks whether the current\n     *  role(s) can \"create\" \"any\" resource.\n     *\n     *  @param {String} [resource]\n     *         Defines the target resource to be checked.\n     *         This is only optional if the target resource is previously\n     *         defined. If not defined and omitted, this will throw.\n     *\n     *  @throws {Error} If the access query instance to be committed has any\n     *  invalid data.\n     *\n     *  @returns {Permission}\n     *           An object that defines whether the permission is granted; and\n     *           the resource attributes that the permission is granted for.\n     */","meta":{"range":[4401,4549],"filename":"Query.js","lineno":114,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100002540","name":"Query.prototype.createAny","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["resource"]}},"description":"Queries the underlying grant model and checks whether the current\n role(s) can \"create\" \"any\" resource.","params":[{"type":{"names":["String"]},"optional":true,"description":"Defines the target resource to be checked.\n        This is only optional if the target resource is previously\n        defined. If not defined and omitted, this will throw.","name":"resource"}],"exceptions":[{"type":{"names":["Error"]},"description":"If the access query instance to be committed has any\n invalid data."}],"returns":[{"type":{"names":["Permission"]},"description":"An object that defines whether the permission is granted; and\n          the resource attributes that the permission is granted for."}],"name":"createAny","longname":"AccessControl~Query#createAny","kind":"function","memberof":"AccessControl~Query","scope":"instance","$longname":"AccessControl~Query#createAny","$kind":"method","$docmaLink":"?api=ac#AccessControl~Query#createAny"},{"comment":"/**\n     *  Queries the underlying grant model and checks whether the current\n     *  role(s) can \"create\" their \"own\" resource.\n     *\n     *  @param {String} [resource]\n     *         Defines the target resource to be checked.\n     *         This is only optional if the target resource is previously\n     *         defined. If not defined and omitted, this will throw.\n     *\n     *  @throws {Error} If the access query instance to be committed has any\n     *  invalid data.\n     *\n     *  @returns {Permission}\n     *           An object that defines whether the permission is granted; and\n     *           the resource attributes that the permission is granted for.\n     */","meta":{"range":[3570,3718],"filename":"Query.js","lineno":95,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100002514","name":"Query.prototype.createOwn","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["resource"]}},"description":"Queries the underlying grant model and checks whether the current\n role(s) can \"create\" their \"own\" resource.","params":[{"type":{"names":["String"]},"optional":true,"description":"Defines the target resource to be checked.\n        This is only optional if the target resource is previously\n        defined. If not defined and omitted, this will throw.","name":"resource"}],"exceptions":[{"type":{"names":["Error"]},"description":"If the access query instance to be committed has any\n invalid data."}],"returns":[{"type":{"names":["Permission"]},"description":"An object that defines whether the permission is granted; and\n          the resource attributes that the permission is granted for."}],"name":"createOwn","longname":"AccessControl~Query#createOwn","kind":"function","memberof":"AccessControl~Query","scope":"instance","$longname":"AccessControl~Query#createOwn","$kind":"method","$docmaLink":"?api=ac#AccessControl~Query#createOwn"},{"comment":"/**\n     *  Queries the underlying grant model and checks whether the current\n     *  role(s) can \"delete\" \"any\" resource.\n     *\n     *  @param {String} [resource]\n     *         Defines the target resource to be checked.\n     *         This is only optional if the target resource is previously\n     *         defined. If not defined and omitted, this will throw.\n     *\n     *  @throws {Error} If the access query instance to be committed has any\n     *  invalid data.\n     *\n     *  @returns {Permission}\n     *           An object that defines whether the permission is granted; and\n     *           the resource attributes that the permission is granted for.\n     */","meta":{"range":[9870,10018],"filename":"Query.js","lineno":249,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100002744","name":"Query.prototype.deleteAny","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["resource"]}},"description":"Queries the underlying grant model and checks whether the current\n role(s) can \"delete\" \"any\" resource.","params":[{"type":{"names":["String"]},"optional":true,"description":"Defines the target resource to be checked.\n        This is only optional if the target resource is previously\n        defined. If not defined and omitted, this will throw.","name":"resource"}],"exceptions":[{"type":{"names":["Error"]},"description":"If the access query instance to be committed has any\n invalid data."}],"returns":[{"type":{"names":["Permission"]},"description":"An object that defines whether the permission is granted; and\n          the resource attributes that the permission is granted for."}],"name":"deleteAny","longname":"AccessControl~Query#deleteAny","kind":"function","memberof":"AccessControl~Query","scope":"instance","$longname":"AccessControl~Query#deleteAny","$kind":"method","$docmaLink":"?api=ac#AccessControl~Query#deleteAny"},{"comment":"/**\n     *  Queries the underlying grant model and checks whether the current\n     *  role(s) can \"delete\" their \"own\" resource.\n     *\n     *  @param {String} [resource]\n     *         Defines the target resource to be checked.\n     *         This is only optional if the target resource is previously\n     *         defined. If not defined and omitted, this will throw.\n     *\n     *  @throws {Error} If the access query instance to be committed has any\n     *  invalid data.\n     *\n     *  @returns {Permission}\n     *           An object that defines whether the permission is granted; and\n     *           the resource attributes that the permission is granted for.\n     */","meta":{"range":[9039,9187],"filename":"Query.js","lineno":230,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100002718","name":"Query.prototype.deleteOwn","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["resource"]}},"description":"Queries the underlying grant model and checks whether the current\n role(s) can \"delete\" their \"own\" resource.","params":[{"type":{"names":["String"]},"optional":true,"description":"Defines the target resource to be checked.\n        This is only optional if the target resource is previously\n        defined. If not defined and omitted, this will throw.","name":"resource"}],"exceptions":[{"type":{"names":["Error"]},"description":"If the access query instance to be committed has any\n invalid data."}],"returns":[{"type":{"names":["Permission"]},"description":"An object that defines whether the permission is granted; and\n          the resource attributes that the permission is granted for."}],"name":"deleteOwn","longname":"AccessControl~Query#deleteOwn","kind":"function","memberof":"AccessControl~Query","scope":"instance","$longname":"AccessControl~Query#deleteOwn","$kind":"method","$docmaLink":"?api=ac#AccessControl~Query#deleteOwn"},{"comment":"/**\n     *  Queries the underlying grant model and checks whether the current\n     *  role(s) can \"read\" \"any\" resource.\n     *\n     *  @param {String} [resource]\n     *         Defines the target resource to be checked.\n     *         This is only optional if the target resource is previously\n     *         defined. If not defined and omitted, this will throw.\n     *\n     *  @throws {Error} If the access query instance to be committed has any\n     *  invalid data.\n     *\n     *  @returns {Permission}\n     *           An object that defines whether the permission is granted; and\n     *           the resource attributes that the permission is granted for.\n     */","meta":{"range":[6222,6366],"filename":"Query.js","lineno":159,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100002608","name":"Query.prototype.readAny","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["resource"]}},"description":"Queries the underlying grant model and checks whether the current\n role(s) can \"read\" \"any\" resource.","params":[{"type":{"names":["String"]},"optional":true,"description":"Defines the target resource to be checked.\n        This is only optional if the target resource is previously\n        defined. If not defined and omitted, this will throw.","name":"resource"}],"exceptions":[{"type":{"names":["Error"]},"description":"If the access query instance to be committed has any\n invalid data."}],"returns":[{"type":{"names":["Permission"]},"description":"An object that defines whether the permission is granted; and\n          the resource attributes that the permission is granted for."}],"name":"readAny","longname":"AccessControl~Query#readAny","kind":"function","memberof":"AccessControl~Query","scope":"instance","$longname":"AccessControl~Query#readAny","$kind":"method","$docmaLink":"?api=ac#AccessControl~Query#readAny"},{"comment":"/**\n     *  Queries the underlying grant model and checks whether the current\n     *  role(s) can \"read\" their \"own\" resource.\n     *\n     *  @param {String} [resource]\n     *         Defines the target resource to be checked.\n     *         This is only optional if the target resource is previously\n     *         defined. If not defined and omitted, this will throw.\n     *\n     *  @throws {Error} If the access query instance to be committed has any\n     *  invalid data.\n     *\n     *  @returns {Permission}\n     *           An object that defines whether the permission is granted; and\n     *           the resource attributes that the permission is granted for.\n     */","meta":{"range":[5397,5541],"filename":"Query.js","lineno":140,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100002582","name":"Query.prototype.readOwn","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["resource"]}},"description":"Queries the underlying grant model and checks whether the current\n role(s) can \"read\" their \"own\" resource.","params":[{"type":{"names":["String"]},"optional":true,"description":"Defines the target resource to be checked.\n        This is only optional if the target resource is previously\n        defined. If not defined and omitted, this will throw.","name":"resource"}],"exceptions":[{"type":{"names":["Error"]},"description":"If the access query instance to be committed has any\n invalid data."}],"returns":[{"type":{"names":["Permission"]},"description":"An object that defines whether the permission is granted; and\n          the resource attributes that the permission is granted for."}],"name":"readOwn","longname":"AccessControl~Query#readOwn","kind":"function","memberof":"AccessControl~Query","scope":"instance","$longname":"AccessControl~Query#readOwn","$kind":"method","$docmaLink":"?api=ac#AccessControl~Query#readOwn"},{"comment":"/**\n     *  A chainer method that sets the resource for this `Query` instance.\n     *  @param {String} resource\n     *         Target resource for this `Query` instance.\n     *  @returns {Query}\n     *           Self instance of `Query`.\n     */","meta":{"range":[2770,2881],"filename":"Query.js","lineno":75,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100002494","name":"Query.prototype.resource","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["resource"]},"vars":{"this._.resource":"AccessControl~Query#_.resource"}},"description":"A chainer method that sets the resource for this `Query` instance.","params":[{"type":{"names":["String"]},"description":"Target resource for this `Query` instance.","name":"resource"}],"returns":[{"type":{"names":["Query"]},"description":"Self instance of `Query`."}],"name":"resource","longname":"AccessControl~Query#resource","kind":"function","memberof":"AccessControl~Query","scope":"instance","$longname":"AccessControl~Query#resource","$kind":"method","$docmaLink":"?api=ac#AccessControl~Query#resource"},{"comment":"/**\n     *  A chainer method that sets the role(s) for this `Query` instance.\n     *  @param {String|Array<String>} roles\n     *         A single or array of roles.\n     *  @returns {Query}\n     *           Self instance of `Query`.\n     */","meta":{"range":[2419,2514],"filename":"Query.js","lineno":64,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100002474","name":"Query.prototype.role","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["role"]},"vars":{"this._.role":"AccessControl~Query#_.role"}},"description":"A chainer method that sets the role(s) for this `Query` instance.","params":[{"type":{"names":["String","Array.<String>"]},"description":"A single or array of roles.","name":"roles"}],"returns":[{"type":{"names":["Query"]},"description":"Self instance of `Query`."}],"name":"role","longname":"AccessControl~Query#role","kind":"function","memberof":"AccessControl~Query","scope":"instance","$longname":"AccessControl~Query#role","$kind":"method","$docmaLink":"?api=ac#AccessControl~Query#role"},{"comment":"/**\n     *  Queries the underlying grant model and checks whether the current\n     *  role(s) can \"update\" \"any\" resource.\n     *\n     *  @param {String} [resource]\n     *         Defines the target resource to be checked.\n     *         This is only optional if the target resource is previously\n     *         defined. If not defined and omitted, this will throw.\n     *\n     *  @throws {Error} If the access query instance to be committed has any\n     *  invalid data.\n     *\n     *  @returns {Permission}\n     *           An object that defines whether the permission is granted; and\n     *           the resource attributes that the permission is granted for.\n     */","meta":{"range":[8041,8189],"filename":"Query.js","lineno":204,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100002676","name":"Query.prototype.updateAny","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["resource"]}},"description":"Queries the underlying grant model and checks whether the current\n role(s) can \"update\" \"any\" resource.","params":[{"type":{"names":["String"]},"optional":true,"description":"Defines the target resource to be checked.\n        This is only optional if the target resource is previously\n        defined. If not defined and omitted, this will throw.","name":"resource"}],"exceptions":[{"type":{"names":["Error"]},"description":"If the access query instance to be committed has any\n invalid data."}],"returns":[{"type":{"names":["Permission"]},"description":"An object that defines whether the permission is granted; and\n          the resource attributes that the permission is granted for."}],"name":"updateAny","longname":"AccessControl~Query#updateAny","kind":"function","memberof":"AccessControl~Query","scope":"instance","$longname":"AccessControl~Query#updateAny","$kind":"method","$docmaLink":"?api=ac#AccessControl~Query#updateAny"},{"comment":"/**\n     *  Queries the underlying grant model and checks whether the current\n     *  role(s) can \"update\" their \"own\" resource.\n     *\n     *  @param {String} [resource]\n     *         Defines the target resource to be checked.\n     *         This is only optional if the target resource is previously\n     *         defined. If not defined and omitted, this will throw.\n     *\n     *  @throws {Error} If the access query instance to be committed has any\n     *  invalid data.\n     *\n     *  @returns {Permission}\n     *           An object that defines whether the permission is granted; and\n     *           the resource attributes that the permission is granted for.\n     */","meta":{"range":[7210,7358],"filename":"Query.js","lineno":185,"columnno":4,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{"id":"astnode100002650","name":"Query.prototype.updateOwn","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["resource"]}},"description":"Queries the underlying grant model and checks whether the current\n role(s) can \"update\" their \"own\" resource.","params":[{"type":{"names":["String"]},"optional":true,"description":"Defines the target resource to be checked.\n        This is only optional if the target resource is previously\n        defined. If not defined and omitted, this will throw.","name":"resource"}],"exceptions":[{"type":{"names":["Error"]},"description":"If the access query instance to be committed has any\n invalid data."}],"returns":[{"type":{"names":["Permission"]},"description":"An object that defines whether the permission is granted; and\n          the resource attributes that the permission is granted for."}],"name":"updateOwn","longname":"AccessControl~Query#updateOwn","kind":"function","memberof":"AccessControl~Query","scope":"instance","$longname":"AccessControl~Query#updateOwn","$kind":"method","$docmaLink":"?api=ac#AccessControl~Query#updateOwn"}]},{"comment":"/**\n *  An interface that defines an access information to be granted or denied.\n *  When you start a method chain with `AccessControl#grant` or `AccessControl#deny`\n *  methods, you're actually building this  object which will eventually be\n *  committed to the underlying grants model.\n *  @name AccessControl~IAccessInfo\n *  @type {Object}\n *\n *  @property {String|Array<String>} role\n *  Indicates a single or multiple roles for this access information.\n *\n *  @property {String|Array<String>} resource\n *  Indicates a single or multiple target resources for this access\n *  information.\n *\n *  @property {String|Array<String>} attributes\n *  Defines the resource attributes which are granted. If denied, this will\n *  default to an empty array.\n *\n *  @property {String} action\n *  Defines the type of the operation that is (or not) to be performed on\n *  the resource(s) by the defined role(s).\n *  See {@link ?api=ac#AccessControl.Action|`AccessControl.Action` enumeration}\n *  for possible values.\n *\n *  @property {String} possession\n *  Defines the possession of the resource(s) for the specified action.\n *  See {@link ?api=ac#AccessControl.Possession|`AccessControl.Possession` enumeration}\n *  for possible values.\n */","meta":{"filename":"IAccessInfo.js","lineno":6,"columnno":0,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{}},"description":"An interface that defines an access information to be granted or denied.\n When you start a method chain with `AccessControl#grant` or `AccessControl#deny`\n methods, you're actually building this  object which will eventually be\n committed to the underlying grants model.","name":"IAccessInfo","type":{"names":["Object"]},"properties":[{"type":{"names":["String"]},"description":"Defines the type of the operation that is (or not) to be performed on\n the resource(s) by the defined role(s).\n See {@link ?api=ac#AccessControl.Action|`AccessControl.Action` enumeration}\n for possible values.","name":"action"},{"type":{"names":["String","Array.<String>"]},"description":"Defines the resource attributes which are granted. If denied, this will\n default to an empty array.","name":"attributes"},{"type":{"names":["String"]},"description":"Defines the possession of the resource(s) for the specified action.\n See {@link ?api=ac#AccessControl.Possession|`AccessControl.Possession` enumeration}\n for possible values.","name":"possession"},{"type":{"names":["String","Array.<String>"]},"description":"Indicates a single or multiple target resources for this access\n information.","name":"resource"},{"type":{"names":["String","Array.<String>"]},"description":"Indicates a single or multiple roles for this access information.","name":"role"}],"memberof":"AccessControl","longname":"AccessControl~IAccessInfo","scope":"inner","kind":"member","$longname":"AccessControl~IAccessInfo","$kind":"property","$docmaLink":"?api=ac#AccessControl~IAccessInfo"},{"comment":"/**\n *  An interface that defines an access information to be queried.\n *  When you start a method chain with `AccessControl#can` method, you're\n *  actually building this query object which will be used to check the access\n *  permissions.\n *  @name AccessControl~IQueryInfo\n *  @type {Object}\n *\n *  @property {String|Array<String>} role\n *  Indicates a single or multiple roles to be queried.\n *\n *  @property {String} resource\n *  Indicates the resource to be queried.\n *\n *  @property {String} action\n *  Defines the type of the operation that is (or not) to be performed on\n *  the resource by the defined role(s).\n *  See {@link ?api=ac#AccessControl.Action|`AccessControl.Action` enumeration}\n *  for possible values.\n *\n *  @property {String} possession\n *  Defines the possession of the resource for the specified action.\n *  See {@link ?api=ac#AccessControl.Possession|`AccessControl.Possession` enumeration}\n *  for possible values.\n */","meta":{"filename":"IQueryInfo.js","lineno":6,"columnno":0,"path":"/Users/oy/Developer/@onury/accesscontrol/lib/core","code":{}},"description":"An interface that defines an access information to be queried.\n When you start a method chain with `AccessControl#can` method, you're\n actually building this query object which will be used to check the access\n permissions.","name":"IQueryInfo","type":{"names":["Object"]},"properties":[{"type":{"names":["String"]},"description":"Defines the type of the operation that is (or not) to be performed on\n the resource by the defined role(s).\n See {@link ?api=ac#AccessControl.Action|`AccessControl.Action` enumeration}\n for possible values.","name":"action"},{"type":{"names":["String"]},"description":"Defines the possession of the resource for the specified action.\n See {@link ?api=ac#AccessControl.Possession|`AccessControl.Possession` enumeration}\n for possible values.","name":"possession"},{"type":{"names":["String"]},"description":"Indicates the resource to be queried.","name":"resource"},{"type":{"names":["String","Array.<String>"]},"description":"Indicates a single or multiple roles to be queried.","name":"role"}],"memberof":"AccessControl","longname":"AccessControl~IQueryInfo","scope":"inner","kind":"member","$longname":"AccessControl~IQueryInfo","$kind":"property","$docmaLink":"?api=ac#AccessControl~IQueryInfo"}]}],"symbols":["AccessControl","AccessControl.Action","AccessControl.Error","AccessControl.filter","AccessControl.isACError","AccessControl.Possession","AccessControl#can","AccessControl#deny","AccessControl#extendRole","AccessControl#getGrants","AccessControl#getInheritedRolesOf","AccessControl#getResources","AccessControl#getRoles","AccessControl#grant","AccessControl#hasResource","AccessControl#hasRole","AccessControl#isLocked","AccessControl#lock","AccessControl#permission","AccessControl#removeResources","AccessControl#removeRoles","AccessControl#reset","AccessControl#setGrants","AccessControl~Access","AccessControl~Access#attributes","AccessControl~Access#createAny","AccessControl~Access#createOwn","AccessControl~Access#deleteAny","AccessControl~Access#deleteOwn","AccessControl~Access#denied","AccessControl~Access#deny","AccessControl~Access#extend","AccessControl~Access#grant","AccessControl~Access#lock","AccessControl~Access#readAny","AccessControl~Access#readOwn","AccessControl~Access#resource","AccessControl~Access#role","AccessControl~Access#updateAny","AccessControl~Access#updateOwn","AccessControl~IAccessInfo","AccessControl~IQueryInfo","AccessControl~Permission","AccessControl~Permission#attributes","AccessControl~Permission#filter","AccessControl~Permission#granted","AccessControl~Permission#resource","AccessControl~Permission#roles","AccessControl~Query","AccessControl~Query#createAny","AccessControl~Query#createOwn","AccessControl~Query#deleteAny","AccessControl~Query#deleteOwn","AccessControl~Query#readAny","AccessControl~Query#readOwn","AccessControl~Query#resource","AccessControl~Query#role","AccessControl~Query#updateAny","AccessControl~Query#updateOwn"]}},"app":{"title":"AccessControl","meta":null,"base":"/accesscontrol/","entrance":"content:guide","routing":{"method":"query","caseSensitive":true},"server":"github"},"template":{"name":"docma-template-zebra","description":"Zebra - Default template for Docma. https://github.com/onury/docma","version":"2.0.0","supportedDocmaVersion":">=2.0.0","author":"Onur Yıldırım","license":"MIT","mainHTML":"index.html","options":{"title":{"label":"AccessControl","href":"/accesscontrol/?"},"logo":null,"sidebar":{"enabled":true,"outline":"tree","collapsed":false,"toolbar":true,"itemsFolded":false,"itemsOverflow":"crop","badges":true,"search":true,"animations":true},"symbols":{"autoLink":true,"params":"list","enums":"list","props":"list","meta":false},"contentView":{"bookmarks":"h1,h2,h3"},"navbar":{"enabled":true,"fixed":true,"dark":false,"animations":true,"menu":[{"iconClass":"ico-mouse-pointer","label":"Guide","href":"./?content=guide"},{"iconClass":"ico-md ico-info","label":"F.A.Q.","href":"./?content=faq"},{"iconClass":"ico-book","label":"API Reference","href":"./?api=ac"},{"iconClass":"ico-md ico-download","label":"Download","items":[{"label":"<code>npm i accesscontrol --save</code>","href":"https://www.npmjs.com/package/accesscontrol","target":"_blank"},{"label":"<code>yarn add accesscontrol</code>","href":"https://yarn.pm/accesscontrol","target":"_blank"},{"separator":true},{"label":"Download as Archive","href":"https://github.com/onury/accesscontrol/releases","target":"_blank"},{"separator":true},{"label":"Change Log","href":"?content=changelog"}],"chevron":true},{"iconClass":"ico-md ico-github","label":"GitHub","href":"https://github.com/onury/accesscontrol","target":"_blank"}]}}},"partials":{"api":"docma-api","content":"docma-content","notFound":"docma-404"},"elementID":"docma-main","contentElementID":"docma-content","defaultApiName":"_def_","logsEnabled":false}));

!function(){"use strict";var i="path"===docma.app.routing.method;docma.app.base&&page.base(docma.app.base),page.redirect("(/)?"+docma.template.main,""),i&&(page("(/)?api/:apiName?",function(a,e){var o=a.params.apiName||docma._.defaultApiName,t=docma.createRoute(o,DocmaWeb.Route.Type.API);if(!t||!t.exists())return e();t.apply()}),page("(/)?:content",function(a,e){var o=a.params.content,t=docma.createRoute(o,DocmaWeb.Route.Type.CONTENT);if(!t||!t.exists())return e();t.apply()})),page("(/)?",function(c,r){(function(){if(i){var a=sessionStorage.getItem("redirectPath")||null;if(a)return sessionStorage.removeItem("redirectPath"),docma.info("Redirecting to:",a),page.redirect(a),!0}return!1})()||setTimeout(function(){var a,e,o,t=(e=c.querystring,o=e||window.location.search,/^[?&]/.test(o)&&(o=o.slice(1)),o||null);if(i){if(t)return r();a=docma._.appEntranceRI}else docma.log("Query-string:",t),a=t?docma.createRouteFromQuery(t):docma._.appEntranceRI;var n=!a||!a.exists();if(docma._trigger(DocmaWeb.Event.Navigate,[n?null:a]),n)return r();a.isCurrent()||a.apply()},100)}),page("*",function(a){docma.warn("Unknown Route:",a.path),docma.createRoute(null).apply()}),docma.info("Docma SPA Configuration:"),docma.info("App Title:          ",docma.app.title),docma.info("Routing Method:     ",docma.app.routing.method),docma.info("App Server:         ",docma.app.server),docma.info("Base Path:          ",docma.app.base),docma.info("Entrance Route ID:  ",docma.app.entrance),window.onload=function(){docma._.initialLoad=!0,docma._.appEntranceRI=docma.createRouteFromID(docma.app.entrance),page.start({click:!0,popstate:!0,dispatch:!0,hashbang:!1,decodeURLComponents:!0}),docma.info("Docma SPA loaded!")}}();