[
  {
    "comment": "/**\n     *  Docma (builder) class for generating HTML documentation from the given\n     *  Javascript and/or markdown source files.\n     *\n     *  This documentation you're reading is built with Docma.\n     *  @class\n     *\n     *  @example\n     *  var Docma = require('docma'),\n     *  \tdocma = new Docma();\n     */",
    "meta": {
      "range": [
        5343,
        5362
      ],
      "filename": "docma.js",
      "lineno": 154,
      "path": "/Users/oy/developer/javascript/docma/lib",
      "code": {
        "id": "astnode100000399",
        "name": "Docma",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Docma (builder) class for generating HTML documentation from the given\n Javascript and/or markdown source files.\n\n This documentation you're reading is built with Docma.",
    "kind": "class",
    "examples": [
      "var Docma = require('docma'),\n \tdocma = new Docma();"
    ],
    "name": "Docma",
    "longname": "<anonymous>~Docma",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": [],
    "$longname": "Docma",
    "$members": [
      {
        "comment": "/**\n     *  Creates a new instance of `Docma`.\n     *  This is equivalent to `new Docma(config)`.\n     *\n     *  @returns {Docma} - Docma instance.\n     */",
        "meta": {
          "range": [
            32401,
            32463
          ],
          "filename": "docma.js",
          "lineno": 822,
          "path": "/Users/oy/developer/javascript/docma/lib",
          "code": {
            "id": "astnode100002313",
            "name": "Docma.create",
            "type": "FunctionExpression",
            "funcscope": "<anonymous>",
            "paramnames": []
          }
        },
        "description": "Creates a new instance of `Docma`.\n This is equivalent to `new Docma(config)`.",
        "returns": [
          {
            "type": {
              "names": [
                "Docma"
              ]
            },
            "description": "- Docma instance."
          }
        ],
        "name": "create",
        "longname": "<anonymous>~Docma.create",
        "kind": "function",
        "memberof": "<anonymous>~Docma",
        "scope": "static",
        "$longname": "Docma.create"
      },
      {
        "comment": "/**\n     *  Enumerates Docma SPA route types.\n     *  @enum {String}\n     *  @readonly\n     *\n     *  @example\n     *  // routing method: query\n     *  type     name              path\n     *  -------  ----------------  --------------------------\n     *  api      _def_             /?api\n     *  api      docma-web         /?api=docma-web\n     *  content  templates         /?content=templates\n     *  content  guide             /?content=guide\n     *\n     *  @example\n     *  // routing method: path\n     *  type     name              path\n     *  -------  ----------------  --------------------------\n     *  api      _def_             /api\n     *  api      docma-web         /api/docma-web\n     *  content  templates         /templates\n     *  content  guide             /guide\n     */",
        "meta": {
          "range": [
            30767,
            31179
          ],
          "filename": "docma.js",
          "lineno": 771,
          "path": "/Users/oy/developer/javascript/docma/lib",
          "code": {
            "id": "astnode100002293",
            "name": "Docma.RouteType",
            "type": "ObjectExpression",
            "funcscope": "<anonymous>",
            "value": "{\"API\":\"api\",\"CONTENT\":\"content\"}",
            "paramnames": []
          }
        },
        "description": "Enumerates Docma SPA route types.",
        "kind": "member",
        "isEnum": true,
        "type": {
          "names": [
            "String"
          ]
        },
        "readonly": true,
        "examples": [
          "// routing method: query\n type     name              path\n -------  ----------------  --------------------------\n api      _def_             /?api\n api      docma-web         /?api=docma-web\n content  templates         /?content=templates\n content  guide             /?content=guide\n\n ",
          "// routing method: path\n type     name              path\n -------  ----------------  --------------------------\n api      _def_             /api\n api      docma-web         /api/docma-web\n content  templates         /templates\n content  guide             /guide"
        ],
        "name": "RouteType",
        "longname": "<anonymous>~Docma.RouteType",
        "memberof": "<anonymous>~Docma",
        "scope": "static",
        "properties": [
          {
            "comment": "/**\n         *  Indicates that a route for API documentation content, generated from\n         *  Javascript source files via JSDoc.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                30974,
                30984
              ],
              "filename": "docma.js",
              "lineno": 777,
              "path": "/Users/oy/developer/javascript/docma/lib",
              "code": {
                "id": "astnode100002298",
                "name": "API",
                "type": "Literal",
                "value": "api"
              }
            },
            "description": "Indicates that a route for API documentation content, generated from\n Javascript source files via JSDoc.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "API",
            "longname": "<anonymous>~Docma.RouteType.API",
            "kind": "member",
            "memberof": "<anonymous>~Docma.RouteType",
            "scope": "static",
            "defaultvalue": "api"
          },
          {
            "comment": "/**\n         *  Indicates that a route for other content, such as HTML files\n         *  generated from markdown.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                31155,
                31173
              ],
              "filename": "docma.js",
              "lineno": 783,
              "path": "/Users/oy/developer/javascript/docma/lib",
              "code": {
                "id": "astnode100002300",
                "name": "CONTENT",
                "type": "Literal",
                "value": "content"
              }
            },
            "description": "Indicates that a route for other content, such as HTML files\n generated from markdown.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "CONTENT",
            "longname": "<anonymous>~Docma.RouteType.CONTENT",
            "kind": "member",
            "memberof": "<anonymous>~Docma.RouteType",
            "scope": "static",
            "defaultvalue": "content"
          }
        ],
        "$longname": "Docma.RouteType",
        "$members": [
          {
            "comment": "/**\n         *  Indicates that a route for API documentation content, generated from\n         *  Javascript source files via JSDoc.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                30974,
                30984
              ],
              "filename": "docma.js",
              "lineno": 777,
              "path": "/Users/oy/developer/javascript/docma/lib",
              "code": {
                "id": "astnode100002298",
                "name": "API",
                "type": "Literal",
                "value": "api"
              }
            },
            "description": "Indicates that a route for API documentation content, generated from\n Javascript source files via JSDoc.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "API",
            "longname": "<anonymous>~Docma.RouteType.API",
            "kind": "member",
            "memberof": "<anonymous>~Docma.RouteType",
            "scope": "static",
            "defaultvalue": "api",
            "$longname": "Docma.RouteType.API"
          },
          {
            "comment": "/**\n         *  Indicates that a route for other content, such as HTML files\n         *  generated from markdown.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                31155,
                31173
              ],
              "filename": "docma.js",
              "lineno": 783,
              "path": "/Users/oy/developer/javascript/docma/lib",
              "code": {
                "id": "astnode100002300",
                "name": "CONTENT",
                "type": "Literal",
                "value": "content"
              }
            },
            "description": "Indicates that a route for other content, such as HTML files\n generated from markdown.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "CONTENT",
            "longname": "<anonymous>~Docma.RouteType.CONTENT",
            "kind": "member",
            "memberof": "<anonymous>~Docma.RouteType",
            "scope": "static",
            "defaultvalue": "content",
            "$longname": "Docma.RouteType.CONTENT"
          }
        ]
      },
      {
        "comment": "/**\n     *  Enumerates the routing methods for a Docma generated web application.\n     *  @enum {String}\n     *  @readonly\n     */",
        "meta": {
          "range": [
            28877,
            29968
          ],
          "filename": "docma.js",
          "lineno": 725,
          "path": "/Users/oy/developer/javascript/docma/lib",
          "code": {
            "id": "astnode100002283",
            "name": "Docma.RoutingMethod",
            "type": "ObjectExpression",
            "funcscope": "<anonymous>",
            "value": "{\"QUERY\":\"query\",\"PATH\":\"path\"}",
            "paramnames": []
          }
        },
        "description": "Enumerates the routing methods for a Docma generated web application.",
        "kind": "member",
        "isEnum": true,
        "type": {
          "names": [
            "String"
          ]
        },
        "readonly": true,
        "name": "RoutingMethod",
        "longname": "<anonymous>~Docma.RoutingMethod",
        "memberof": "<anonymous>~Docma",
        "scope": "static",
        "properties": [
          {
            "comment": "/**\n         *  Indicates that the SPA routes are based on path params rather than\n         *  query-strings. For example, for a named group of JS source files\n         *  (e.g. `\"mylib\"`), the generated documentation will be accessible at\n         *  `/api/mylib`. Ungrouped JS documentation will be accessible at `/api`.\n         *  And for other HTML content such as files generated from markdown\n         *  files (e.g. README.md) will be accessible at `/readme`.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                29950,
                29962
              ],
              "filename": "docma.js",
              "lineno": 745,
              "path": "/Users/oy/developer/javascript/docma/lib",
              "code": {
                "id": "astnode100002290",
                "name": "PATH",
                "type": "Literal",
                "value": "path"
              }
            },
            "description": "Indicates that the SPA routes are based on path params rather than\n query-strings. For example, for a named group of JS source files\n (e.g. `\"mylib\"`), the generated documentation will be accessible at\n `/api/mylib`. Ungrouped JS documentation will be accessible at `/api`.\n And for other HTML content such as files generated from markdown\n files (e.g. README.md) will be accessible at `/readme`.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "PATH",
            "longname": "<anonymous>~Docma.RoutingMethod.PATH",
            "kind": "member",
            "memberof": "<anonymous>~Docma.RoutingMethod",
            "scope": "static",
            "defaultvalue": "path"
          },
          {
            "comment": "/**\n         *  Indicates that the SPA routes are based on query-strings.\n         *  For example, for a named group of JS source files (e.g. `\"mylib\"`),\n         *  the generated documentation will be accessible at `/?api=mylib`.\n         *  Ungrouped JS documentation will be accessible at `/?api`.\n         *  And for other HTML content such as files generated from markdown\n         *  files (e.g. README.md) will be accessible at `/?content=readme`.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                29411,
                29425
              ],
              "filename": "docma.js",
              "lineno": 735,
              "path": "/Users/oy/developer/javascript/docma/lib",
              "code": {
                "id": "astnode100002288",
                "name": "QUERY",
                "type": "Literal",
                "value": "query"
              }
            },
            "description": "Indicates that the SPA routes are based on query-strings.\n For example, for a named group of JS source files (e.g. `\"mylib\"`),\n the generated documentation will be accessible at `/?api=mylib`.\n Ungrouped JS documentation will be accessible at `/?api`.\n And for other HTML content such as files generated from markdown\n files (e.g. README.md) will be accessible at `/?content=readme`.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "QUERY",
            "longname": "<anonymous>~Docma.RoutingMethod.QUERY",
            "kind": "member",
            "memberof": "<anonymous>~Docma.RoutingMethod",
            "scope": "static",
            "defaultvalue": "query"
          }
        ],
        "$longname": "Docma.RoutingMethod",
        "$members": [
          {
            "comment": "/**\n         *  Indicates that the SPA routes are based on path params rather than\n         *  query-strings. For example, for a named group of JS source files\n         *  (e.g. `\"mylib\"`), the generated documentation will be accessible at\n         *  `/api/mylib`. Ungrouped JS documentation will be accessible at `/api`.\n         *  And for other HTML content such as files generated from markdown\n         *  files (e.g. README.md) will be accessible at `/readme`.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                29950,
                29962
              ],
              "filename": "docma.js",
              "lineno": 745,
              "path": "/Users/oy/developer/javascript/docma/lib",
              "code": {
                "id": "astnode100002290",
                "name": "PATH",
                "type": "Literal",
                "value": "path"
              }
            },
            "description": "Indicates that the SPA routes are based on path params rather than\n query-strings. For example, for a named group of JS source files\n (e.g. `\"mylib\"`), the generated documentation will be accessible at\n `/api/mylib`. Ungrouped JS documentation will be accessible at `/api`.\n And for other HTML content such as files generated from markdown\n files (e.g. README.md) will be accessible at `/readme`.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "PATH",
            "longname": "<anonymous>~Docma.RoutingMethod.PATH",
            "kind": "member",
            "memberof": "<anonymous>~Docma.RoutingMethod",
            "scope": "static",
            "defaultvalue": "path",
            "$longname": "Docma.RoutingMethod.PATH"
          },
          {
            "comment": "/**\n         *  Indicates that the SPA routes are based on query-strings.\n         *  For example, for a named group of JS source files (e.g. `\"mylib\"`),\n         *  the generated documentation will be accessible at `/?api=mylib`.\n         *  Ungrouped JS documentation will be accessible at `/?api`.\n         *  And for other HTML content such as files generated from markdown\n         *  files (e.g. README.md) will be accessible at `/?content=readme`.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                29411,
                29425
              ],
              "filename": "docma.js",
              "lineno": 735,
              "path": "/Users/oy/developer/javascript/docma/lib",
              "code": {
                "id": "astnode100002288",
                "name": "QUERY",
                "type": "Literal",
                "value": "query"
              }
            },
            "description": "Indicates that the SPA routes are based on query-strings.\n For example, for a named group of JS source files (e.g. `\"mylib\"`),\n the generated documentation will be accessible at `/?api=mylib`.\n Ungrouped JS documentation will be accessible at `/?api`.\n And for other HTML content such as files generated from markdown\n files (e.g. README.md) will be accessible at `/?content=readme`.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "QUERY",
            "longname": "<anonymous>~Docma.RoutingMethod.QUERY",
            "kind": "member",
            "memberof": "<anonymous>~Docma.RoutingMethod",
            "scope": "static",
            "defaultvalue": "query",
            "$longname": "Docma.RoutingMethod.QUERY"
          }
        ]
      },
      {
        "comment": "/**\n     *  Enumerates the server/host types for Docma generated SPA.\n     *  The generated SPA is not limited to these hosts but Docma will generate\n     *  additional server config files for these hosts; especially if the\n     *  routing method is set to `\"path\"`. For example, for Apache;\n     *  an `.htaccess` file will be auto-generated with redirect rules for\n     *  (sub) routes. For GitHub, sub-dirctories will be generated\n     *  (just like Jekyll) with index files for redirecting via http-meta\n     *  refresh.\n     *  @enum {String}\n     *  @readonly\n     */",
        "meta": {
          "range": [
            31764,
            32131
          ],
          "filename": "docma.js",
          "lineno": 798,
          "path": "/Users/oy/developer/javascript/docma/lib",
          "code": {
            "id": "astnode100002303",
            "name": "Docma.ServerType",
            "type": "ObjectExpression",
            "funcscope": "<anonymous>",
            "value": "{\"APACHE\":\"apache\",\"GITHUB\":\"github\"}",
            "paramnames": []
          }
        },
        "description": "Enumerates the server/host types for Docma generated SPA.\n The generated SPA is not limited to these hosts but Docma will generate\n additional server config files for these hosts; especially if the\n routing method is set to `\"path\"`. For example, for Apache;\n an `.htaccess` file will be auto-generated with redirect rules for\n (sub) routes. For GitHub, sub-dirctories will be generated\n (just like Jekyll) with index files for redirecting via http-meta\n refresh.",
        "kind": "member",
        "isEnum": true,
        "type": {
          "names": [
            "String"
          ]
        },
        "readonly": true,
        "name": "ServerType",
        "longname": "<anonymous>~Docma.ServerType",
        "memberof": "<anonymous>~Docma",
        "scope": "static",
        "properties": [
          {
            "comment": "/**\n         *  Indicates that an Apache server will be hosting the generated SPA.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                31923,
                31939
              ],
              "filename": "docma.js",
              "lineno": 803,
              "path": "/Users/oy/developer/javascript/docma/lib",
              "code": {
                "id": "astnode100002308",
                "name": "APACHE",
                "type": "Literal",
                "value": "apache"
              }
            },
            "description": "Indicates that an Apache server will be hosting the generated SPA.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "APACHE",
            "longname": "<anonymous>~Docma.ServerType.APACHE",
            "kind": "member",
            "memberof": "<anonymous>~Docma.ServerType",
            "scope": "static",
            "defaultvalue": "apache"
          },
          {
            "comment": "/**\n         *  Indicates that SPA will be hosted via\n         *  {@link https://pages.github.com|GitHub Pages}.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                32109,
                32125
              ],
              "filename": "docma.js",
              "lineno": 809,
              "path": "/Users/oy/developer/javascript/docma/lib",
              "code": {
                "id": "astnode100002310",
                "name": "GITHUB",
                "type": "Literal",
                "value": "github"
              }
            },
            "description": "Indicates that SPA will be hosted via\n {@link https://pages.github.com|GitHub Pages}.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "GITHUB",
            "longname": "<anonymous>~Docma.ServerType.GITHUB",
            "kind": "member",
            "memberof": "<anonymous>~Docma.ServerType",
            "scope": "static",
            "defaultvalue": "github"
          }
        ],
        "$longname": "Docma.ServerType",
        "$members": [
          {
            "comment": "/**\n         *  Indicates that an Apache server will be hosting the generated SPA.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                31923,
                31939
              ],
              "filename": "docma.js",
              "lineno": 803,
              "path": "/Users/oy/developer/javascript/docma/lib",
              "code": {
                "id": "astnode100002308",
                "name": "APACHE",
                "type": "Literal",
                "value": "apache"
              }
            },
            "description": "Indicates that an Apache server will be hosting the generated SPA.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "APACHE",
            "longname": "<anonymous>~Docma.ServerType.APACHE",
            "kind": "member",
            "memberof": "<anonymous>~Docma.ServerType",
            "scope": "static",
            "defaultvalue": "apache",
            "$longname": "Docma.ServerType.APACHE"
          },
          {
            "comment": "/**\n         *  Indicates that SPA will be hosted via\n         *  {@link https://pages.github.com|GitHub Pages}.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                32109,
                32125
              ],
              "filename": "docma.js",
              "lineno": 809,
              "path": "/Users/oy/developer/javascript/docma/lib",
              "code": {
                "id": "astnode100002310",
                "name": "GITHUB",
                "type": "Literal",
                "value": "github"
              }
            },
            "description": "Indicates that SPA will be hosted via\n {@link https://pages.github.com|GitHub Pages}.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "GITHUB",
            "longname": "<anonymous>~Docma.ServerType.GITHUB",
            "kind": "member",
            "memberof": "<anonymous>~Docma.ServerType",
            "scope": "static",
            "defaultvalue": "github",
            "$longname": "Docma.ServerType.GITHUB"
          }
        ]
      },
      {
        "comment": "/**\n     *  Parses the given source files and builds a Single Page Application (SPA)\n     *  with the given Docma template.\n     *\n     *  For a verbose build, `debug` option should be enabled or set to a high\n     *  value when the Docma instance is initialized.\n     *\n     *  @param {Object|String} - Either a build configuration object or the\n     *  file path of a configuration JSON file.\n     *  See {@link #Docma~BuildConfiguration|`BuildConfiguration`} for details.\n     *\n     *  @returns {Promise} - Promise that returns a `Boolean` value for whether\n     *  the build operation is successful. This will always returns `true` if\n     *  no errors occur. You should `.catch()` the errors of the promise chain.\n     *\n     *  @example\n     *  var docma = new Docma();\n     *  docma.build(config)\n     *  \t.then(function (success) {\n     *  \t\tconsole.log('Documentation is built successfully.');\n     *  \t})\n     *  \t.catch(function (error) {\n     *  \t\tconsole.log(error);\n     *  \t});\n     */",
        "meta": {
          "range": [
            24722,
            28632
          ],
          "filename": "docma.js",
          "lineno": 621,
          "path": "/Users/oy/developer/javascript/docma/lib",
          "code": {
            "id": "astnode100001872",
            "name": "Docma.prototype.build",
            "type": "FunctionExpression",
            "funcscope": "<anonymous>",
            "paramnames": [
              "config"
            ]
          },
          "vars": {
            "self": "<anonymous>~Docma#build~self",
            "": null
          }
        },
        "description": "Parses the given source files and builds a Single Page Application (SPA)\n with the given Docma template.\n\n For a verbose build, `debug` option should be enabled or set to a high\n value when the Docma instance is initialized.",
        "params": [
          {
            "type": {
              "names": [
                "Object",
                "String"
              ]
            },
            "description": "Either a build configuration object or the\n file path of a configuration JSON file.\n See {@link #Docma~BuildConfiguration|`BuildConfiguration`} for details.",
            "name": "config"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise"
              ]
            },
            "description": "- Promise that returns a `Boolean` value for whether\n the build operation is successful. This will always returns `true` if\n no errors occur. You should `.catch()` the errors of the promise chain."
          }
        ],
        "examples": [
          "var docma = new Docma();\n docma.build(config)\n \t.then(function (success) {\n \t\tconsole.log('Documentation is built successfully.');\n \t})\n \t.catch(function (error) {\n \t\tconsole.log(error);\n \t});"
        ],
        "name": "build",
        "longname": "<anonymous>~Docma#build",
        "kind": "function",
        "memberof": "<anonymous>~Docma",
        "scope": "instance",
        "$longname": "Docma#build"
      }
    ]
  },
  {
    "comment": "/**\n *  Docma build configuration object that defines parse options for the given\n *  source files; and and templating options for the Single Page Application to\n *  be generated.\n *\n *  This is very configurable but, you're only required to define very few\n *  options such as the source files (`src`) and the destination directory\n *  (`dest`) for a simple build.\n *\n *  @typedef Docma~BuildConfiguration\n *  @type Object\n *\n *  @param {String|Array|Object} src\n *         One or more file/directory paths to be processed. This also accepts\n *         {@link https://github.com/isaacs/node-glob|Glob} strings or array of\n *         globs. e.g. `./src/&#x2A;&#x2A;/&#x2A;.js` will produce an array of\n *         all `.js` files under `./src` directory and sub-directories.\n *  @param {String} dest\n *         Destination output directory path. <b>CAUTION:</b> This directory\n *         will be emptied before the build. Make sure you set this to a correct\n *         path.\n *  @param {Boolean|Number} [debug=0]\n *         If set to `true` or `1`, outputs one or more `{name}.jsdoc.json`\n *         files that include documentation data for each (grouped) javascript\n *         source. If set to `2`, additionally disables minification for the\n *         generated web app assets. This is useful if you're debugging a custom\n *         Docma template. If set to `3`, outputs useful logs to the console for\n *         both NodeJS (while building) and browser (while viewing the app).\n *         If set to `4`, logs are verbose. To disable the debug option, set to\n *         `false` or `0`.\n *  @param {Object} [jsdoc] - JSDoc parse options.\n *  @param {String} [jsdoc.encoding=\"utf8\"]\n *         Encoding to be used when reading JS source files.\n *  @param {Boolean} [jsdoc.recurse=false]\n *         Specifies whether to recurse into sub-directories when scanning for\n *         source files.\n *  @param {Boolean} [jsdoc.pedantic=false]\n *         Specifies whether to treat errors as fatal errors, and treat warnings\n *         as errors.\n *  @param {String|Array} [jsdoc.access]\n *         Specifies which symbols to be processed with the given access\n *         property. Possible values: `\"private\"`, `\"protected\"`, `\"public\"` or\n *         `\"all\"` (for all access levels). By default, all except private\n *         symbols are processed. Note that, if access is not set for a\n *         documented symbol, it will still be included, regardless of this\n *         option.\n *  @param {Boolean} [jsdoc.private=false] -\n *  @param {String} [jsdoc.package]\n *         The path to the `package.json` file that contains the project name,\n *         version, and other details. If set to `true` instead of a path\n *         string, the first `package.json` file found in the source paths.\n *  @param {Boolean} [jsdoc.module=true]\n *         Specifies whether to include `module.exports` symbols.\n *  @param {Boolean} [jsdoc.undocumented=true]\n *         Specifies whether to include undocumented symbols.\n *  @param {Boolean} [jsdoc.undescribed=true]\n *         Specifies whether to include symbols without a description.\n *  @param {String} [jsdoc.relativePath]\n *         When set, all `symbol.meta.path` values will be relative to this path.\n *  @param {Function} [jsdoc.predicate]\n *         This is used to filter the parsed documentation output array. If a\n *         `Function` is passed; it's invoked for each included `symbol`. e.g.\n *         `function (symbol) { return symbol; }` Returning a falsy value will\n *         remove the symbol from the output. Returning `true` will keep the\n *         original symbol. To keep the symbol and alter its contents, simply\n *         return an altered symbol object.\n *  @param {Boolean} [jsdoc.hierarchy=false]\n *         Specifies whether to arrange symbols by their hierarchy. This will\n *         find and move symbols that have a `memberof` property to a `$members`\n *         property of their corresponding owners. Also the constructor symbol\n *         will be moved to a `$constructor` property of the `ClassDeclaration`\n *         symbol; if any.\n *  @param {Boolean|String} [jsdoc.sort=false]\n *         Specifies whether to sort the documentation symbols. For alphabetic\n *         sort, set to `true` or `\"alphabetic\"`. To additionally group by scope\n *         (static/instance) set to `\"grouped\"`. Set to `false` to disable.\n *  @param {Object} [markdown] - Markdown parse options.\n *  @param {Boolean} [markdown.gfm=true]\n *         Whether to enable {@link https://help.github.com/categories/writing-on-github|GitHub flavored markdown}.\n *  @param {Boolean} [markdown.tables=true]\n *         Whether to enable enable GFM {@link https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#tables|tables}.\n *         This option requires the `gfm` option to be `true`.\n *  @param {Boolean} [markdown.breaks=false]\n *         Whether to enable enable GFM {@link https://help.github.com/articles/basic-writing-and-formatting-syntax/#paragraphs-and-line-breaks|line breaks}.\n *         This option requires the `gfm` option to be `true`.\n *  @param {Boolean} [markdown.pedantic=false]\n *         Whether to conform with obscure parts of `markdown.pl` as much as\n *         possible. Don't fix any of the original markdown bugs or poor\n *         behavior.\n *  @param {Boolean} [markdown.sanitize=false]\n *         Whether to use smarter list behavior than the original markdown. May\n *         eventually be default with the old behavior moved into `pedantic`.\n *  @param {Boolean} [markdown.smartypants=false]\n *         Whether to use \"smart\" typographic punctuation for things like quotes\n *         and dashes.\n *  @param {Boolean} [markdown.tasks=true]\n *         Whether to parse GitHub style task markdown (e.g. `- [x] task`) into\n *         checkbox elements.\n *  @param {Boolean} [markdown.emoji=true]\n *         If set to `true`, emoji shortcuts (e.g. `&#x3A;smiley&#x3A;`) are\n *         parsed into `&lt;img /&gt;` elements with\n *         {@link http://twitter.github.io/twemoji|twemoji} SVG URLs.\n *  @param {Object} [app]\n *         Configuration for the generated SPA (Single Page Application).\n *  @param {String} [app.title=\"\"]\n *         Title of the main HTML document of the generated web app.\n *         (Sets the value of the `&lt;title&gt;` element.)\n *  @param {Array|Object} [app.meta]\n *         One or more meta elements to be set for the main HTML document of\n *         the generated web app. Set arbitrary object(s) for each meta element\n *         to be added. e.g. `[{ charset: \"utf-8\"}, { name: \"robots\", \"content\": \"index, follow\" }]`.\n *  @param {String} [app.base=\"/\"]\n *         Sets the base path of the generated web app. For example if the app\n *         will operate within `/doc/*` set the base path to `\"/doc\"`.\n *  @param {String} [app.entrance]\n *         Defines the home content to be displayed for the application root\n *         (when you enter the base path i.e. `\"/\"`). Pass the type and name of\n *         the route in `{type}:{name}` format. There are 2 types of routes: `api`\n *         for JS source documentation and `content` for other HTML content such\n *         as parsed markdown files. For example, if you have a grouped JS files\n *         documented with a name `mylib`; to define this as the entrance of the\n *         app, set this to `\"api:mylib\"`. If you have `\"README.md\"` in your\n *         source files; to define this as the entrance, set this to\n *         `\"content:readme\"`.\n *  @param {String} [app.routing=\"query\"]\n *         Indicates the routing method for the generated SPA (Single Page\n *         Application). See {@link #Docma.RoutingMethod|`RoutingMethod` enumeration}.\n *  @param {String} [app.server]\n *         Server or host type for the SPA. This information helps Docma\n *         determine how to configure the generated SPA, especially if `routing`\n *         is set to `\"path\"`. See {@link #Docma.ServerType|`ServerType` enumeration}\n *         for details.\n *  @param {Object} [template] - SPA template configuration.\n *  @param {String} [template.path=\"default\"]\n *         Either the path of a custom Docma template or the name of a built-in\n *         template. Omit to use the default built-in template.\n *  @param {Object} [template.options]\n *         SPA template options. This is defined by the template itself.\n *         Refer to the template's documentation for options to be set at\n *         build-time. (If any option is omitted in the build, default values\n *         within the `docma.template.json` configuration file of the template\n *         are used.)\n */",
    "meta": {
      "range": [
        32687,
        41325
      ],
      "filename": "docma.js",
      "lineno": 838,
      "path": "/Users/oy/developer/javascript/docma/lib",
      "code": {}
    },
    "description": "Docma build configuration object that defines parse options for the given\n source files; and and templating options for the Single Page Application to\n be generated.\n\n This is very configurable but, you're only required to define very few\n options such as the source files (`src`) and the destination directory\n (`dest`) for a simple build.",
    "kind": "typedef",
    "name": "BuildConfiguration",
    "type": {
      "names": [
        "Object"
      ]
    },
    "params": [
      {
        "type": {
          "names": [
            "String",
            "Array",
            "Object"
          ]
        },
        "description": "One or more file/directory paths to be processed. This also accepts\n        {@link https://github.com/isaacs/node-glob|Glob} strings or array of\n        globs. e.g. `./src/&#x2A;&#x2A;/&#x2A;.js` will produce an array of\n        all `.js` files under `./src` directory and sub-directories.",
        "name": "src"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Destination output directory path. <b>CAUTION:</b> This directory\n        will be emptied before the build. Make sure you set this to a correct\n        path.",
        "name": "dest"
      },
      {
        "type": {
          "names": [
            "Boolean",
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "If set to `true` or `1`, outputs one or more `{name}.jsdoc.json`\n        files that include documentation data for each (grouped) javascript\n        source. If set to `2`, additionally disables minification for the\n        generated web app assets. This is useful if you're debugging a custom\n        Docma template. If set to `3`, outputs useful logs to the console for\n        both NodeJS (while building) and browser (while viewing the app).\n        If set to `4`, logs are verbose. To disable the debug option, set to\n        `false` or `0`.",
        "name": "debug"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "JSDoc parse options.",
        "name": "jsdoc"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "\"utf8\"",
        "description": "Encoding to be used when reading JS source files.",
        "name": "jsdoc.encoding"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Specifies whether to recurse into sub-directories when scanning for\n        source files.",
        "name": "jsdoc.recurse"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Specifies whether to treat errors as fatal errors, and treat warnings\n        as errors.",
        "name": "jsdoc.pedantic"
      },
      {
        "type": {
          "names": [
            "String",
            "Array"
          ]
        },
        "optional": true,
        "description": "Specifies which symbols to be processed with the given access\n        property. Possible values: `\"private\"`, `\"protected\"`, `\"public\"` or\n        `\"all\"` (for all access levels). By default, all except private\n        symbols are processed. Note that, if access is not set for a\n        documented symbol, it will still be included, regardless of this\n        option.",
        "name": "jsdoc.access"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "-",
        "name": "jsdoc.private"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "The path to the `package.json` file that contains the project name,\n        version, and other details. If set to `true` instead of a path\n        string, the first `package.json` file found in the source paths.",
        "name": "jsdoc.package"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": true,
        "description": "Specifies whether to include `module.exports` symbols.",
        "name": "jsdoc.module"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": true,
        "description": "Specifies whether to include undocumented symbols.",
        "name": "jsdoc.undocumented"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": true,
        "description": "Specifies whether to include symbols without a description.",
        "name": "jsdoc.undescribed"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "When set, all `symbol.meta.path` values will be relative to this path.",
        "name": "jsdoc.relativePath"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "This is used to filter the parsed documentation output array. If a\n        `Function` is passed; it's invoked for each included `symbol`. e.g.\n        `function (symbol) { return symbol; }` Returning a falsy value will\n        remove the symbol from the output. Returning `true` will keep the\n        original symbol. To keep the symbol and alter its contents, simply\n        return an altered symbol object.",
        "name": "jsdoc.predicate"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Specifies whether to arrange symbols by their hierarchy. This will\n        find and move symbols that have a `memberof` property to a `$members`\n        property of their corresponding owners. Also the constructor symbol\n        will be moved to a `$constructor` property of the `ClassDeclaration`\n        symbol; if any.",
        "name": "jsdoc.hierarchy"
      },
      {
        "type": {
          "names": [
            "Boolean",
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Specifies whether to sort the documentation symbols. For alphabetic\n        sort, set to `true` or `\"alphabetic\"`. To additionally group by scope\n        (static/instance) set to `\"grouped\"`. Set to `false` to disable.",
        "name": "jsdoc.sort"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Markdown parse options.",
        "name": "markdown"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": true,
        "description": "Whether to enable {@link https://help.github.com/categories/writing-on-github|GitHub flavored markdown}.",
        "name": "markdown.gfm"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": true,
        "description": "Whether to enable enable GFM {@link https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#tables|tables}.\n        This option requires the `gfm` option to be `true`.",
        "name": "markdown.tables"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Whether to enable enable GFM {@link https://help.github.com/articles/basic-writing-and-formatting-syntax/#paragraphs-and-line-breaks|line breaks}.\n        This option requires the `gfm` option to be `true`.",
        "name": "markdown.breaks"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Whether to conform with obscure parts of `markdown.pl` as much as\n        possible. Don't fix any of the original markdown bugs or poor\n        behavior.",
        "name": "markdown.pedantic"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Whether to use smarter list behavior than the original markdown. May\n        eventually be default with the old behavior moved into `pedantic`.",
        "name": "markdown.sanitize"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Whether to use \"smart\" typographic punctuation for things like quotes\n        and dashes.",
        "name": "markdown.smartypants"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": true,
        "description": "Whether to parse GitHub style task markdown (e.g. `- [x] task`) into\n        checkbox elements.",
        "name": "markdown.tasks"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": true,
        "description": "If set to `true`, emoji shortcuts (e.g. `&#x3A;smiley&#x3A;`) are\n        parsed into `&lt;img /&gt;` elements with\n        {@link http://twitter.github.io/twemoji|twemoji} SVG URLs.",
        "name": "markdown.emoji"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Configuration for the generated SPA (Single Page Application).",
        "name": "app"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "\"\"",
        "description": "Title of the main HTML document of the generated web app.\n        (Sets the value of the `&lt;title&gt;` element.)",
        "name": "app.title"
      },
      {
        "type": {
          "names": [
            "Array",
            "Object"
          ]
        },
        "optional": true,
        "description": "One or more meta elements to be set for the main HTML document of\n        the generated web app. Set arbitrary object(s) for each meta element\n        to be added. e.g. `[{ charset: \"utf-8\"}, { name: \"robots\", \"content\": \"index, follow\" }]`.",
        "name": "app.meta"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "\"/\"",
        "description": "Sets the base path of the generated web app. For example if the app\n        will operate within `/doc/*` set the base path to `\"/doc\"`.",
        "name": "app.base"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Defines the home content to be displayed for the application root\n        (when you enter the base path i.e. `\"/\"`). Pass the type and name of\n        the route in `{type}:{name}` format. There are 2 types of routes: `api`\n        for JS source documentation and `content` for other HTML content such\n        as parsed markdown files. For example, if you have a grouped JS files\n        documented with a name `mylib`; to define this as the entrance of the\n        app, set this to `\"api:mylib\"`. If you have `\"README.md\"` in your\n        source files; to define this as the entrance, set this to\n        `\"content:readme\"`.",
        "name": "app.entrance"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "\"query\"",
        "description": "Indicates the routing method for the generated SPA (Single Page\n        Application). See {@link #Docma.RoutingMethod|`RoutingMethod` enumeration}.",
        "name": "app.routing"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Server or host type for the SPA. This information helps Docma\n        determine how to configure the generated SPA, especially if `routing`\n        is set to `\"path\"`. See {@link #Docma.ServerType|`ServerType` enumeration}\n        for details.",
        "name": "app.server"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "SPA template configuration.",
        "name": "template"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "\"default\"",
        "description": "Either the path of a custom Docma template or the name of a built-in\n        template. Omit to use the default built-in template.",
        "name": "template.path"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "SPA template options. This is defined by the template itself.\n        Refer to the template's documentation for options to be set at\n        build-time. (If any option is omitted in the build, default values\n        within the `docma.template.json` configuration file of the template\n        are used.)",
        "name": "template.options"
      }
    ],
    "memberof": "Docma",
    "longname": "Docma~BuildConfiguration",
    "scope": "inner",
    "$longname": "Docma~BuildConfiguration"
  }
]