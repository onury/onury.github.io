/*! dustjs-linkedin - v2.7.2
* http://dustjs.com/
* Copyright (c) 2015 Aleksander Williams; Released under the MIT License */
!function(a,b){"function"==typeof define&&define.amd&&define.amd.dust===!0?define("dust.core",[],b):"object"==typeof exports?module.exports=b():a.dust=b()}(this,function(){function getTemplate(a,b){return a?"function"==typeof a&&a.template?a.template:dust.isTemplateFn(a)?a:b!==!1?dust.cache[a]:void 0:void 0}function load(a,b,c){if(!a)return b.setError(new Error("No template or template name provided to render"));var d=getTemplate(a,dust.config.cache);return d?d(b,Context.wrap(c,d.templateName)):dust.onLoad?b.map(function(b){function d(a,d){var f;if(a)return b.setError(a);if(f=getTemplate(d,!1)||getTemplate(e,dust.config.cache),!f){if(!dust.compile)return b.setError(new Error("Dust compiler not available"));f=dust.loadSource(dust.compile(d,e))}f(b,Context.wrap(c,f.templateName)).end()}var e=a;3===dust.onLoad.length?dust.onLoad(e,c.options,d):dust.onLoad(e,d)}):b.setError(new Error("Template Not Found: "+a))}function Context(a,b,c,d,e){void 0===a||a instanceof Stack||(a=new Stack(a)),this.stack=a,this.global=b,this.options=c,this.blocks=d,this.templateName=e}function getWithResolvedData(a,b,c){return function(d){return a.push(d)._get(b,c)}}function Stack(a,b,c,d){this.tail=b,this.isObject=a&&"object"==typeof a,this.head=a,this.index=c,this.of=d}function Stub(a){this.head=new Chunk(this),this.callback=a,this.out=""}function Stream(){this.head=new Chunk(this)}function Chunk(a,b,c){this.root=a,this.next=b,this.data=[],this.flushable=!1,this.taps=c}function Tap(a,b){this.head=a,this.tail=b}var dust={version:"2.7.2"},NONE="NONE",ERROR="ERROR",WARN="WARN",INFO="INFO",DEBUG="DEBUG",EMPTY_FUNC=function(){};dust.config={whitespace:!1,amd:!1,cjs:!1,cache:!0},dust._aliases={write:"w",end:"e",map:"m",render:"r",reference:"f",section:"s",exists:"x",notexists:"nx",block:"b",partial:"p",helper:"h"},function(){var a,b,c={DEBUG:0,INFO:1,WARN:2,ERROR:3,NONE:4};"undefined"!=typeof console&&console.log?(a=console.log,b="function"==typeof a?function(){a.apply(console,arguments)}:function(){a(Array.prototype.slice.apply(arguments).join(" "))}):b=EMPTY_FUNC,dust.log=function(a,d){d=d||INFO,c[d]>=c[dust.debugLevel]&&b("[DUST:"+d+"]",a)},dust.debugLevel=NONE,"undefined"!=typeof process&&process.env&&/\bdust\b/.test(process.env.DEBUG)&&(dust.debugLevel=DEBUG)}(),dust.helpers={},dust.cache={},dust.register=function(a,b){a&&(b.templateName=a,dust.config.cache!==!1&&(dust.cache[a]=b))},dust.render=function(a,b,c){var d=new Stub(c).head;try{load(a,d,b).end()}catch(e){d.setError(e)}},dust.stream=function(a,b){var c=new Stream,d=c.head;return dust.nextTick(function(){try{load(a,d,b).end()}catch(c){d.setError(c)}}),c},dust.loadSource=function(source){return eval(source)},dust.isArray=Array.isArray?Array.isArray:function(a){return"[object Array]"===Object.prototype.toString.call(a)},dust.nextTick=function(){return function(a){setTimeout(a,0)}}(),dust.isEmpty=function(a){return 0===a?!1:dust.isArray(a)&&!a.length?!0:!a},dust.isEmptyObject=function(a){var b;if(null===a)return!1;if(void 0===a)return!1;if(a.length>0)return!1;for(b in a)if(Object.prototype.hasOwnProperty.call(a,b))return!1;return!0},dust.isTemplateFn=function(a){return"function"==typeof a&&a.__dustBody},dust.isThenable=function(a){return a&&"object"==typeof a&&"function"==typeof a.then},dust.isStreamable=function(a){return a&&"function"==typeof a.on&&"function"==typeof a.pipe},dust.filter=function(a,b,c,d){var e,f,g,h;if(c)for(e=0,f=c.length;f>e;e++)g=c[e],g.length&&(h=dust.filters[g],"s"===g?b=null:"function"==typeof h?a=h(a,d):dust.log("Invalid filter `"+g+"`",WARN));return b&&(a=dust.filters[b](a,d)),a},dust.filters={h:function(a){return dust.escapeHtml(a)},j:function(a){return dust.escapeJs(a)},u:encodeURI,uc:encodeURIComponent,js:function(a){return dust.escapeJSON(a)},jp:function(a){return JSON?JSON.parse(a):(dust.log("JSON is undefined; could not parse `"+a+"`",WARN),a)}},dust.makeBase=dust.context=function(a,b){return new Context(void 0,a,b)},Context.wrap=function(a,b){return a instanceof Context?a:new Context(a,{},{},null,b)},Context.prototype.get=function(a,b){return"string"==typeof a&&("."===a[0]&&(b=!0,a=a.substr(1)),a=a.split(".")),this._get(b,a)},Context.prototype._get=function(a,b){var c,d,e,f,g,h=this.stack||{},i=1;if(d=b[0],e=b.length,a&&0===e)f=h,h=h.head;else{if(a)h&&(h=h.head?h.head[d]:void 0);else{for(;h&&(!h.isObject||(f=h.head,c=h.head[d],void 0===c));)h=h.tail;h=void 0!==c?c:this.global&&this.global[d]}for(;h&&e>i;){if(dust.isThenable(h))return h.then(getWithResolvedData(this,a,b.slice(i)));f=h,h=h[b[i]],i++}}return"function"==typeof h?(g=function(){try{return h.apply(f,arguments)}catch(a){throw dust.log(a,ERROR),a}},g.__dustBody=!!h.__dustBody,g):(void 0===h&&dust.log("Cannot find reference `{"+b.join(".")+"}` in template `"+this.getTemplateName()+"`",INFO),h)},Context.prototype.getPath=function(a,b){return this._get(a,b)},Context.prototype.push=function(a,b,c){return void 0===a?(dust.log("Not pushing an undefined variable onto the context",INFO),this):this.rebase(new Stack(a,this.stack,b,c))},Context.prototype.pop=function(){var a=this.current();return this.stack=this.stack&&this.stack.tail,a},Context.prototype.rebase=function(a){return new Context(a,this.global,this.options,this.blocks,this.getTemplateName())},Context.prototype.clone=function(){var a=this.rebase();return a.stack=this.stack,a},Context.prototype.current=function(){return this.stack&&this.stack.head},Context.prototype.getBlock=function(a){var b,c,d;if("function"==typeof a&&(a=a(new Chunk,this).data.join("")),b=this.blocks,!b)return dust.log("No blocks for context `"+a+"` in template `"+this.getTemplateName()+"`",DEBUG),!1;for(c=b.length;c--;)if(d=b[c][a])return d;return dust.log("Malformed template `"+this.getTemplateName()+"` was missing one or more blocks."),!1},Context.prototype.shiftBlocks=function(a){var b,c=this.blocks;return a?(b=c?c.concat([a]):[a],new Context(this.stack,this.global,this.options,b,this.getTemplateName())):this},Context.prototype.resolve=function(a){var b;return"function"!=typeof a?a:(b=(new Chunk).render(a,this),b instanceof Chunk?b.data.join(""):b)},Context.prototype.getTemplateName=function(){return this.templateName},Stub.prototype.flush=function(){for(var a=this.head;a;){if(!a.flushable)return a.error?(this.callback(a.error),dust.log("Rendering failed with error `"+a.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.out+=a.data.join(""),a=a.next,this.head=a}this.callback(null,this.out)},Stream.prototype.flush=function(){for(var a=this.head;a;){if(!a.flushable)return a.error?(this.emit("error",a.error),this.emit("end"),dust.log("Streaming failed with error `"+a.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.emit("data",a.data.join("")),a=a.next,this.head=a}this.emit("end")},Stream.prototype.emit=function(a,b){var c,d,e=this.events||{},f=e[a]||[];if(!f.length)return dust.log("Stream broadcasting, but no listeners for `"+a+"`",DEBUG),!1;for(f=f.slice(0),c=0,d=f.length;d>c;c++)f[c](b);return!0},Stream.prototype.on=function(a,b){var c=this.events=this.events||{},d=c[a]=c[a]||[];return"function"!=typeof b?dust.log("No callback function provided for `"+a+"` event listener",WARN):d.push(b),this},Stream.prototype.pipe=function(a){if("function"!=typeof a.write||"function"!=typeof a.end)return dust.log("Incompatible stream passed to `pipe`",WARN),this;var b=!1;return"function"==typeof a.emit&&a.emit("pipe",this),"function"==typeof a.on&&a.on("error",function(){b=!0}),this.on("data",function(c){if(!b)try{a.write(c,"utf8")}catch(d){dust.log(d,ERROR)}}).on("end",function(){if(!b)try{a.end(),b=!0}catch(c){dust.log(c,ERROR)}})},Chunk.prototype.write=function(a){var b=this.taps;return b&&(a=b.go(a)),this.data.push(a),this},Chunk.prototype.end=function(a){return a&&this.write(a),this.flushable=!0,this.root.flush(),this},Chunk.prototype.map=function(a){var b=new Chunk(this.root,this.next,this.taps),c=new Chunk(this.root,b,this.taps);this.next=c,this.flushable=!0;try{a(c)}catch(d){dust.log(d,ERROR),c.setError(d)}return b},Chunk.prototype.tap=function(a){var b=this.taps;return this.taps=b?b.push(a):new Tap(a),this},Chunk.prototype.untap=function(){return this.taps=this.taps.tail,this},Chunk.prototype.render=function(a,b){return a(this,b)},Chunk.prototype.reference=function(a,b,c,d){return"function"==typeof a?(a=a.apply(b.current(),[this,b,null,{auto:c,filters:d}]),a instanceof Chunk?a:this.reference(a,b,c,d)):dust.isThenable(a)?this.await(a,b,null,c,d):dust.isStreamable(a)?this.stream(a,b,null,c,d):dust.isEmpty(a)?this:this.write(dust.filter(a,c,d,b))},Chunk.prototype.section=function(a,b,c,d){var e,f,g,h=c.block,i=c["else"],j=this;if("function"==typeof a&&!dust.isTemplateFn(a)){try{a=a.apply(b.current(),[this,b,c,d])}catch(k){return dust.log(k,ERROR),this.setError(k)}if(a instanceof Chunk)return a}if(dust.isEmptyObject(c))return j;if(dust.isEmptyObject(d)||(b=b.push(d)),dust.isArray(a)){if(h){if(f=a.length,f>0){for(g=b.stack&&b.stack.head||{},g.$len=f,e=0;f>e;e++)g.$idx=e,j=h(j,b.push(a[e],e,f));return g.$idx=void 0,g.$len=void 0,j}if(i)return i(this,b)}}else{if(dust.isThenable(a))return this.await(a,b,c);if(dust.isStreamable(a))return this.stream(a,b,c);if(a===!0){if(h)return h(this,b)}else if(a||0===a){if(h)return h(this,b.push(a))}else if(i)return i(this,b)}return dust.log("Section without corresponding key in template `"+b.getTemplateName()+"`",DEBUG),this},Chunk.prototype.exists=function(a,b,c){var d=c.block,e=c["else"];if(dust.isEmpty(a)){if(e)return e(this,b)}else{if(d)return d(this,b);dust.log("No block for exists check in template `"+b.getTemplateName()+"`",DEBUG)}return this},Chunk.prototype.notexists=function(a,b,c){var d=c.block,e=c["else"];if(dust.isEmpty(a)){if(d)return d(this,b);dust.log("No block for not-exists check in template `"+b.getTemplateName()+"`",DEBUG)}else if(e)return e(this,b);return this},Chunk.prototype.block=function(a,b,c){var d=a||c.block;return d?d(this,b):this},Chunk.prototype.partial=function(a,b,c,d){var e;return void 0===d&&(d=c,c=b),dust.isEmptyObject(d)||(c=c.clone(),e=c.pop(),c=c.push(d).push(e)),dust.isTemplateFn(a)?this.capture(a,b,function(a,b){c.templateName=a,load(a,b,c).end()}):(c.templateName=a,load(a,this,c))},Chunk.prototype.helper=function(a,b,c,d,e){var f,g=this,h=d.filters;if(void 0===e&&(e="h"),!dust.helpers[a])return dust.log("Helper `"+a+"` does not exist",WARN),g;try{return f=dust.helpers[a](g,b,c,d),f instanceof Chunk?f:("string"==typeof h&&(h=h.split("|")),dust.isEmptyObject(c)?g.reference(f,b,e,h):g.section(f,b,c,d))}catch(i){return dust.log("Error in helper `"+a+"`: "+i.message,ERROR),g.setError(i)}},Chunk.prototype.await=function(a,b,c,d,e){return this.map(function(f){a.then(function(a){f=c?f.section(a,b,c):f.reference(a,b,d,e),f.end()},function(a){var d=c&&c.error;d?f.render(d,b.push(a)).end():(dust.log("Unhandled promise rejection in `"+b.getTemplateName()+"`",INFO),f.end())})})},Chunk.prototype.stream=function(a,b,c,d,e){var f=c&&c.block,g=c&&c.error;return this.map(function(h){var i=!1;a.on("data",function(a){i||(f?h=h.map(function(c){c.render(f,b.push(a)).end()}):c||(h=h.reference(a,b,d,e)))}).on("error",function(a){i||(g?h.render(g,b.push(a)):dust.log("Unhandled stream error in `"+b.getTemplateName()+"`",INFO),i||(i=!0,h.end()))}).on("end",function(){i||(i=!0,h.end())})})},Chunk.prototype.capture=function(a,b,c){return this.map(function(d){var e=new Stub(function(a,b){a?d.setError(a):c(b,d)});a(e.head,b).end()})},Chunk.prototype.setError=function(a){return this.error=a,this.root.flush(),this};for(var f in Chunk.prototype)dust._aliases[f]&&(Chunk.prototype[dust._aliases[f]]=Chunk.prototype[f]);Tap.prototype.push=function(a){return new Tap(a,this)},Tap.prototype.go=function(a){for(var b=this;b;)a=b.head(a),b=b.tail;return a};var HCHARS=/[&<>"']/,AMP=/&/g,LT=/</g,GT=/>/g,QUOT=/\"/g,SQUOT=/\'/g;dust.escapeHtml=function(a){return"string"==typeof a||a&&"function"==typeof a.toString?("string"!=typeof a&&(a=a.toString()),HCHARS.test(a)?a.replace(AMP,"&amp;").replace(LT,"&lt;").replace(GT,"&gt;").replace(QUOT,"&quot;").replace(SQUOT,"&#39;"):a):a};var BS=/\\/g,FS=/\//g,CR=/\r/g,LS=/\u2028/g,PS=/\u2029/g,NL=/\n/g,LF=/\f/g,SQ=/'/g,DQ=/"/g,TB=/\t/g;return dust.escapeJs=function(a){return"string"==typeof a?a.replace(BS,"\\\\").replace(FS,"\\/").replace(DQ,'\\"').replace(SQ,"\\'").replace(CR,"\\r").replace(LS,"\\u2028").replace(PS,"\\u2029").replace(NL,"\\n").replace(LF,"\\f").replace(TB,"\\t"):a},dust.escapeJSON=function(a){return JSON?JSON.stringify(a).replace(LS,"\\u2028").replace(PS,"\\u2029").replace(LT,"\\u003c"):(dust.log("JSON is undefined; could not escape `"+a+"`",WARN),a)},dust}),"function"==typeof define&&define.amd&&define.amd.dust===!0&&define(["require","dust.core"],function(require,dust){return dust.onLoad=function(a,b){require([a],function(){b()})},dust});
/*! dustjs-helpers - v1.7.3
* http://dustjs.com/
* Copyright (c) 2015 Aleksander Williams; Released under the MIT License */
!function(a,b){"function"==typeof define&&define.amd&&define.amd.dust===!0?define(["dust.core"],b):"object"==typeof exports?module.exports=b(require("dustjs-linkedin")):b(a.dust)}(this,function(dust){function a(a,b,c){c=c||"INFO",a=a?"{@"+a+"}: ":"",dust.log(a+b,c)}function b(b){k[b]||(a(b,"Deprecation warning: "+b+" is deprecated and will be removed in a future version of dustjs-helpers","WARN"),a(null,"For help and a deprecation timeline, see https://github.com/linkedin/dustjs-helpers/wiki/Deprecated-Features#"+b.replace(/\W+/g,""),"WARN"),k[b]=!0)}function c(a){return a.stack.tail&&a.stack.tail.head&&"undefined"!=typeof a.stack.tail.head.__select__}function d(a){return c(a)&&a.get("__select__")}function e(a,b){var c,d=a.stack.head,e=a.rebase();a.stack&&a.stack.tail&&(e.stack=a.stack.tail);var f={isPending:!1,isResolved:!1,isDeferredComplete:!1,deferreds:[]};for(c in b)f[c]=b[c];return e.push({__select__:f}).push(d,a.stack.index,a.stack.of)}function f(a){var b,c;if(a.isDeferredPending=!0,a.deferreds.length)for(a.isDeferredComplete=!0,b=0,c=a.deferreds.length;c>b;b++)a.deferreds[b]();a.isDeferredPending=!1}function g(a,b){return"function"==typeof b?b.toString().replace(/(^\s+|\s+$)/gm,"").replace(/\n/gm,"").replace(/,\s*/gm,", ").replace(/\)\{/gm,") {"):b}function h(a,b){return function(c,d,e,f){return i(c,d,e,f,a,b)}}function i(b,c,e,f,g,h){var i,k,l,m,n=e.block,o=e["else"],p=d(c)||{};if(p.isResolved&&!p.isDeferredPending)return b;if(f.hasOwnProperty("key"))k=f.key;else{if(!p.hasOwnProperty("key"))return a(g,"No key specified","WARN"),b;k=p.key}return m=f.type||p.type,k=j(c.resolve(k),m),l=j(c.resolve(f.value),m),h(k,l)?(p.isPending||(i=!0,p.isPending=!0),n&&(b=b.render(n,c)),i&&(p.isResolved=!0)):o&&(b=b.render(o,c)),b}function j(a,b){switch(b&&(b=b.toLowerCase()),b){case"number":return+a;case"string":return String(a);case"boolean":return a="false"===a?!1:a,Boolean(a);case"date":return new Date(a)}return a}var k={},l={tap:function(a,c,d){return b("tap"),d.resolve(a)},sep:function(a,b,c){var d=c.block;return b.stack.index===b.stack.of-1?a:d?d(a,b):a},first:function(a,b,c){return 0===b.stack.index?c.block(a,b):a},last:function(a,b,c){return b.stack.index===b.stack.of-1?c.block(a,b):a},contextDump:function(b,c,d,e){var f,h,i=c.resolve(e.to),j=c.resolve(e.key);switch(j){case"full":f=c.stack;break;default:f=c.stack.head}switch(h=JSON.stringify(f,g,2),i){case"console":a("contextDump",h);break;default:h=h.replace(/</g,"\\u003c"),b=b.write(h)}return b},math:function(b,c,g,h){var i,j=h.key,k=h.method,l=h.operand,m=h.round;if(!h.hasOwnProperty("key")||!h.method)return a("math","`key` or `method` was not provided","ERROR"),b;switch(j=parseFloat(c.resolve(j)),l=parseFloat(c.resolve(l)),k){case"mod":0===l&&a("math","Division by 0","ERROR"),i=j%l;break;case"add":i=j+l;break;case"subtract":i=j-l;break;case"multiply":i=j*l;break;case"divide":0===l&&a("math","Division by 0","ERROR"),i=j/l;break;case"ceil":case"floor":case"round":case"abs":i=Math[k](j);break;case"toint":i=parseInt(j,10);break;default:a("math","Method `"+k+"` is not supported","ERROR")}return"undefined"!=typeof i&&(m&&(i=Math.round(i)),g&&g.block?(c=e(c,{key:i}),b=b.render(g.block,c),f(d(c))):b=b.write(i)),b},select:function(b,c,g,h){var i=g.block,j={};return h.hasOwnProperty("key")&&(j.key=c.resolve(h.key)),h.hasOwnProperty("type")&&(j.type=h.type),i?(c=e(c,j),b=b.render(i,c),f(d(c))):a("select","Missing body block","WARN"),b},eq:h("eq",function(a,b){return a===b}),ne:h("ne",function(a,b){return a!==b}),lt:h("lt",function(a,b){return b>a}),lte:h("lte",function(a,b){return b>=a}),gt:h("gt",function(a,b){return a>b}),gte:h("gte",function(a,b){return a>=b}),any:function(b,c,e,f){var g=d(c);return g?g.isDeferredComplete?a("any","Must not be nested inside {@any} or {@none} block","ERROR"):b=b.map(function(a){g.deferreds.push(function(){g.isResolved&&(a=a.render(e.block,c)),a.end()})}):a("any","Must be used inside a {@select} block","ERROR"),b},none:function(b,c,e,f){var g=d(c);return g?g.isDeferredComplete?a("none","Must not be nested inside {@any} or {@none} block","ERROR"):b=b.map(function(a){g.deferreds.push(function(){g.isResolved||(a=a.render(e.block,c)),a.end()})}):a("none","Must be used inside a {@select} block","ERROR"),b},size:function(a,b,c,d){var e,f,g=d.key;if(g=b.resolve(d.key),g&&g!==!0)if(dust.isArray(g))e=g.length;else if(!isNaN(parseFloat(g))&&isFinite(g))e=g;else if("object"==typeof g){e=0;for(f in g)g.hasOwnProperty(f)&&e++}else e=(g+"").length;else e=0;return a.write(e)}};for(var m in l)dust.helpers[m]=l[m];return dust});
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;"undefined"!=typeof window?t=window:"undefined"!=typeof global?t=global:"undefined"!=typeof self&&(t=self),t.page=e()}}(function(){return function e(t,n,r){function i(a,s){if(!n[a]){if(!t[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(o)return o(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var p=n[a]={exports:{}};t[a][0].call(p.exports,function(e){var n=t[a][1][e];return i(n?n:e)},p,p.exports,e,t,n,r)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,t,n){(function(n){"use strict";function r(e,t){if("function"==typeof e)return r("*",e);if("function"==typeof t)for(var n=new s(e),i=1;i<arguments.length;++i)r.callbacks.push(n.middleware(arguments[i]));else"string"==typeof e?r["string"==typeof t?"redirect":"show"](e,t):r.start(e)}function i(e){if(!e.handled){var t;t=y?g+v.hash.replace("#!",""):v.pathname+v.search,t!==e.canonicalPath&&(r.stop(),e.handled=!1,v.href=e.canonicalPath)}}function o(e){return"string"!=typeof e?e:m?decodeURIComponent(e.replace(/\+/g," ")):e}function a(e,t){"/"===e[0]&&0!==e.indexOf(g)&&(e=g+(y?"#!":"")+e);var n=e.indexOf("?");if(this.canonicalPath=e,this.path=e.replace(g,"")||"/",y&&(this.path=this.path.replace("#!","")||"/"),this.title=document.title,this.state=t||{},this.state.path=e,this.querystring=~n?o(e.slice(n+1)):"",this.pathname=o(~n?e.slice(0,n):e),this.params={},this.hash="",!y){if(!~this.path.indexOf("#"))return;var r=this.path.split("#");this.path=r[0],this.hash=o(r[1])||"",this.querystring=this.querystring.split("#")[0]}}function s(e,t){t=t||{},this.path="*"===e?"(.*)":e,this.method="GET",this.regexp=f(this.path,this.keys=[],t)}function u(e){if(1===c(e)&&!(e.metaKey||e.ctrlKey||e.shiftKey||e.defaultPrevented)){for(var t=e.path?e.path[0]:e.target;t&&"A"!==t.nodeName;)t=t.parentNode;if(t&&"A"===t.nodeName&&!t.hasAttribute("download")&&"external"!==t.getAttribute("rel")){var i=t.getAttribute("href");if((y||t.pathname!==v.pathname||!t.hash&&"#"!==i)&&!(i&&i.indexOf("mailto:")>-1)&&!t.target&&p(t.href)){var o=t.pathname+t.search+(t.hash||"");"undefined"!=typeof n&&o.match(/^\/[a-zA-Z]:\//)&&(o=o.replace(/^\/[a-zA-Z]:\//,"/"));var a=o;0===o.indexOf(g)&&(o=o.substr(g.length)),y&&(o=o.replace("#!","")),g&&a===o||(e.preventDefault(),r.show(a))}}}}function c(e){return e=e||window.event,null===e.which?e.button:e.which}function p(e){var t=v.protocol+"//"+v.hostname;return v.port&&(t+=":"+v.port),e&&0===e.indexOf(t)}var f=e("path-to-regexp");t.exports=r;var h,d,l="undefined"!=typeof document&&document.ontouchstart?"touchstart":"click",v="undefined"!=typeof window&&(window.history.location||window.location),w=!0,m=!0,g="",y=!1;r.callbacks=[],r.exits=[],r.current="",r.len=0,r.base=function(e){return 0===arguments.length?g:void(g=e)},r.start=function(e){if(e=e||{},!h&&(h=!0,!1===e.dispatch&&(w=!1),!1===e.decodeURLComponents&&(m=!1),!1!==e.popstate&&window.addEventListener("popstate",x,!1),!1!==e.click&&document.addEventListener(l,u,!1),!0===e.hashbang&&(y=!0),w)){var t=y&&~v.hash.indexOf("#!")?v.hash.substr(2)+v.search:v.pathname+v.search+v.hash;r.replace(t,null,!0,w)}},r.stop=function(){h&&(r.current="",r.len=0,h=!1,document.removeEventListener(l,u,!1),window.removeEventListener("popstate",x,!1))},r.show=function(e,t,n,i){var o=new a(e,t);return r.current=o.path,!1!==n&&r.dispatch(o),!1!==o.handled&&!1!==i&&o.pushState(),o},r.back=function(e,t){r.len>0?(history.back(),r.len--):e?setTimeout(function(){r.show(e,t)}):setTimeout(function(){r.show(g,t)})},r.redirect=function(e,t){"string"==typeof e&&"string"==typeof t&&r(e,function(e){setTimeout(function(){r.replace(t)},0)}),"string"==typeof e&&"undefined"==typeof t&&setTimeout(function(){r.replace(e)},0)},r.replace=function(e,t,n,i){var o=new a(e,t);return r.current=o.path,o.init=n,o.save(),!1!==i&&r.dispatch(o),o},r.dispatch=function(e){function t(){var e=r.exits[s++];return e?void e(o,t):n()}function n(){var t=r.callbacks[a++];return e.path!==r.current?void(e.handled=!1):t?void t(e,n):i(e)}var o=d,a=0,s=0;d=e,o?t():n()},r.exit=function(e,t){if("function"==typeof e)return r.exit("*",e);for(var n=new s(e),i=1;i<arguments.length;++i)r.exits.push(n.middleware(arguments[i]))},r.Context=a,a.prototype.pushState=function(){r.len++,history.pushState(this.state,this.title,y&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},a.prototype.save=function(){history.replaceState(this.state,this.title,y&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},r.Route=s,s.prototype.middleware=function(e){var t=this;return function(n,r){return t.match(n.path,n.params)?e(n,r):void r()}},s.prototype.match=function(e,t){var n=this.keys,r=e.indexOf("?"),i=~r?e.slice(0,r):e,a=this.regexp.exec(decodeURIComponent(i));if(!a)return!1;for(var s=1,u=a.length;u>s;++s){var c=n[s-1],p=o(a[s]);void 0===p&&hasOwnProperty.call(t,c.name)||(t[c.name]=p)}return!0};var x=function(){var e=!1;if("undefined"!=typeof window)return"complete"===document.readyState?e=!0:window.addEventListener("load",function(){setTimeout(function(){e=!0},0)}),function(t){if(e)if(t.state){var n=t.state.path;r.replace(n,t.state)}else r.show(v.pathname+v.hash,void 0,void 0,!1)}}();r.sameOrigin=p}).call(this,e("_process"))},{_process:2,"path-to-regexp":3}],2:[function(e,t,n){function r(){}var i=t.exports={};i.nextTick=function(){var e="undefined"!=typeof window&&window.setImmediate,t="undefined"!=typeof window&&window.MutationObserver,n="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};var r=[];if(t){var i=document.createElement("div"),o=new MutationObserver(function(){var e=r.slice();r.length=0,e.forEach(function(e){e()})});return o.observe(i,{attributes:!0}),function(e){r.length||i.setAttribute("yes","no"),r.push(e)}}return n?(window.addEventListener("message",function(e){var t=e.source;if((t===window||null===t)&&"process-tick"===e.data&&(e.stopPropagation(),r.length>0)){var n=r.shift();n()}},!0),function(e){r.push(e),window.postMessage("process-tick","*")}):function(e){setTimeout(e,0)}}(),i.title="browser",i.browser=!0,i.env={},i.argv=[],i.on=r,i.addListener=r,i.once=r,i.off=r,i.removeListener=r,i.removeAllListeners=r,i.emit=r,i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")}},{}],3:[function(e,t,n){function r(e){for(var t,n=[],r=0,i=0,o="";null!=(t=w.exec(e));){var a=t[0],u=t[1],c=t.index;if(o+=e.slice(i,c),i=c+a.length,u)o+=u[1];else{o&&(n.push(o),o="");var p=t[2],f=t[3],h=t[4],d=t[5],l=t[6],v=t[7],m="+"===l||"*"===l,g="?"===l||"*"===l,y=p||"/",x=h||d||(v?".*":"[^"+y+"]+?");n.push({name:f||r++,prefix:p||"",delimiter:y,optional:g,repeat:m,pattern:s(x)})}}return i<e.length&&(o+=e.substr(i)),o&&n.push(o),n}function i(e){return o(r(e))}function o(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^"+e[n].pattern+"$"));return function(n){for(var r="",i=n||{},o=0;o<e.length;o++){var a=e[o];if("string"!=typeof a){var s,u=i[a.name];if(null==u){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to be defined')}if(v(u)){if(!a.repeat)throw new TypeError('Expected "'+a.name+'" to not repeat, but received "'+u+'"');if(0===u.length){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to not be empty')}for(var c=0;c<u.length;c++){if(s=encodeURIComponent(u[c]),!t[o].test(s))throw new TypeError('Expected all "'+a.name+'" to match "'+a.pattern+'", but received "'+s+'"');r+=(0===c?a.prefix:a.delimiter)+s}}else{if(s=encodeURIComponent(u),!t[o].test(s))throw new TypeError('Expected "'+a.name+'" to match "'+a.pattern+'", but received "'+s+'"');r+=a.prefix+s}}else r+=a}return r}}function a(e){return e.replace(/([.+*?=^!:${}()[\]|\/])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function u(e,t){return e.keys=t,e}function c(e){return e.sensitive?"":"i"}function p(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,pattern:null});return u(e,t)}function f(e,t,n){for(var r=[],i=0;i<e.length;i++)r.push(l(e[i],t,n).source);var o=new RegExp("(?:"+r.join("|")+")",c(n));return u(o,t)}function h(e,t,n){for(var i=r(e),o=d(i,n),a=0;a<i.length;a++)"string"!=typeof i[a]&&t.push(i[a]);return u(o,t)}function d(e,t){t=t||{};for(var n=t.strict,r=t.end!==!1,i="",o=e[e.length-1],s="string"==typeof o&&/\/$/.test(o),u=0;u<e.length;u++){var p=e[u];if("string"==typeof p)i+=a(p);else{var f=a(p.prefix),h=p.pattern;p.repeat&&(h+="(?:"+f+h+")*"),h=p.optional?f?"(?:"+f+"("+h+"))?":"("+h+")?":f+"("+h+")",i+=h}}return n||(i=(s?i.slice(0,-2):i)+"(?:\\/(?=$))?"),i+=r?"$":n&&s?"":"(?=\\/|$)",new RegExp("^"+i,c(t))}function l(e,t,n){return t=t||[],v(t)?n||(n={}):(n=t,t=[]),e instanceof RegExp?p(e,t,n):v(e)?f(e,t,n):h(e,t,n)}var v=e("isarray");t.exports=l,t.exports.parse=r,t.exports.compile=i,t.exports.tokensToFunction=o,t.exports.tokensToRegExp=d;var w=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))"].join("|"),"g")},{isarray:4}],4:[function(e,t,n){t.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},{}]},{},[1])(1)});
/*!
 * EventEmitter v5.0.0 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */
(function(){"use strict";function t(){}function i(t,n){for(var e=t.length;e--;)if(t[e].listener===n)return e;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var e=t.prototype,r=this,s=r.EventEmitter;e.getListeners=function(n){var r,e,t=this._getEvents();if(n instanceof RegExp){r={};for(e in t)t.hasOwnProperty(e)&&n.test(e)&&(r[e]=t[e])}else r=t[n]||(t[n]=[]);return r},e.flattenListeners=function(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push(t[e].listener);return n},e.getListenersAsObject=function(n){var e,t=this.getListeners(n);return t instanceof Array&&(e={},e[n]=t),e||t},e.addListener=function(r,e){var t,n=this.getListenersAsObject(r),s="object"==typeof e;for(t in n)n.hasOwnProperty(t)&&-1===i(n[t],e)&&n[t].push(s?e:{listener:e,once:!1});return this},e.on=n("addListener"),e.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},e.once=n("addOnceListener"),e.defineEvent=function(e){return this.getListeners(e),this},e.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},e.removeListener=function(r,s){var n,e,t=this.getListenersAsObject(r);for(e in t)t.hasOwnProperty(e)&&(n=i(t[e],s),-1!==n&&t[e].splice(n,1));return this},e.off=n("removeListener"),e.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},e.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},e.manipulateListeners=function(r,t,i){var e,n,s=r?this.removeListener:this.addListener,o=r?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(e=i.length;e--;)s.call(this,t,i[e]);else for(e in t)t.hasOwnProperty(e)&&(n=t[e])&&("function"==typeof n?s.call(this,e,n):o.call(this,e,n));return this},e.removeEvent=function(e){var t,r=typeof e,n=this._getEvents();if("string"===r)delete n[e];else if(e instanceof RegExp)for(t in n)n.hasOwnProperty(t)&&e.test(t)&&delete n[t];else delete this._events;return this},e.removeAllListeners=n("removeEvent"),e.emitEvent=function(n,u){var r,e,t,i,o,s=this.getListenersAsObject(n);for(i in s)if(s.hasOwnProperty(i))for(r=s[i].slice(0),t=0;t<r.length;t++)e=r[t],e.once===!0&&this.removeListener(n,e.listener),o=e.listener.apply(this,u||[]),o===this._getOnceReturnValue()&&this.removeListener(n,e.listener);return this},e.trigger=n("emitEvent"),e.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},e.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},e._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},e._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return r.EventEmitter=s,t},"function"==typeof define&&define.amd?define(function(){return t}):"object"==typeof module&&module.exports?module.exports=t:r.EventEmitter=t}).call(this);
/* docma (dust) compiled templates */
(function(dust){dust.register("docma-404",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class=\"container container-boxed\"><div class=\"row\"><div class=\"col-md-12\"><br /><br /><h1>404</h1><hr /><h3>Page Not Found</h3><br />The file or page you have requested is not found. &nbsp;&nbsp;<br />Please make sure page address is entered correctly.</div></div><br /><br /><br /></div></div>");}body_0.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-api",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{}).x(ctx.getPath(false, ["template","options","sidebar"]),ctx,{"block":body_1},{}).w("<div id=\"wrapper\">").x(ctx.getPath(false, ["template","options","sidebar"]),ctx,{"block":body_2},{}).w("<div id=\"page-content-wrapper\"><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-lg-12\">").s(ctx.get(["documentation"], false),ctx,{"block":body_3},{}).w("</div></div><br /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" href=\"https://github.com/onury/docma\">Docma</a></b>.</span></div></div></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div class=\"sidebar-toggle\"><span class=\"glyphicon glyphicon-menu-hamburger\"></span></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<div id=\"sidebar-wrapper\">").p("sidebar",ctx,ctx,{}).w("</div>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.p("symbol",ctx,ctx,{});}body_3.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-content",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class=\"container container-boxed\"><div class=\"row\"><div class=\"col-md-12\"><div id=\"docma-content\"></div></div></div><br /><hr /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" href=\"https://github.com/onury/docma\">Docma</a></b>.</span></div></div>");}body_0.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("enums",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["$members"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Enumeration</th><th>Type</th><th>Value</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["$members"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.getPath(true, []),ctx,"h",["$longname","s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$val"]).w("</code></td><td>").f(ctx.getPath(true, []),ctx,"h",["s","$desc"]).w("</td></tr>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navbar",body_0);function body_0(chk,ctx){return chk.x(ctx.getPath(false, ["template","options","navbar"]),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<nav class=\"navbar navbar-default navbar-fixed-top\"><div class=\"").x(ctx.get(["boxed"], false),ctx,{"else":body_2,"block":body_3},{}).w("\"><div class=\"nav navbar-left nav-left\"><div class=\"navbar-brand\"><b>").f(ctx.getPath(false, ["template","options","title"]),ctx,"h").w("</b></div></div>").h("gt",ctx,{"block":body_4},{"key":ctx.getPath(false, ["template","options","navItems","length"]),"value":0},"h").w("</div></nav>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("container-fluid");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("container container-boxed");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<ul class=\"nav navbar-nav\">").s(ctx.getPath(false, ["template","options","navItems"]),ctx,{"block":body_5},{}).w("</ul>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.x(ctx.get(["items"], false),ctx,{"else":body_6,"block":body_7},{});}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<li class=\"dropdown\"><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_8,"block":body_9},{}).w("\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"ico ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>&nbsp;&nbsp;").f(ctx.get(["label"], false),ctx,"h").w("&nbsp;<span class=\"caret\"></span></a><ul class=\"dropdown-menu\">").s(ctx.get(["items"], false),ctx,{"block":body_10},{}).w("</ul></li>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("#");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_10.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navitem",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["separator"], false),ctx,{"else":body_1,"block":body_5},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<li><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_2,"block":body_3},{}).w("\" target=\"").f(ctx.get(["target"], false),ctx,"h").w("\">").x(ctx.get(["iconClass"], false),ctx,{"block":body_4},{}).f(ctx.get(["label"], false),ctx,"h",["s"]).w("</a></li>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("#");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<i class=\"ico ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>&nbsp;&nbsp;");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<li role=\"separator\" class=\"divider\"></li>");}body_5.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("params",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["params"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["params"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td>").x(ctx.get(["optional"], false),ctx,{"block":body_3},{}).w("</td><td>").f(ctx.getPath(true, []),ctx,"h",["s","$param_desc"]).w("</td></tr>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<code>").f(ctx.getPath(true, []),ctx,"h",["$def"]).w("</code>");}body_3.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("properties",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["properties"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["properties"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td>").f(ctx.get(["description"], false),ctx,"h",["s","$p"]).w("</td></tr>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("sidebar",body_0);function body_0(chk,ctx){return chk.w("<div class=\"sidebar-header\"><div class=\"sidebar-title\"><span><b>").f(ctx.getPath(false, ["template","options","title"]),ctx,"h").w("</b></span></div>").x(ctx.getPath(false, ["template","options","search"]),ctx,{"block":body_1},{}).w("</div><ul class=\"sidebar-nav\">").s(ctx.get(["symbols"], false),ctx,{"block":body_2},{}).w("</ul>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div class=\"sidebar-search\"><input id=\"txt-search\" type=\"search\" class=\"form-control\" placeholder=\"Search...\" /><div class=\"sidebar-search-clean\"><span class=\"glyphicon glyphicon-remove-circle\"></span></div></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<li>").f(ctx.getPath(true, []),ctx,"h",["s","$menuitem"]).w("</li>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("symbol",body_0);function body_0(chk,ctx){return chk.w("<div id=\"").f(ctx.getPath(true, []),ctx,"h",["$id"]).w("\" class=\"symbol-container\"><div class=\"symbol-heading\"><div class=\"symbol\"><a href=\"#").f(ctx.getPath(true, []),ctx,"h",["$id"]).w("\"><span class=\"glyphicon glyphicon-link color-gray-light\" aria-hidden=\"true\"></span><code class=\"symbol-name\">").f(ctx.getPath(true, []),ctx,"h",["s","$longname_params"]).w("</code><span class=\"symbol-sep\">").f(ctx.getPath(true, []),ctx,"h",["$type_sep"]).w("</span><code class=\"symbol-type\">").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></a>").f(ctx.getPath(true, []),ctx,"h",["s","$tags"]).w("</div>").x(ctx.get(["augments"], false),ctx,{"block":body_1},{}).x(ctx.get(["alias"], false),ctx,{"block":body_2},{}).w("</div><div class=\"symbol-definition\">").f(ctx.getPath(true, []),ctx,"h",["s","$desc"]).x(ctx.get(["classdesc"], false),ctx,{"block":body_3},{}).x(ctx.get(["see"], false),ctx,{"block":body_8},{}).h("eq",ctx,{"else":body_13,"block":body_16},{"key":ctx.getPath(false, ["meta","code","type"]),"value":"ClassDeclaration"},"h").x(ctx.get(["returns"], false),ctx,{"block":body_17},{}).x(ctx.get(["exceptions"], false),ctx,{"block":body_20},{}).x(ctx.get(["isEnum"], false),ctx,{"block":body_23},{}).x(ctx.get(["examples"], false),ctx,{"block":body_24},{}).w("</div></div><hr />").h("eq",ctx,{"block":body_26},{"key":ctx.getPath(false, ["meta","code","type"]),"value":"ClassDeclaration"},"h").x(ctx.get(["isEnum"], false),ctx,{"else":body_28,"block":body_30},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<p class=\"space-left-sm\"><b>Extends:</b> ").f(ctx.getPath(true, []),ctx,"h",["s","$extends"]).w("</p>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<p class=\"space-left-sm\"><b>Alias:</b> <code>").f(ctx.get(["alias"], false),ctx,"h",["s","$dot_prop"]).w("</code></p>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<table>").x(ctx.get(["version"], false),ctx,{"block":body_4},{}).x(ctx.get(["copyright"], false),ctx,{"block":body_5},{}).x(ctx.get(["author"], false),ctx,{"block":body_6},{}).x(ctx.get(["license"], false),ctx,{"block":body_7},{}).w("</table>");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<tr><td><b>Version:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.get(["version"], false),ctx,"h",["s"]).w("</td></tr>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<tr><td><b>Copyright:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.get(["copyright"], false),ctx,"h",["s"]).w("</td></tr>");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<tr><td><b>Author:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.get(["author"], false),ctx,"h",["s","$author"]).w("</td></tr>");}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<tr><td><b>License:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.get(["license"], false),ctx,"h",["s"]).w("</td></tr>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("<p><b>See</b>").h("gt",ctx,{"else":body_9,"block":body_11},{"key":ctx.getPath(false, ["see","length"]),"value":1},"h").w("</p><br />");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.s(ctx.get(["see"], false),ctx,{"block":body_10},{});}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.w("&nbsp;").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]);}body_10.__dustBody=!0;function body_11(chk,ctx){return chk.w("<ul>").s(ctx.get(["see"], false),ctx,{"block":body_12},{}).w("</ul>");}body_11.__dustBody=!0;function body_12(chk,ctx){return chk.w("<li>").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]).w("</li>");}body_12.__dustBody=!0;function body_13(chk,ctx){return chk.p("params",ctx,ctx.rebase(ctx.getPath(true, [])),{}).x(ctx.get(["isEnum"], false),ctx,{"else":body_14,"block":body_15},{});}body_13.__dustBody=!0;function body_14(chk,ctx){return chk.p("properties",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_14.__dustBody=!0;function body_15(chk,ctx){return chk;}body_15.__dustBody=!0;function body_16(chk,ctx){return chk;}body_16.__dustBody=!0;function body_17(chk,ctx){return chk.h("gt",ctx,{"else":body_18,"block":body_19},{"key":ctx.getPath(false, ["returns","length"]),"value":"1","type":"number"},"h");}body_17.__dustBody=!0;function body_18(chk,ctx){return chk.w("<p><b>Returns:</b>&nbsp;&nbsp;").f(ctx.getPath(true, []),ctx,"h",["s","$returns"]).w("</p>");}body_18.__dustBody=!0;function body_19(chk,ctx){return chk.w("<b>Returns:</b><p class=\"pad-left\">").f(ctx.getPath(true, []),ctx,"h",["s","$returns"]).w("</p>");}body_19.__dustBody=!0;function body_20(chk,ctx){return chk.h("gt",ctx,{"else":body_21,"block":body_22},{"key":ctx.getPath(false, ["exceptions","length"]),"value":"1","type":"number"},"h");}body_20.__dustBody=!0;function body_21(chk,ctx){return chk.w("<p><b>Throws:</b>&nbsp;&nbsp;").f(ctx.getPath(true, []),ctx,"h",["s","$exceptions"]).w("</p>");}body_21.__dustBody=!0;function body_22(chk,ctx){return chk.w("<b>Throws:</b><p class=\"pad-left\">").f(ctx.getPath(true, []),ctx,"h",["s","$exceptions"]).w("</p>");}body_22.__dustBody=!0;function body_23(chk,ctx){return chk.p("enums",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_23.__dustBody=!0;function body_24(chk,ctx){return chk.w("<p><b>Example</b></p>").s(ctx.get(["examples"], false),ctx,{"block":body_25},{});}body_24.__dustBody=!0;function body_25(chk,ctx){return chk.w("<pre><code>").f(ctx.getPath(true, []),ctx,"h",["$nt"]).w("</code></pre>");}body_25.__dustBody=!0;function body_26(chk,ctx){return chk.x(ctx.get(["$constructor"], false),ctx,{"block":body_27},{});}body_26.__dustBody=!0;function body_27(chk,ctx){return chk.p("symbol",ctx,ctx.rebase(ctx.get(["$constructor"], false)),{});}body_27.__dustBody=!0;function body_28(chk,ctx){return chk.s(ctx.get(["$members"], false),ctx,{"block":body_29},{});}body_28.__dustBody=!0;function body_29(chk,ctx){return chk.p("symbol",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_29.__dustBody=!0;function body_30(chk,ctx){return chk;}body_30.__dustBody=!0;return body_0}(dust));
/*!
 * Docma (Web) Core
 * https://github.com/onury/docma
 * @license MIT
 */
var docma = {"routes":[{"id":"api:","type":"api","name":"_def_","path":"/?api","contentPath":null},{"id":"api:docma","type":"api","name":"docma","path":"/?api=docma","contentPath":null},{"id":"api:docma-web","type":"api","name":"docma-web","path":"/?api=docma-web","contentPath":null},{"id":"api:docma-web-utils","type":"api","name":"docma-web-utils","path":"/?api=docma-web-utils","contentPath":null},{"id":"content:changelog","type":"content","name":"changelog","path":"/?content=changelog","contentPath":"content/changelog.html"},{"id":"content:default-template","type":"content","name":"default-template","path":"/?content=default-template","contentPath":"content/default-template.html"},{"id":"content:docma-filters","type":"content","name":"docma-filters","path":"/?content=docma-filters","contentPath":"content/docma-filters.html"},{"id":"content:home","type":"content","name":"home","path":"/?content=home","contentPath":"content/home.html"},{"id":"content:templates","type":"content","name":"templates","path":"/?content=templates","contentPath":"content/templates.html"},{"id":"content:md-test","type":"content","name":"md-test","path":"/?content=md-test","contentPath":"content/md-test.html"},{"id":"content:guide","type":"content","name":"guide","path":"/?content=guide","contentPath":"content/guide.html"}],"apis":{"_def_":{"documentation":[],"symbols":[]},"docma":{"documentation":[{"comment":"/**\n     *  Docma (builder) class for generating HTML documentation from the given\n     *  Javascript and/or markdown source files.\n     *\n     *  This documentation you're reading is built with Docma.\n     *  @class\n     *\n     *  @example\n     *  var Docma = require('docma'),\n     *  \tdocma = new Docma();\n     */","meta":{"range":[5306,5325],"filename":"docma.js","lineno":157,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100000393","name":"Docma","type":"FunctionDeclaration","paramnames":[]}},"description":"Docma (builder) class for generating HTML documentation from the given\n Javascript and/or markdown source files.\n\n This documentation you're reading is built with Docma.","kind":"class","examples":["var Docma = require('docma'),\n \tdocma = new Docma();"],"name":"Docma","longname":"<anonymous>~Docma","memberof":"<anonymous>","scope":"inner","params":[],"$longname":"Docma","$members":[{"comment":"/**\n     *  Parses the given source files and builds a Single Page Application (SPA)\n     *  with the given Docma template.\n     *\n     *  For a verbose build, `debug` option should be enabled or set to a high\n     *  value when the Docma instance is initialized.\n     *\n     *  @param {Object|String} config\n     *         Either a build configuration object or the file path of a\n     *         configuration JSON file.\n     *         See {@link #Docma~BuildConfiguration|`BuildConfiguration`} for details.\n     *\n     *  @returns {Promise}\n     *           Promise that returns a `Boolean` value for whether the build\n     *           operation is successful. This will always returns `true` if\n     *           no errors occur. You should `.catch()` the errors of the\n     *           promise chain.\n     *\n     *  @example\n     *  var docma = new Docma();\n     *  docma.build(config)\n     *  \t.then(function (success) {\n     *  \t\tconsole.log('Documentation is built successfully.');\n     *  \t})\n     *  \t.catch(function (error) {\n     *  \t\tconsole.log(error);\n     *  \t});\n     */","meta":{"range":[24624,28530],"filename":"docma.js","lineno":627,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100001866","name":"Docma.prototype.build","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["config"]},"vars":{"self":"<anonymous>~Docma#build~self","":null}},"description":"Parses the given source files and builds a Single Page Application (SPA)\n with the given Docma template.\n\n For a verbose build, `debug` option should be enabled or set to a high\n value when the Docma instance is initialized.","params":[{"type":{"names":["Object","String"]},"description":"Either a build configuration object or the file path of a\n        configuration JSON file.\n        See {@link #Docma~BuildConfiguration|`BuildConfiguration`} for details.","name":"config"}],"returns":[{"type":{"names":["Promise"]},"description":"Promise that returns a `Boolean` value for whether the build\n          operation is successful. This will always returns `true` if\n          no errors occur. You should `.catch()` the errors of the\n          promise chain."}],"examples":["var docma = new Docma();\n docma.build(config)\n \t.then(function (success) {\n \t\tconsole.log('Documentation is built successfully.');\n \t})\n \t.catch(function (error) {\n \t\tconsole.log(error);\n \t});"],"name":"build","longname":"<anonymous>~Docma#build","kind":"function","memberof":"<anonymous>~Docma","scope":"instance","$longname":"Docma#build"},{"comment":"/**\n     *  Creates a new instance of `Docma`.\n     *  This is equivalent to `new Docma(config)`.\n     *\n     *  @returns {Docma} - Docma instance.\n     */","meta":{"range":[33586,33648],"filename":"docma.js","lineno":875,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002327","name":"Docma.create","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":[]}},"description":"Creates a new instance of `Docma`.\n This is equivalent to `new Docma(config)`.","returns":[{"type":{"names":["Docma"]},"description":"- Docma instance."}],"name":"create","longname":"<anonymous>~Docma.create","kind":"function","memberof":"<anonymous>~Docma","scope":"static","$longname":"Docma.create"},{"comment":"/**\n     *  Enumerates bitwise debug flags.\n     *  @enum {Number}\n     */","meta":{"range":[32105,33316],"filename":"docma.js","lineno":822,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002307","name":"Docma.Debug","type":"ObjectExpression","funcscope":"<anonymous>","value":"{\"DISABLED\":0,\"BUILD_LOGS\":1,\"WEB_LOGS\":2,\"VERBOSE\":4,\"NO_MINIFY\":8,\"JSDOC_OUTPUT\":16,\"ALL\":31}","paramnames":[]}},"description":"Enumerates bitwise debug flags.","kind":"member","isEnum":true,"type":{"names":["Number"]},"name":"Debug","longname":"<anonymous>~Docma.Debug","memberof":"<anonymous>~Docma","scope":"static","properties":[{"comment":"/**\n         *  Enables all debug flags.\n         *  @type {Number}\n         */","meta":{"range":[33303,33310],"filename":"docma.js","lineno":862,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002324","name":"ALL","type":"Literal","value":31}},"description":"Enables all debug flags.","type":{"names":["Number"]},"name":"ALL","longname":"<anonymous>~Docma.Debug.ALL","kind":"member","memberof":"<anonymous>~Docma.Debug","scope":"static","defaultvalue":31},{"comment":"/**\n         *  Outputs build logs to the Node console.\n         *  @type {Number}\n         */","meta":{"range":[32336,32349],"filename":"docma.js","lineno":832,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002314","name":"BUILD_LOGS","type":"Literal","value":1}},"description":"Outputs build logs to the Node console.","type":{"names":["Number"]},"name":"BUILD_LOGS","longname":"<anonymous>~Docma.Debug.BUILD_LOGS","kind":"member","memberof":"<anonymous>~Docma.Debug","scope":"static","defaultvalue":1},{"comment":"/**\n         *  Disables debugging.\n         *  @type {Number}\n         */","meta":{"range":[32212,32223],"filename":"docma.js","lineno":827,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002312","name":"DISABLED","type":"Literal","value":0}},"description":"Disables debugging.","type":{"names":["Number"]},"name":"DISABLED","longname":"<anonymous>~Docma.Debug.DISABLED","kind":"member","memberof":"<anonymous>~Docma.Debug","scope":"static","defaultvalue":0},{"comment":"/**\n         *  Outputs one or more `[name.]jsdoc.json` files that include\n         *  documentation data for each (grouped) javascript source.\n         *  `name` is the group name you give when you define the source\n         *  files. This is useful for investigating the raw JSDoc output.\n         *  @type {Number}\n         */","meta":{"range":[33189,33205],"filename":"docma.js","lineno":857,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002322","name":"JSDOC_OUTPUT","type":"Literal","value":16}},"description":"Outputs one or more `[name.]jsdoc.json` files that include\n documentation data for each (grouped) javascript source.\n `name` is the group name you give when you define the source\n files. This is useful for investigating the raw JSDoc output.","type":{"names":["Number"]},"name":"JSDOC_OUTPUT","longname":"<anonymous>~Docma.Debug.JSDOC_OUTPUT","kind":"member","memberof":"<anonymous>~Docma.Debug","scope":"static","defaultvalue":16},{"comment":"/**\n         *  Disables minification for the generated web app assets such as\n         *  Javascript files. This is useful if you're debugging a custom\n         *  Docma template.\n         *  @type {Number}\n         */","meta":{"range":[32829,32841],"filename":"docma.js","lineno":849,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002320","name":"NO_MINIFY","type":"Literal","value":8}},"description":"Disables minification for the generated web app assets such as\n Javascript files. This is useful if you're debugging a custom\n Docma template.","type":{"names":["Number"]},"name":"NO_MINIFY","longname":"<anonymous>~Docma.Debug.NO_MINIFY","kind":"member","memberof":"<anonymous>~Docma.Debug","scope":"static","defaultvalue":8},{"comment":"/**\n         *  Outputs verbose logs to consoles.\n         *  @type {Number}\n         */","meta":{"range":[32581,32591],"filename":"docma.js","lineno":842,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002318","name":"VERBOSE","type":"Literal","value":4}},"description":"Outputs verbose logs to consoles.","type":{"names":["Number"]},"name":"VERBOSE","longname":"<anonymous>~Docma.Debug.VERBOSE","kind":"member","memberof":"<anonymous>~Docma.Debug","scope":"static","defaultvalue":4},{"comment":"/**\n         *  Outputs app logs to the browser console.\n         *  @type {Number}\n         */","meta":{"range":[32463,32474],"filename":"docma.js","lineno":837,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002316","name":"WEB_LOGS","type":"Literal","value":2}},"description":"Outputs app logs to the browser console.","type":{"names":["Number"]},"name":"WEB_LOGS","longname":"<anonymous>~Docma.Debug.WEB_LOGS","kind":"member","memberof":"<anonymous>~Docma.Debug","scope":"static","defaultvalue":2}],"$longname":"Docma.Debug","$members":[{"comment":"/**\n         *  Enables all debug flags.\n         *  @type {Number}\n         */","meta":{"range":[33303,33310],"filename":"docma.js","lineno":862,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002324","name":"ALL","type":"Literal","value":31}},"description":"Enables all debug flags.","type":{"names":["Number"]},"name":"ALL","longname":"<anonymous>~Docma.Debug.ALL","kind":"member","memberof":"<anonymous>~Docma.Debug","scope":"static","defaultvalue":31,"$longname":"Docma.Debug.ALL"},{"comment":"/**\n         *  Outputs build logs to the Node console.\n         *  @type {Number}\n         */","meta":{"range":[32336,32349],"filename":"docma.js","lineno":832,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002314","name":"BUILD_LOGS","type":"Literal","value":1}},"description":"Outputs build logs to the Node console.","type":{"names":["Number"]},"name":"BUILD_LOGS","longname":"<anonymous>~Docma.Debug.BUILD_LOGS","kind":"member","memberof":"<anonymous>~Docma.Debug","scope":"static","defaultvalue":1,"$longname":"Docma.Debug.BUILD_LOGS"},{"comment":"/**\n         *  Disables debugging.\n         *  @type {Number}\n         */","meta":{"range":[32212,32223],"filename":"docma.js","lineno":827,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002312","name":"DISABLED","type":"Literal","value":0}},"description":"Disables debugging.","type":{"names":["Number"]},"name":"DISABLED","longname":"<anonymous>~Docma.Debug.DISABLED","kind":"member","memberof":"<anonymous>~Docma.Debug","scope":"static","defaultvalue":0,"$longname":"Docma.Debug.DISABLED"},{"comment":"/**\n         *  Outputs one or more `[name.]jsdoc.json` files that include\n         *  documentation data for each (grouped) javascript source.\n         *  `name` is the group name you give when you define the source\n         *  files. This is useful for investigating the raw JSDoc output.\n         *  @type {Number}\n         */","meta":{"range":[33189,33205],"filename":"docma.js","lineno":857,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002322","name":"JSDOC_OUTPUT","type":"Literal","value":16}},"description":"Outputs one or more `[name.]jsdoc.json` files that include\n documentation data for each (grouped) javascript source.\n `name` is the group name you give when you define the source\n files. This is useful for investigating the raw JSDoc output.","type":{"names":["Number"]},"name":"JSDOC_OUTPUT","longname":"<anonymous>~Docma.Debug.JSDOC_OUTPUT","kind":"member","memberof":"<anonymous>~Docma.Debug","scope":"static","defaultvalue":16,"$longname":"Docma.Debug.JSDOC_OUTPUT"},{"comment":"/**\n         *  Disables minification for the generated web app assets such as\n         *  Javascript files. This is useful if you're debugging a custom\n         *  Docma template.\n         *  @type {Number}\n         */","meta":{"range":[32829,32841],"filename":"docma.js","lineno":849,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002320","name":"NO_MINIFY","type":"Literal","value":8}},"description":"Disables minification for the generated web app assets such as\n Javascript files. This is useful if you're debugging a custom\n Docma template.","type":{"names":["Number"]},"name":"NO_MINIFY","longname":"<anonymous>~Docma.Debug.NO_MINIFY","kind":"member","memberof":"<anonymous>~Docma.Debug","scope":"static","defaultvalue":8,"$longname":"Docma.Debug.NO_MINIFY"},{"comment":"/**\n         *  Outputs verbose logs to consoles.\n         *  @type {Number}\n         */","meta":{"range":[32581,32591],"filename":"docma.js","lineno":842,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002318","name":"VERBOSE","type":"Literal","value":4}},"description":"Outputs verbose logs to consoles.","type":{"names":["Number"]},"name":"VERBOSE","longname":"<anonymous>~Docma.Debug.VERBOSE","kind":"member","memberof":"<anonymous>~Docma.Debug","scope":"static","defaultvalue":4,"$longname":"Docma.Debug.VERBOSE"},{"comment":"/**\n         *  Outputs app logs to the browser console.\n         *  @type {Number}\n         */","meta":{"range":[32463,32474],"filename":"docma.js","lineno":837,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002316","name":"WEB_LOGS","type":"Literal","value":2}},"description":"Outputs app logs to the browser console.","type":{"names":["Number"]},"name":"WEB_LOGS","longname":"<anonymous>~Docma.Debug.WEB_LOGS","kind":"member","memberof":"<anonymous>~Docma.Debug","scope":"static","defaultvalue":2,"$longname":"Docma.Debug.WEB_LOGS"}]},{"comment":"/**\n     *  Enumerates Docma SPA route types.\n     *  @enum {String}\n     *  @readonly\n     *\n     *  @example\n     *  // routing method: query\n     *  type     name              path\n     *  -------  ----------------  --------------------------\n     *  api      _def_             /?api\n     *  api      docma-web         /?api=docma-web\n     *  content  templates         /?content=templates\n     *  content  guide             /?content=guide\n     *\n     *  @example\n     *  // routing method: path\n     *  type     name              path\n     *  -------  ----------------  --------------------------\n     *  api      _def_             /api\n     *  api      docma-web         /api/docma-web\n     *  content  templates         /templates\n     *  content  guide             /guide\n     */","meta":{"range":[30665,31067],"filename":"docma.js","lineno":777,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002287","name":"Docma.RouteType","type":"ObjectExpression","funcscope":"<anonymous>","value":"{\"API\":\"api\",\"CONTENT\":\"content\"}","paramnames":[]}},"description":"Enumerates Docma SPA route types.","kind":"member","isEnum":true,"type":{"names":["String"]},"readonly":true,"examples":["// routing method: query\n type     name              path\n -------  ----------------  --------------------------\n api      _def_             /?api\n api      docma-web         /?api=docma-web\n content  templates         /?content=templates\n content  guide             /?content=guide\n\n ","// routing method: path\n type     name              path\n -------  ----------------  --------------------------\n api      _def_             /api\n api      docma-web         /api/docma-web\n content  templates         /templates\n content  guide             /guide"],"name":"RouteType","longname":"<anonymous>~Docma.RouteType","memberof":"<anonymous>~Docma","scope":"static","properties":[{"comment":"/**\n         *  Indicates a route for API documentation content, generated from\n         *  Javascript source files via JSDoc.\n         *  @type {String}\n         */","meta":{"range":[30867,30877],"filename":"docma.js","lineno":783,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002292","name":"API","type":"Literal","value":"api"}},"description":"Indicates a route for API documentation content, generated from\n Javascript source files via JSDoc.","type":{"names":["String"]},"name":"API","longname":"<anonymous>~Docma.RouteType.API","kind":"member","memberof":"<anonymous>~Docma.RouteType","scope":"static","defaultvalue":"api"},{"comment":"/**\n         *  Indicates a route for other content, such as HTML files generated\n         *  from markdown.\n         *  @type {String}\n         */","meta":{"range":[31043,31061],"filename":"docma.js","lineno":789,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002294","name":"CONTENT","type":"Literal","value":"content"}},"description":"Indicates a route for other content, such as HTML files generated\n from markdown.","type":{"names":["String"]},"name":"CONTENT","longname":"<anonymous>~Docma.RouteType.CONTENT","kind":"member","memberof":"<anonymous>~Docma.RouteType","scope":"static","defaultvalue":"content"}],"$longname":"Docma.RouteType","$members":[{"comment":"/**\n         *  Indicates a route for API documentation content, generated from\n         *  Javascript source files via JSDoc.\n         *  @type {String}\n         */","meta":{"range":[30867,30877],"filename":"docma.js","lineno":783,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002292","name":"API","type":"Literal","value":"api"}},"description":"Indicates a route for API documentation content, generated from\n Javascript source files via JSDoc.","type":{"names":["String"]},"name":"API","longname":"<anonymous>~Docma.RouteType.API","kind":"member","memberof":"<anonymous>~Docma.RouteType","scope":"static","defaultvalue":"api","$longname":"Docma.RouteType.API"},{"comment":"/**\n         *  Indicates a route for other content, such as HTML files generated\n         *  from markdown.\n         *  @type {String}\n         */","meta":{"range":[31043,31061],"filename":"docma.js","lineno":789,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002294","name":"CONTENT","type":"Literal","value":"content"}},"description":"Indicates a route for other content, such as HTML files generated\n from markdown.","type":{"names":["String"]},"name":"CONTENT","longname":"<anonymous>~Docma.RouteType.CONTENT","kind":"member","memberof":"<anonymous>~Docma.RouteType","scope":"static","defaultvalue":"content","$longname":"Docma.RouteType.CONTENT"}]},{"comment":"/**\n     *  Enumerates the routing methods for a Docma generated web application.\n     *  @enum {String}\n     *  @readonly\n     */","meta":{"range":[28775,29866],"filename":"docma.js","lineno":731,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002277","name":"Docma.RoutingMethod","type":"ObjectExpression","funcscope":"<anonymous>","value":"{\"QUERY\":\"query\",\"PATH\":\"path\"}","paramnames":[]}},"description":"Enumerates the routing methods for a Docma generated web application.","kind":"member","isEnum":true,"type":{"names":["String"]},"readonly":true,"name":"RoutingMethod","longname":"<anonymous>~Docma.RoutingMethod","memberof":"<anonymous>~Docma","scope":"static","properties":[{"comment":"/**\n         *  Indicates that the SPA routes are based on path params rather than\n         *  query-strings. For example, for a named group of JS source files\n         *  (e.g. `\"mylib\"`), the generated documentation will be accessible at\n         *  `/api/mylib`. Ungrouped JS documentation will be accessible at `/api`.\n         *  And for other HTML content such as files generated from markdown\n         *  files (e.g. README.md) will be accessible at `/readme`.\n         *  @type {String}\n         */","meta":{"range":[29848,29860],"filename":"docma.js","lineno":751,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002284","name":"PATH","type":"Literal","value":"path"}},"description":"Indicates that the SPA routes are based on path params rather than\n query-strings. For example, for a named group of JS source files\n (e.g. `\"mylib\"`), the generated documentation will be accessible at\n `/api/mylib`. Ungrouped JS documentation will be accessible at `/api`.\n And for other HTML content such as files generated from markdown\n files (e.g. README.md) will be accessible at `/readme`.","type":{"names":["String"]},"name":"PATH","longname":"<anonymous>~Docma.RoutingMethod.PATH","kind":"member","memberof":"<anonymous>~Docma.RoutingMethod","scope":"static","defaultvalue":"path"},{"comment":"/**\n         *  Indicates that the SPA routes are based on query-strings.\n         *  For example, for a named group of JS source files (e.g. `\"mylib\"`),\n         *  the generated documentation will be accessible at `/?api=mylib`.\n         *  Ungrouped JS documentation will be accessible at `/?api`.\n         *  And for other HTML content such as files generated from markdown\n         *  files (e.g. README.md) will be accessible at `/?content=readme`.\n         *  @type {String}\n         */","meta":{"range":[29309,29323],"filename":"docma.js","lineno":741,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002282","name":"QUERY","type":"Literal","value":"query"}},"description":"Indicates that the SPA routes are based on query-strings.\n For example, for a named group of JS source files (e.g. `\"mylib\"`),\n the generated documentation will be accessible at `/?api=mylib`.\n Ungrouped JS documentation will be accessible at `/?api`.\n And for other HTML content such as files generated from markdown\n files (e.g. README.md) will be accessible at `/?content=readme`.","type":{"names":["String"]},"name":"QUERY","longname":"<anonymous>~Docma.RoutingMethod.QUERY","kind":"member","memberof":"<anonymous>~Docma.RoutingMethod","scope":"static","defaultvalue":"query"}],"$longname":"Docma.RoutingMethod","$members":[{"comment":"/**\n         *  Indicates that the SPA routes are based on path params rather than\n         *  query-strings. For example, for a named group of JS source files\n         *  (e.g. `\"mylib\"`), the generated documentation will be accessible at\n         *  `/api/mylib`. Ungrouped JS documentation will be accessible at `/api`.\n         *  And for other HTML content such as files generated from markdown\n         *  files (e.g. README.md) will be accessible at `/readme`.\n         *  @type {String}\n         */","meta":{"range":[29848,29860],"filename":"docma.js","lineno":751,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002284","name":"PATH","type":"Literal","value":"path"}},"description":"Indicates that the SPA routes are based on path params rather than\n query-strings. For example, for a named group of JS source files\n (e.g. `\"mylib\"`), the generated documentation will be accessible at\n `/api/mylib`. Ungrouped JS documentation will be accessible at `/api`.\n And for other HTML content such as files generated from markdown\n files (e.g. README.md) will be accessible at `/readme`.","type":{"names":["String"]},"name":"PATH","longname":"<anonymous>~Docma.RoutingMethod.PATH","kind":"member","memberof":"<anonymous>~Docma.RoutingMethod","scope":"static","defaultvalue":"path","$longname":"Docma.RoutingMethod.PATH"},{"comment":"/**\n         *  Indicates that the SPA routes are based on query-strings.\n         *  For example, for a named group of JS source files (e.g. `\"mylib\"`),\n         *  the generated documentation will be accessible at `/?api=mylib`.\n         *  Ungrouped JS documentation will be accessible at `/?api`.\n         *  And for other HTML content such as files generated from markdown\n         *  files (e.g. README.md) will be accessible at `/?content=readme`.\n         *  @type {String}\n         */","meta":{"range":[29309,29323],"filename":"docma.js","lineno":741,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002282","name":"QUERY","type":"Literal","value":"query"}},"description":"Indicates that the SPA routes are based on query-strings.\n For example, for a named group of JS source files (e.g. `\"mylib\"`),\n the generated documentation will be accessible at `/?api=mylib`.\n Ungrouped JS documentation will be accessible at `/?api`.\n And for other HTML content such as files generated from markdown\n files (e.g. README.md) will be accessible at `/?content=readme`.","type":{"names":["String"]},"name":"QUERY","longname":"<anonymous>~Docma.RoutingMethod.QUERY","kind":"member","memberof":"<anonymous>~Docma.RoutingMethod","scope":"static","defaultvalue":"query","$longname":"Docma.RoutingMethod.QUERY"}]},{"comment":"/**\n     *  Enumerates the server/host types for Docma generated SPA.\n     *  The generated SPA is not limited to these hosts but Docma will generate\n     *  additional server config files for these hosts; especially if the\n     *  routing method is set to `\"path\"`. For example, for Apache;\n     *  an `.htaccess` file will be auto-generated with redirect rules for\n     *  (sub) routes. For GitHub, sub-dirctories will be generated\n     *  (just like Jekyll) with index files for redirecting via http-meta\n     *  refresh.\n     *  @enum {String}\n     *  @readonly\n     */","meta":{"range":[31652,32019],"filename":"docma.js","lineno":804,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002297","name":"Docma.ServerType","type":"ObjectExpression","funcscope":"<anonymous>","value":"{\"APACHE\":\"apache\",\"GITHUB\":\"github\"}","paramnames":[]}},"description":"Enumerates the server/host types for Docma generated SPA.\n The generated SPA is not limited to these hosts but Docma will generate\n additional server config files for these hosts; especially if the\n routing method is set to `\"path\"`. For example, for Apache;\n an `.htaccess` file will be auto-generated with redirect rules for\n (sub) routes. For GitHub, sub-dirctories will be generated\n (just like Jekyll) with index files for redirecting via http-meta\n refresh.","kind":"member","isEnum":true,"type":{"names":["String"]},"readonly":true,"name":"ServerType","longname":"<anonymous>~Docma.ServerType","memberof":"<anonymous>~Docma","scope":"static","properties":[{"comment":"/**\n         *  Indicates that an Apache server will be hosting the generated SPA.\n         *  @type {String}\n         */","meta":{"range":[31811,31827],"filename":"docma.js","lineno":809,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002302","name":"APACHE","type":"Literal","value":"apache"}},"description":"Indicates that an Apache server will be hosting the generated SPA.","type":{"names":["String"]},"name":"APACHE","longname":"<anonymous>~Docma.ServerType.APACHE","kind":"member","memberof":"<anonymous>~Docma.ServerType","scope":"static","defaultvalue":"apache"},{"comment":"/**\n         *  Indicates that SPA will be hosted via\n         *  {@link https://pages.github.com|GitHub Pages}.\n         *  @type {String}\n         */","meta":{"range":[31997,32013],"filename":"docma.js","lineno":815,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002304","name":"GITHUB","type":"Literal","value":"github"}},"description":"Indicates that SPA will be hosted via\n {@link https://pages.github.com|GitHub Pages}.","type":{"names":["String"]},"name":"GITHUB","longname":"<anonymous>~Docma.ServerType.GITHUB","kind":"member","memberof":"<anonymous>~Docma.ServerType","scope":"static","defaultvalue":"github"}],"$longname":"Docma.ServerType","$members":[{"comment":"/**\n         *  Indicates that an Apache server will be hosting the generated SPA.\n         *  @type {String}\n         */","meta":{"range":[31811,31827],"filename":"docma.js","lineno":809,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002302","name":"APACHE","type":"Literal","value":"apache"}},"description":"Indicates that an Apache server will be hosting the generated SPA.","type":{"names":["String"]},"name":"APACHE","longname":"<anonymous>~Docma.ServerType.APACHE","kind":"member","memberof":"<anonymous>~Docma.ServerType","scope":"static","defaultvalue":"apache","$longname":"Docma.ServerType.APACHE"},{"comment":"/**\n         *  Indicates that SPA will be hosted via\n         *  {@link https://pages.github.com|GitHub Pages}.\n         *  @type {String}\n         */","meta":{"range":[31997,32013],"filename":"docma.js","lineno":815,"path":"/Users/oy/developer/javascript/docma/lib","code":{"id":"astnode100002304","name":"GITHUB","type":"Literal","value":"github"}},"description":"Indicates that SPA will be hosted via\n {@link https://pages.github.com|GitHub Pages}.","type":{"names":["String"]},"name":"GITHUB","longname":"<anonymous>~Docma.ServerType.GITHUB","kind":"member","memberof":"<anonymous>~Docma.ServerType","scope":"static","defaultvalue":"github","$longname":"Docma.ServerType.GITHUB"}]}]},{"comment":"/**\n *  Docma build configuration object that defines parse options for the given\n *  source files; and and templating options for the Single Page Application to\n *  be generated.\n *\n *  This is very configurable but, you're only required to define very few\n *  options such as the source files (`src`) and the destination directory\n *  (`dest`) for a simple build.\n *\n *  See the example at the bottom or for a real example; check out Docma's own\n *  build configuration file, that generates this documentation you're reading\n *  {@link https://github.com/onury/docma/blob/master/doc/docma.config.json|here}.\n *\n *  @typedef Docma~BuildConfiguration\n *  @type Object\n *\n *  @param {String|Array|Object} src\n *         One or more file/directory paths to be processed. This also accepts\n *         {@link https://github.com/isaacs/node-glob|Glob} strings or array of\n *         globs. e.g. `./src/&#x2A;&#x2A;/&#x2A;.js` will produce an array of\n *         all `.js` files under `./src` directory and sub-directories. See\n *         examples below for how to <b>name-group</b> source files.\n *  @param {String} dest\n *         Destination output directory path. <b>CAUTION:</b> This directory\n *         will be emptied before the build. Make sure you set this to a correct\n *         path.\n *  @param {Boolean|Number} [debug=false]\n *         Specifies debug settings for build operation and generated SPA.\n *         This takes a bitwise numeric value so you can combine flags to\n *         your liking. If a `Boolean` value set, `false` means\n *         `Docma.Debug.DISABLED` and `true` means `Docma.Debug.ALL` which\n *         enables all debugging options.\n *         See {@link #Docma.Debug|`Debug` flags enumeration} for all possible\n *         values.\n *  @param {Object} [jsdoc] - JSDoc parse options.\n *  @param {String} [jsdoc.encoding=\"utf8\"]\n *         Encoding to be used when reading JS source files.\n *  @param {Boolean} [jsdoc.recurse=false]\n *         Specifies whether to recurse into sub-directories when scanning for\n *         source files.\n *  @param {Boolean} [jsdoc.pedantic=false]\n *         Specifies whether to treat errors as fatal errors, and treat warnings\n *         as errors.\n *  @param {String|Array} [jsdoc.access]\n *         Specifies which symbols to be processed with the given access\n *         property. Possible values: `\"private\"`, `\"protected\"`, `\"public\"` or\n *         `\"all\"` (for all access levels). By default, all except private\n *         symbols are processed. Note that, if access is not set for a\n *         documented symbol, it will still be included, regardless of this\n *         option.\n *  @param {Boolean} [jsdoc.private=false] -\n *  @param {String} [jsdoc.package]\n *         The path to the `package.json` file that contains the project name,\n *         version, and other details. If set to `true` instead of a path\n *         string, the first `package.json` file found in the source paths.\n *  @param {Boolean} [jsdoc.module=true]\n *         Specifies whether to include `module.exports` symbols.\n *  @param {Boolean} [jsdoc.undocumented=true]\n *         Specifies whether to include undocumented symbols.\n *  @param {Boolean} [jsdoc.undescribed=true]\n *         Specifies whether to include symbols without a description.\n *  @param {String} [jsdoc.relativePath]\n *         When set, all `symbol.meta.path` values will be relative to this path.\n *  @param {Function} [jsdoc.predicate]\n *         This is used to filter the parsed documentation output array. If a\n *         `Function` is passed; it's invoked for each included `symbol`. e.g.\n *         `function (symbol) { return symbol; }` Returning a falsy value will\n *         remove the symbol from the output. Returning `true` will keep the\n *         original symbol. To keep the symbol and alter its contents, simply\n *         return an altered symbol object.\n *  @param {Boolean} [jsdoc.hierarchy=false]\n *         Specifies whether to arrange symbols by their hierarchy. This will\n *         find and move symbols that have a `memberof` property to a `$members`\n *         property of their corresponding owners. Also the constructor symbol\n *         will be moved to a `$constructor` property of the `ClassDeclaration`\n *         symbol; if any.\n *  @param {Boolean|String} [jsdoc.sort=false]\n *         Specifies whether to sort the documentation symbols. For alphabetic\n *         sort, set to `true` or `\"alphabetic\"`. To additionally group by scope\n *         (static/instance) set to `\"grouped\"`. Set to `false` to disable.\n *  @param {Object} [markdown] - Markdown parse options.\n *  @param {Boolean} [markdown.gfm=true]\n *         Whether to enable {@link https://help.github.com/categories/writing-on-github|GitHub flavored markdown}.\n *  @param {Boolean} [markdown.tables=true]\n *         Whether to enable enable GFM {@link https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#tables|tables}.\n *         This option requires the `gfm` option to be `true`.\n *  @param {Boolean} [markdown.breaks=false]\n *         Whether to enable enable GFM {@link https://help.github.com/articles/basic-writing-and-formatting-syntax/#paragraphs-and-line-breaks|line breaks}.\n *         This option requires the `gfm` option to be `true`.\n *  @param {Boolean} [markdown.pedantic=false]\n *         Whether to conform with obscure parts of `markdown.pl` as much as\n *         possible. Don't fix any of the original markdown bugs or poor\n *         behavior.\n *  @param {Boolean} [markdown.sanitize=false]\n *         Whether to use smarter list behavior than the original markdown. May\n *         eventually be default with the old behavior moved into `pedantic`.\n *  @param {Boolean} [markdown.smartypants=false]\n *         Whether to use \"smart\" typographic punctuation for things like quotes\n *         and dashes.\n *  @param {Boolean} [markdown.tasks=true]\n *         Whether to parse GitHub style task markdown (e.g. `- [x] task`) into\n *         checkbox elements.\n *  @param {Boolean} [markdown.emoji=true]\n *         If set to `true`, emoji shortcuts (e.g. `&#x3A;smiley&#x3A;`) are\n *         parsed into `&lt;img /&gt;` elements with\n *         {@link http://twitter.github.io/twemoji|twemoji} SVG URLs.\n *  @param {Object} [app]\n *         Configuration for the generated SPA (Single Page Application).\n *  @param {String} [app.title=\"\"]\n *         Title of the main HTML document of the generated web app.\n *         (Sets the value of the `&lt;title&gt;` element.)\n *  @param {Array|Object} [app.meta]\n *         One or more meta elements to be set for the main HTML document of\n *         the generated web app. Set arbitrary object(s) for each meta element\n *         to be added. e.g. `[{ charset: \"utf-8\"}, { name: \"robots\", \"content\": \"index, follow\" }]`.\n *  @param {String} [app.base=\"/\"]\n *         Sets the base path of the generated web app. For example if the app\n *         will operate within `/doc/*` set the base path to `\"/doc\"`.\n *  @param {String} [app.entrance]\n *         Defines the home content to be displayed for the application root\n *         (when you enter the base path i.e. `\"/\"`). Pass the type and name of\n *         the route in `{type}:{name}` format. There are 2 types of routes: `api`\n *         for JS source documentation and `content` for other HTML content such\n *         as parsed markdown files. For example, if you have a grouped JS files\n *         documented with a name `mylib`; to define this as the entrance of the\n *         app, set this to `\"api:mylib\"`. If you have `\"README.md\"` in your\n *         source files; to define this as the entrance, set this to\n *         `\"content:readme\"`.\n *  @param {String} [app.routing=\"query\"]\n *         Indicates the routing method for the generated SPA (Single Page\n *         Application). See {@link #Docma.RoutingMethod|`RoutingMethod` enumeration}.\n *  @param {String} [app.server]\n *         Server or host type for the SPA. This information helps Docma\n *         determine how to configure the generated SPA, especially if `routing`\n *         is set to `\"path\"`. See {@link #Docma.ServerType|`ServerType` enumeration}\n *         for details.\n *  @param {Object} [template] - SPA template configuration.\n *  @param {String} [template.path=\"default\"]\n *         Either the path of a custom Docma template or the name of a built-in\n *         template. Omit to use the default built-in template.\n *  @param {Object} [template.options]\n *         SPA template options. This is defined by the template itself.\n *         Refer to the template's documentation for options to be set at\n *         build-time. (If any option is omitted in the build, default values\n *         within the `docma.template.json` configuration file of the template\n *         are used.)\n *\n *  @example\n *  {\n *  \tsrc: [\n *  \t    {\n *  \t    \t// including js (\"api\") files\n *  \t    \t// grouping JS files under a name.\n *  \t    \t// This name also defines the api route name.\n *  \t    \t// i.e. /?api=my-lib\n *  \t    \t'my-lib': [\n *  \t    \t\t'./src/** /*.js', // recurse\n *  \t    \t\t'./lib/some-other.js',\n *  \t    \t\t'!./lib/ignored.js' // notice the bang!\n *  \t    \t],\n *  \t    \t// naming another api route\n *  \t    \t'other-lib': './other/*.js', // /?api=other-lib\n *  \t    },\n *  \t    // unnamed js files\n *  \t    './src/main.js', // /?api or /?api=_def_\n *  \t    './src/main.utils.js', // merged into same /?api or /?api=_def_\n *  \t    // including markdown (\"content\") files\n *  \t    './src/CHANGELOG.md', // this will have 'changelog' as route name. i.e. /?content=changelog\n *  \t    // including markdown and renaming the route\n *  \t    {\n *  \t    \t// this will have 'guide' as content route name\n *  \t    \t// i.e. /?content=guide\n *  \t    \tguide: './src/README.md'\n *  \t    }\n *  \t],\n *  \tdest: './output/docs',\n *  \tapp: {\n *  \t\ttitle: 'My Documentation',\n *  \t\trouting: 'query',\n *  \t\tentrance: 'content:guide'\n *  \t},\n *  \ttemplate: {\n *  \t\tpath: 'default'\n *  \t}\n *  }\n */","meta":{"range":[33873,43869],"filename":"docma.js","lineno":891,"path":"/Users/oy/developer/javascript/docma/lib","code":{}},"description":"Docma build configuration object that defines parse options for the given\n source files; and and templating options for the Single Page Application to\n be generated.\n\n This is very configurable but, you're only required to define very few\n options such as the source files (`src`) and the destination directory\n (`dest`) for a simple build.\n\n See the example at the bottom or for a real example; check out Docma's own\n build configuration file, that generates this documentation you're reading\n {@link https://github.com/onury/docma/blob/master/doc/docma.config.json|here}.","kind":"typedef","name":"BuildConfiguration","type":{"names":["Object"]},"params":[{"type":{"names":["String","Array","Object"]},"description":"One or more file/directory paths to be processed. This also accepts\n        {@link https://github.com/isaacs/node-glob|Glob} strings or array of\n        globs. e.g. `./src/&#x2A;&#x2A;/&#x2A;.js` will produce an array of\n        all `.js` files under `./src` directory and sub-directories. See\n        examples below for how to <b>name-group</b> source files.","name":"src"},{"type":{"names":["String"]},"description":"Destination output directory path. <b>CAUTION:</b> This directory\n        will be emptied before the build. Make sure you set this to a correct\n        path.","name":"dest"},{"type":{"names":["Boolean","Number"]},"optional":true,"defaultvalue":false,"description":"Specifies debug settings for build operation and generated SPA.\n        This takes a bitwise numeric value so you can combine flags to\n        your liking. If a `Boolean` value set, `false` means\n        `Docma.Debug.DISABLED` and `true` means `Docma.Debug.ALL` which\n        enables all debugging options.\n        See {@link #Docma.Debug|`Debug` flags enumeration} for all possible\n        values.","name":"debug"},{"type":{"names":["Object"]},"optional":true,"description":"JSDoc parse options.","name":"jsdoc"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"\"utf8\"","description":"Encoding to be used when reading JS source files.","name":"jsdoc.encoding"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Specifies whether to recurse into sub-directories when scanning for\n        source files.","name":"jsdoc.recurse"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Specifies whether to treat errors as fatal errors, and treat warnings\n        as errors.","name":"jsdoc.pedantic"},{"type":{"names":["String","Array"]},"optional":true,"description":"Specifies which symbols to be processed with the given access\n        property. Possible values: `\"private\"`, `\"protected\"`, `\"public\"` or\n        `\"all\"` (for all access levels). By default, all except private\n        symbols are processed. Note that, if access is not set for a\n        documented symbol, it will still be included, regardless of this\n        option.","name":"jsdoc.access"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"-","name":"jsdoc.private"},{"type":{"names":["String"]},"optional":true,"description":"The path to the `package.json` file that contains the project name,\n        version, and other details. If set to `true` instead of a path\n        string, the first `package.json` file found in the source paths.","name":"jsdoc.package"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Specifies whether to include `module.exports` symbols.","name":"jsdoc.module"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Specifies whether to include undocumented symbols.","name":"jsdoc.undocumented"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Specifies whether to include symbols without a description.","name":"jsdoc.undescribed"},{"type":{"names":["String"]},"optional":true,"description":"When set, all `symbol.meta.path` values will be relative to this path.","name":"jsdoc.relativePath"},{"type":{"names":["function"]},"optional":true,"description":"This is used to filter the parsed documentation output array. If a\n        `Function` is passed; it's invoked for each included `symbol`. e.g.\n        `function (symbol) { return symbol; }` Returning a falsy value will\n        remove the symbol from the output. Returning `true` will keep the\n        original symbol. To keep the symbol and alter its contents, simply\n        return an altered symbol object.","name":"jsdoc.predicate"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Specifies whether to arrange symbols by their hierarchy. This will\n        find and move symbols that have a `memberof` property to a `$members`\n        property of their corresponding owners. Also the constructor symbol\n        will be moved to a `$constructor` property of the `ClassDeclaration`\n        symbol; if any.","name":"jsdoc.hierarchy"},{"type":{"names":["Boolean","String"]},"optional":true,"defaultvalue":false,"description":"Specifies whether to sort the documentation symbols. For alphabetic\n        sort, set to `true` or `\"alphabetic\"`. To additionally group by scope\n        (static/instance) set to `\"grouped\"`. Set to `false` to disable.","name":"jsdoc.sort"},{"type":{"names":["Object"]},"optional":true,"description":"Markdown parse options.","name":"markdown"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Whether to enable {@link https://help.github.com/categories/writing-on-github|GitHub flavored markdown}.","name":"markdown.gfm"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Whether to enable enable GFM {@link https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#tables|tables}.\n        This option requires the `gfm` option to be `true`.","name":"markdown.tables"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Whether to enable enable GFM {@link https://help.github.com/articles/basic-writing-and-formatting-syntax/#paragraphs-and-line-breaks|line breaks}.\n        This option requires the `gfm` option to be `true`.","name":"markdown.breaks"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Whether to conform with obscure parts of `markdown.pl` as much as\n        possible. Don't fix any of the original markdown bugs or poor\n        behavior.","name":"markdown.pedantic"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Whether to use smarter list behavior than the original markdown. May\n        eventually be default with the old behavior moved into `pedantic`.","name":"markdown.sanitize"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Whether to use \"smart\" typographic punctuation for things like quotes\n        and dashes.","name":"markdown.smartypants"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Whether to parse GitHub style task markdown (e.g. `- [x] task`) into\n        checkbox elements.","name":"markdown.tasks"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"If set to `true`, emoji shortcuts (e.g. `&#x3A;smiley&#x3A;`) are\n        parsed into `&lt;img /&gt;` elements with\n        {@link http://twitter.github.io/twemoji|twemoji} SVG URLs.","name":"markdown.emoji"},{"type":{"names":["Object"]},"optional":true,"description":"Configuration for the generated SPA (Single Page Application).","name":"app"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"\"\"","description":"Title of the main HTML document of the generated web app.\n        (Sets the value of the `&lt;title&gt;` element.)","name":"app.title"},{"type":{"names":["Array","Object"]},"optional":true,"description":"One or more meta elements to be set for the main HTML document of\n        the generated web app. Set arbitrary object(s) for each meta element\n        to be added. e.g. `[{ charset: \"utf-8\"}, { name: \"robots\", \"content\": \"index, follow\" }]`.","name":"app.meta"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"\"/\"","description":"Sets the base path of the generated web app. For example if the app\n        will operate within `/doc/*` set the base path to `\"/doc\"`.","name":"app.base"},{"type":{"names":["String"]},"optional":true,"description":"Defines the home content to be displayed for the application root\n        (when you enter the base path i.e. `\"/\"`). Pass the type and name of\n        the route in `{type}:{name}` format. There are 2 types of routes: `api`\n        for JS source documentation and `content` for other HTML content such\n        as parsed markdown files. For example, if you have a grouped JS files\n        documented with a name `mylib`; to define this as the entrance of the\n        app, set this to `\"api:mylib\"`. If you have `\"README.md\"` in your\n        source files; to define this as the entrance, set this to\n        `\"content:readme\"`.","name":"app.entrance"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"\"query\"","description":"Indicates the routing method for the generated SPA (Single Page\n        Application). See {@link #Docma.RoutingMethod|`RoutingMethod` enumeration}.","name":"app.routing"},{"type":{"names":["String"]},"optional":true,"description":"Server or host type for the SPA. This information helps Docma\n        determine how to configure the generated SPA, especially if `routing`\n        is set to `\"path\"`. See {@link #Docma.ServerType|`ServerType` enumeration}\n        for details.","name":"app.server"},{"type":{"names":["Object"]},"optional":true,"description":"SPA template configuration.","name":"template"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"\"default\"","description":"Either the path of a custom Docma template or the name of a built-in\n        template. Omit to use the default built-in template.","name":"template.path"},{"type":{"names":["Object"]},"optional":true,"description":"SPA template options. This is defined by the template itself.\n        Refer to the template's documentation for options to be set at\n        build-time. (If any option is omitted in the build, default values\n        within the `docma.template.json` configuration file of the template\n        are used.)","name":"template.options"}],"examples":["{\n \tsrc: [\n \t    {\n \t    \t// including js (\"api\") files\n \t    \t// grouping JS files under a name.\n \t    \t// This name also defines the api route name.\n \t    \t// i.e. /?api=my-lib\n \t    \t'my-lib': [\n \t    \t\t'./src/** /*.js', // recurse\n \t    \t\t'./lib/some-other.js',\n \t    \t\t'!./lib/ignored.js' // notice the bang!\n \t    \t],\n \t    \t// naming another api route\n \t    \t'other-lib': './other/*.js', // /?api=other-lib\n \t    },\n \t    // unnamed js files\n \t    './src/main.js', // /?api or /?api=_def_\n \t    './src/main.utils.js', // merged into same /?api or /?api=_def_\n \t    // including markdown (\"content\") files\n \t    './src/CHANGELOG.md', // this will have 'changelog' as route name. i.e. /?content=changelog\n \t    // including markdown and renaming the route\n \t    {\n \t    \t// this will have 'guide' as content route name\n \t    \t// i.e. /?content=guide\n \t    \tguide: './src/README.md'\n \t    }\n \t],\n \tdest: './output/docs',\n \tapp: {\n \t\ttitle: 'My Documentation',\n \t\trouting: 'query',\n \t\tentrance: 'content:guide'\n \t},\n \ttemplate: {\n \t\tpath: 'default'\n \t}\n }"],"memberof":"Docma","longname":"Docma~BuildConfiguration","scope":"inner","$longname":"Docma~BuildConfiguration"}],"symbols":["Docma","Docma#build","Docma.create","Docma.Debug","Docma.RouteType","Docma.RoutingMethod","Docma.ServerType","Docma~BuildConfiguration"]},"docma-web":{"documentation":[{"comment":"/**\n *  Docma (web) core.\n *\n *  When you build the documentation with a template, `docma-web.js` will be\n *  generated (and linked in the main HTML); which is the core engine for the\n *  documentation web app. This will include everything the app needs such as\n *  the documentation data, compiled partials, dustjs engine, etc...\n *\n *  This object is globally accessible from the generated SPA (Single Page\n *  Application).\n *\n *  Note that the size of this script depends especially on the generated\n *  documentation data.\n *\n *  @type {Object}\n *  @global\n *  @name docma\n */","meta":{"range":[128,709],"filename":"core.js","lineno":7,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{}},"description":"Docma (web) core.\n\n When you build the documentation with a template, `docma-web.js` will be\n generated (and linked in the main HTML); which is the core engine for the\n documentation web app. This will include everything the app needs such as\n the documentation data, compiled partials, dustjs engine, etc...\n\n This object is globally accessible from the generated SPA (Single Page\n Application).\n\n Note that the size of this script depends especially on the generated\n documentation data.","type":{"names":["Object"]},"scope":"global","name":"docma","longname":"docma","kind":"member","$longname":"docma","$members":[{"comment":"/**\n     *  Adds a new Dust filter.\n     *  @chainable\n     *  @see {@link ?content=docma-filters|Existing Docma (Dust) filters}\n     *  @see {@link http://www.dustjs.com/docs/filter-api|Dust Filter API}\n     *\n     *  @param {String} name\n     *         Name of the filter to be added.\n     *  @param {Function} fn\n     *         Filter function.\n     *\n     *  @returns {docma} - `docma` for chaining.\n     *\n     *  @throws {Error} - If a filter with the given name already exists.\n     */","meta":{"range":[2135,2355],"filename":"core.js","lineno":72,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000080","name":"docma.addFilter","type":"FunctionExpression","paramnames":["name","fn"]},"vars":{"dust.filters[undefined]":"dust.filters[undefined]"}},"description":"Adds a new Dust filter.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"see":["{@link ?content=docma-filters|Existing Docma (Dust) filters}","{@link http://www.dustjs.com/docs/filter-api|Dust Filter API}"],"params":[{"type":{"names":["String"]},"description":"Name of the filter to be added.","name":"name"},{"type":{"names":["function"]},"description":"Filter function.","name":"fn"}],"returns":[{"type":{"names":["docma"]},"description":"- `docma` for chaining."}],"exceptions":[{"type":{"names":["Error"]},"description":"- If a filter with the given name already exists."}],"name":"addFilter","longname":"docma.addFilter","kind":"function","memberof":"docma","scope":"static","$longname":"docma.addFilter"},{"comment":"/**\n *\tHash-map of JSDoc documentation outputs.\n *\tEach key is the name of an API (formed by grouped Javascript files).\n *\te.g. `docma.apis[\"some-api\"]`\n *\n *  Unnamed documentation data (consisting of ungrouped Javascript files) can be\n *  accessed via `docma.apis._def_`.\n *\n *\tEach value is an `Object` with the following signature:\n *\t`{ documentation:Array, symbols:Array }`. `documentation` is the actual\n *\tJSDoc data, and `symbols` is a flat array of symbol names.\n *\n *  See {@link ?api=docma#Docma~BuildConfiguration|build configuration} for more\n *  details on how Javascript files can be grouped (and named) to form separate\n *  API documentations and SPA routes.\n *\n *  @name docma.apis\n *  @type {Object}\n *\n *  @example\n *  // output ungrouped (unnamed) API documentation data\n *  console.log(docma.apis._def_.documentation);\n *  console.log(docma.apis._def_.symbols); // flat list of symbol names\n *  // output one of the grouped (named) API documentation data\n *  console.log(docma.apis['my-scondary-api'].documentation);\n *\n *  @example\n *  <!-- Usage in a Dust partial\n *  \tEach API data is passed to the partial, according to the route.\n *  \tSo you'll always use `documentation` within the partials.\n *  -->\n *  {#documentation}\n *      <h4>{longname}</h4>\n *      <p>{description}</p>\n *      <hr />\n *  {/documentation}\n */","meta":{"range":[27206,28551],"filename":"core.js","lineno":836,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{}},"description":"Hash-map of JSDoc documentation outputs.\n\tEach key is the name of an API (formed by grouped Javascript files).\n\te.g. `docma.apis[\"some-api\"]`\n\n Unnamed documentation data (consisting of ungrouped Javascript files) can be\n accessed via `docma.apis._def_`.\n\n\tEach value is an `Object` with the following signature:\n\t`{ documentation:Array, symbols:Array }`. `documentation` is the actual\n\tJSDoc data, and `symbols` is a flat array of symbol names.\n\n See {@link ?api=docma#Docma~BuildConfiguration|build configuration} for more\n details on how Javascript files can be grouped (and named) to form separate\n API documentations and SPA routes.","name":"apis","type":{"names":["Object"]},"examples":["// output ungrouped (unnamed) API documentation data\n console.log(docma.apis._def_.documentation);\n console.log(docma.apis._def_.symbols); // flat list of symbol names\n // output one of the grouped (named) API documentation data\n console.log(docma.apis['my-scondary-api'].documentation);\n\n ","<!-- Usage in a Dust partial\n \tEach API data is passed to the partial, according to the route.\n \tSo you'll always use `documentation` within the partials.\n -->\n {#documentation}\n     <h4>{longname}</h4>\n     <p>{description}</p>\n     <hr />\n {/documentation}"],"memberof":"docma","longname":"docma.apis","scope":"static","kind":"member","$longname":"docma.apis"},{"comment":"/**\n *  Provides configuration data of the generated SPA, which is originally set\n *  at build-time, by the user.\n *  See {@link ?api=docma#Docma~BuildConfiguration|build configuration} for more\n *  details on how these settings take affect.\n *  @name docma.app\n *  @type {Object}\n *\n *  @property {String} title\n *            Document title for the main file of the generated app.\n *            (Value of the `&lt;title/>` tag.)\n *  @property {Array} meta\n *            Array of arbitrary objects set for main document meta (tags).\n *  @property {String} base\n *            Base path of the generated web app.\n *  @property {String} entrance\n *            Name of the initial content displayed, when the web app is first\n *            loaded.\n *  @property {String} routing\n *            Routing type of the generated SPA.\n *  @property {String} server\n *            Server/host type of the generated SPA.\n */","meta":{"range":[26294,27204],"filename":"core.js","lineno":812,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{}},"description":"Provides configuration data of the generated SPA, which is originally set\n at build-time, by the user.\n See {@link ?api=docma#Docma~BuildConfiguration|build configuration} for more\n details on how these settings take affect.","name":"app","type":{"names":["Object"]},"properties":[{"type":{"names":["String"]},"description":"Base path of the generated web app.","name":"base"},{"type":{"names":["String"]},"description":"Name of the initial content displayed, when the web app is first\n           loaded.","name":"entrance"},{"type":{"names":["Array"]},"description":"Array of arbitrary objects set for main document meta (tags).","name":"meta"},{"type":{"names":["String"]},"description":"Routing type of the generated SPA.","name":"routing"},{"type":{"names":["String"]},"description":"Server/host type of the generated SPA.","name":"server"},{"type":{"names":["String"]},"description":"Document title for the main file of the generated app.\n           (Value of the `&lt;title/>` tag.)","name":"title"}],"memberof":"docma","longname":"docma.app","scope":"static","kind":"member","$longname":"docma.app"},{"comment":"/**\n     *  Gets the route information for the current rendered content being\n     *  displayed.\n     *\n     *  @name docma.currentRoute\n     *  @type {Route}\n     *  @readonly\n     *\n     *  @property {String} type\n     *            Type of the current route. If a generated JSDoc API\n     *            documentation is being displayed, this is set to `\"api\"`.\n     *            If any other HTML content (such as a converted markdown) is\n     *            being displayed; this is set to `\"content\"`.\n     *  @property {String} name\n     *            Name of the current route. For `api` routes, this is the name\n     *            of the grouped JS files parsed. If no name is given, this is\n     *            set to `\"_def_\"` by default. For `content` routes, this is\n     *            either the custom name given at build-time or, by default; the\n     *            name of the generated HTML file; lower-cased, without the\n     *            extension. e.g. `\"README.md\"` will have the route name\n     *            `\"readme\"` after the build.\n     *  @property {String} path\n     *            Path of the current route.\n     */","meta":{"range":[6633,7764],"filename":"core.js","lineno":234,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{}},"description":"Gets the route information for the current rendered content being\n displayed.","name":"currentRoute","type":{"names":["Route"]},"readonly":true,"properties":[{"type":{"names":["String"]},"description":"Name of the current route. For `api` routes, this is the name\n           of the grouped JS files parsed. If no name is given, this is\n           set to `\"_def_\"` by default. For `content` routes, this is\n           either the custom name given at build-time or, by default; the\n           name of the generated HTML file; lower-cased, without the\n           extension. e.g. `\"README.md\"` will have the route name\n           `\"readme\"` after the build.","name":"name"},{"type":{"names":["String"]},"description":"Path of the current route.","name":"path"},{"type":{"names":["String"]},"description":"Type of the current route. If a generated JSDoc API\n           documentation is being displayed, this is set to `\"api\"`.\n           If any other HTML content (such as a converted markdown) is\n           being displayed; this is set to `\"content\"`.","name":"type"}],"memberof":"docma","longname":"docma.currentRoute","scope":"static","kind":"member","$longname":"docma.currentRoute"},{"comment":"/**\n     *\tJSDoc documentation data for the current API route.\n     *\tIf current route is not an API route, this will be `null`.\n     *\n     *  See {@link ?api=docma#Docma~BuildConfiguration|build configuration} for more\n     *  details on how Javascript files can be grouped (and named) to form\n     *  separate API documentations and SPA routes.\n     *\n     *  @name docma.documentation\n     *  @type {Array}\n     *\n     *  @example\n     *  // output current API documentation data\n     *  if (docma.currentRoute.type === 'api') {\n     *  \tconsole.log(docma.documentation);\n     *  }\n     *\n     *  @example\n     *  <!-- Usage in (Dust) partial -->\n     *  {#documentation}\n     *      <h4>{longname}</h4>\n     *      <p>{description}</p>\n     *      <hr />\n     *  {/documentation}\n     */","meta":{"range":[7936,8728],"filename":"core.js","lineno":265,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{}},"description":"JSDoc documentation data for the current API route.\n\tIf current route is not an API route, this will be `null`.\n\n See {@link ?api=docma#Docma~BuildConfiguration|build configuration} for more\n details on how Javascript files can be grouped (and named) to form\n separate API documentations and SPA routes.","name":"documentation","type":{"names":["Array"]},"examples":["// output current API documentation data\n if (docma.currentRoute.type === 'api') {\n \tconsole.log(docma.documentation);\n }\n\n ","<!-- Usage in (Dust) partial -->\n {#documentation}\n     <h4>{longname}</h4>\n     <p>{description}</p>\n     <hr />\n {/documentation}"],"memberof":"docma","longname":"docma.documentation","scope":"static","kind":"member","$longname":"docma.documentation"},{"comment":"/**\n     *  Docma SPA events enumeration.\n     *  @enum {String}\n     */","meta":{"range":[3376,3815],"filename":"core.js","lineno":122,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000178","name":"docma.Event","type":"ObjectExpression","value":"{\"Ready\":\"ready\",\"Render\":\"render\",\"Route\":\"route\"}","paramnames":[]}},"description":"Docma SPA events enumeration.","kind":"member","isEnum":true,"type":{"names":["String"]},"name":"Event","longname":"docma.Event","memberof":"docma","scope":"static","properties":[{"comment":"/**\n         *  Emitted when Docma is ready and the initial content is rendered.\n         *  @type {String}\n         */","meta":{"range":[3528,3542],"filename":"core.js","lineno":127,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000183","name":"Ready","type":"Literal","value":"ready"}},"description":"Emitted when Docma is ready and the initial content is rendered.","type":{"names":["String"]},"name":"Ready","longname":"docma.Event.Ready","kind":"member","memberof":"docma.Event","scope":"static","defaultvalue":"ready"},{"comment":"/**\n         *  Emitted when page content (a Dust partial) is rendered.\n         *  @type {String}\n         */","meta":{"range":[3671,3687],"filename":"core.js","lineno":132,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000185","name":"Render","type":"Literal","value":"render"}},"description":"Emitted when page content (a Dust partial) is rendered.","type":{"names":["String"]},"name":"Render","longname":"docma.Event.Render","kind":"member","memberof":"docma.Event","scope":"static","defaultvalue":"render"},{"comment":"/**\n         *  Emitted when SPA route is changed.\n         *  @type {String}\n         */","meta":{"range":[3795,3809],"filename":"core.js","lineno":137,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000187","name":"Route","type":"Literal","value":"route"}},"description":"Emitted when SPA route is changed.","type":{"names":["String"]},"name":"Route","longname":"docma.Event.Route","kind":"member","memberof":"docma.Event","scope":"static","defaultvalue":"route"}],"$longname":"docma.Event","$members":[{"comment":"/**\n         *  Emitted when Docma is ready and the initial content is rendered.\n         *  @type {String}\n         */","meta":{"range":[3528,3542],"filename":"core.js","lineno":127,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000183","name":"Ready","type":"Literal","value":"ready"}},"description":"Emitted when Docma is ready and the initial content is rendered.","type":{"names":["String"]},"name":"Ready","longname":"docma.Event.Ready","kind":"member","memberof":"docma.Event","scope":"static","defaultvalue":"ready","$longname":"docma.Event.Ready"},{"comment":"/**\n         *  Emitted when page content (a Dust partial) is rendered.\n         *  @type {String}\n         */","meta":{"range":[3671,3687],"filename":"core.js","lineno":132,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000185","name":"Render","type":"Literal","value":"render"}},"description":"Emitted when page content (a Dust partial) is rendered.","type":{"names":["String"]},"name":"Render","longname":"docma.Event.Render","kind":"member","memberof":"docma.Event","scope":"static","defaultvalue":"render","$longname":"docma.Event.Render"},{"comment":"/**\n         *  Emitted when SPA route is changed.\n         *  @type {String}\n         */","meta":{"range":[3795,3809],"filename":"core.js","lineno":137,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000187","name":"Route","type":"Literal","value":"route"}},"description":"Emitted when SPA route is changed.","type":{"names":["String"]},"name":"Route","longname":"docma.Event.Route","kind":"member","memberof":"docma.Event","scope":"static","defaultvalue":"route","$longname":"docma.Event.Route"}]},{"comment":"/**\n     *  Asynchronously fetches (text) content from the given URL via an\n     *  `XmlHttpRequest`. Note that the URL has to be in the same-origin, for\n     *  this to work.\n     *\n     *  @param {String} url\n     *         URL to be fetched.\n     *  @param {Function} callback\n     *         Function to be executed when the content is fetched; with the\n     *         following signature: `function (status, responseText) { .. }`\n     */","meta":{"range":[18141,18583],"filename":"core.js","lineno":595,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000841","name":"docma.fetch","type":"FunctionExpression","paramnames":["url","callback"]},"vars":{"xhr":"docma.fetch~xhr","xhr.onreadystatechange":"docma.fetch~xhr.onreadystatechange","":null}},"description":"Asynchronously fetches (text) content from the given URL via an\n `XmlHttpRequest`. Note that the URL has to be in the same-origin, for\n this to work.","params":[{"type":{"names":["String"]},"description":"URL to be fetched.","name":"url"},{"type":{"names":["function"]},"description":"Function to be executed when the content is fetched; with the\n        following signature: `function (status, responseText) { .. }`","name":"callback"}],"name":"fetch","longname":"docma.fetch","kind":"function","memberof":"docma","scope":"static","$longname":"docma.fetch"},{"comment":"/**\n     *  Checks whether a Dust filter with the given name already exists.\n     *\n     *  @param {String} name - Name of the filter to be checked.\n     *\n     *  @returns {Boolean}\n     */","meta":{"range":[2869,2970],"filename":"core.js","lineno":100,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000131","name":"docma.filterExists","type":"FunctionExpression","paramnames":["name"]}},"description":"Checks whether a Dust filter with the given name already exists.","params":[{"type":{"names":["String"]},"description":"Name of the filter to be checked.","name":"name"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"filterExists","longname":"docma.filterExists","kind":"function","memberof":"docma","scope":"static","$longname":"docma.filterExists"},{"comment":"/**\n     *  Similar to `window.location` but with differences and additional\n     *  information.\n     *\n     *  @name docma.location\n     *  @type {Object}\n     *  @readonly\n     *\n     *  @property {String} origin\n     *            Gets the protocol, hostname and port number of the current URL.\n     *  @property {String} host\n     *            Gets the hostname and port number of the current URL.\n     *  @property {String} hostname\n     *            Gets the domain name of the web host.\n     *  @property {String} protocol\n     *            Gets the web protocol used, without `:` suffix.\n     *  @property {String} href\n     *            Gets the href (URL) of the current location.\n     *  @property {String} entrance\n     *            Gets the application entrance route, which is set at Docma build-time.\n     *  @property {String} base\n     *            Gets the base path of the application URL, which is set at Docma build-time.\n     *  @property {String} fullpath\n     *            Gets the path and filename of the current URL.\n     *  @property {String} pathname\n     *            Gets the path and filename of the current URL, without the base.\n     *  @property {String} path\n     *            Gets the path, filename and query-string of the current URL, without the base.\n     *  @property {String} hash\n     *            Gets the anchor `#` of the current URL, without `#` prefix.\n     *  @property {String} query\n     *            Gets the querystring part of the current URL, without `?` prefix.\n     *  @property {Function} getQuery()\n     *            Gets the value of the given querystring parameter.\n     */","meta":{"range":[1167,2802],"filename":"core.location.js","lineno":40,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{}},"description":"Similar to `window.location` but with differences and additional\n information.","name":"location","type":{"names":["Object"]},"readonly":true,"properties":[{"type":{"names":["String"]},"description":"Gets the base path of the application URL, which is set at Docma build-time.","name":"base"},{"type":{"names":["String"]},"description":"Gets the application entrance route, which is set at Docma build-time.","name":"entrance"},{"type":{"names":["String"]},"description":"Gets the path and filename of the current URL.","name":"fullpath"},{"type":{"names":["function"]},"description":"Gets the value of the given querystring parameter.","name":"getQuery()"},{"type":{"names":["String"]},"description":"Gets the anchor `#` of the current URL, without `#` prefix.","name":"hash"},{"type":{"names":["String"]},"description":"Gets the hostname and port number of the current URL.","name":"host"},{"type":{"names":["String"]},"description":"Gets the domain name of the web host.","name":"hostname"},{"type":{"names":["String"]},"description":"Gets the href (URL) of the current location.","name":"href"},{"type":{"names":["String"]},"description":"Gets the protocol, hostname and port number of the current URL.","name":"origin"},{"type":{"names":["String"]},"description":"Gets the path, filename and query-string of the current URL, without the base.","name":"path"},{"type":{"names":["String"]},"description":"Gets the path and filename of the current URL, without the base.","name":"pathname"},{"type":{"names":["String"]},"description":"Gets the web protocol used, without `:` suffix.","name":"protocol"},{"type":{"names":["String"]},"description":"Gets the querystring part of the current URL, without `?` prefix.","name":"query"}],"memberof":"docma","longname":"docma.location","scope":"static","kind":"member","$longname":"docma.location"},{"comment":"/**\n     *  Removes the given listener from the specified event.\n     *  @alias docma.removeListener\n     *  @chainable\n     *\n     *  @param {String} eventName\n     *         Name of the event to remove the listener from.\n     *         See {@link #docma.Event|`docma.Event`} enumeration.\n     *  @param {Function} listener\n     *         Function to be removed from the event.\n     *\n     *  @returns {docma} - `docma` for chaining.\n     */","meta":{"range":[6122,6224],"filename":"core.js","lineno":209,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000228","name":"docma.off","type":"FunctionExpression","paramnames":[]}},"description":"Removes the given listener from the specified event.","alias":"docma.removeListener","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["String"]},"description":"Name of the event to remove the listener from.\n        See {@link #docma.Event|`docma.Event`} enumeration.","name":"eventName"},{"type":{"names":["function"]},"description":"Function to be removed from the event.","name":"listener"}],"returns":[{"type":{"names":["docma"]},"description":"- `docma` for chaining."}],"name":"removeListener","longname":"docma.removeListener","kind":"function","memberof":"docma","scope":"static","$longname":"docma.off"},{"comment":"/**\n     *  Adds a listener function to the specified event.\n     *  Note that the listener will not be added if it is a duplicate.\n     *  If the listener returns true then it will be removed after it is called.\n     *  @alias docma.addListener\n     *  @chainable\n     *\n     *  @param {String} eventName\n     *         Name of the event to attach the listener to.\n     *         See {@link #docma.Event|`docma.Event`} enumeration.\n     *  @param {Function} listener\n     *         Function to be called when the event is emitted. If the function\n     *         returns true then it will be removed after calling.\n     *\n     *  @returns {docma} - `docma` for chaining.\n     *\n     *  @example\n     *  docma.on('render', function (currentRoute) {\n     *  \tif (!currentRoute) {\n     *  \t\tconsole.log('Not found!');\n     *  \t\treturn;\n     *  \t}\n     *  \tif (currentRoute.type === docma.Route.Type.API) {\n     *  \t\tconsole.log('This is an API route.')\n     *  \t}\n     *  });\n     */","meta":{"range":[4807,4949],"filename":"core.js","lineno":167,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000190","name":"docma.on","type":"FunctionExpression","paramnames":["eventName","listener"]}},"description":"Adds a listener function to the specified event.\n Note that the listener will not be added if it is a duplicate.\n If the listener returns true then it will be removed after it is called.","alias":"docma.addListener","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["String"]},"description":"Name of the event to attach the listener to.\n        See {@link #docma.Event|`docma.Event`} enumeration.","name":"eventName"},{"type":{"names":["function"]},"description":"Function to be called when the event is emitted. If the function\n        returns true then it will be removed after calling.","name":"listener"}],"returns":[{"type":{"names":["docma"]},"description":"- `docma` for chaining."}],"examples":["docma.on('render', function (currentRoute) {\n \tif (!currentRoute) {\n \t\tconsole.log('Not found!');\n \t\treturn;\n \t}\n \tif (currentRoute.type === docma.Route.Type.API) {\n \t\tconsole.log('This is an API route.')\n \t}\n });"],"name":"addListener","longname":"docma.addListener","kind":"function","memberof":"docma","scope":"static","$longname":"docma.on"},{"comment":"/**\n     *  Adds a listener that will be automatically removed after its first\n     *  execution.\n     *  @alias docma.addOnceListener\n     *  @chainable\n     *\n     *  @param {String} eventName\n     *         Name of the event to attach the listener to.\n     *         See {@link #docma.Event|`docma.Event`} enumeration.\n     *  @param {Function} listener\n     *         Function to be called when the event is emitted.\n     *\n     *  @returns {docma} - `docma` for chaining.\n     *\n     *  @example\n     *  docma.once('ready', function () {\n     *  \tconsole.log('Docma is ready!');\n     *  });\n     */","meta":{"range":[5564,5668],"filename":"core.js","lineno":191,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000210","name":"docma.once","type":"FunctionExpression","paramnames":[]}},"description":"Adds a listener that will be automatically removed after its first\n execution.","alias":"docma.addOnceListener","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["String"]},"description":"Name of the event to attach the listener to.\n        See {@link #docma.Event|`docma.Event`} enumeration.","name":"eventName"},{"type":{"names":["function"]},"description":"Function to be called when the event is emitted.","name":"listener"}],"returns":[{"type":{"names":["docma"]},"description":"- `docma` for chaining."}],"examples":["docma.once('ready', function () {\n \tconsole.log('Docma is ready!');\n });"],"name":"addOnceListener","longname":"docma.addOnceListener","kind":"function","memberof":"docma","scope":"static","$longname":"docma.once"},{"comment":"/**\n     *  Removes an existing Dust filter.\n     *  @chainable\n     *\n     *  @param {String} name - Name of the filter to be removed.\n     *\n     *  @returns {docma} - `docma` for chaining.\n     */","meta":{"range":[2566,2667],"filename":"core.js","lineno":88,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000114","name":"docma.removeFilter","type":"FunctionExpression","paramnames":["name"]}},"description":"Removes an existing Dust filter.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["String"]},"description":"Name of the filter to be removed.","name":"name"}],"returns":[{"type":{"names":["docma"]},"description":"- `docma` for chaining."}],"name":"removeFilter","longname":"docma.removeFilter","kind":"function","memberof":"docma","scope":"static","$longname":"docma.removeFilter"},{"comment":"/**\n     *  Renders content into docma-main element, by the given route information.\n     *\n     *  If the content is empty or `\"api\"`, we'll render the `docma-api`\n     *  Dust template. Otherwise, (e.g. `\"readme\"`) we'll render `docma-content`\n     *  Dust template, then  fetch `content/readme.html` and load it in the\n     *  `docma-main` element.\n     *\n     *  Note that rendering and the callback will be cancelled if the given\n     *  content is the latest content rendered.\n     *\n     *  @param {Route} routeInfo\n     *         Route information of the page to be rendered.\n     *  @param {Function} [callback]\n     *         Function to be executed when the rendering is complete.\n     *         `function (httpStatus:Number) { .. }`\n     *\n     *  @emits docma.Event.Render\n     */","meta":{"range":[19388,20615],"filename":"core.js","lineno":627,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000912","name":"docma.render","type":"FunctionExpression","paramnames":["routeInfo","callback"]},"vars":{"docma._.currentRoute":"docma._.currentRoute","isCbFn":"docma.render~isCbFn","":null}},"description":"Renders content into docma-main element, by the given route information.\n\n If the content is empty or `\"api\"`, we'll render the `docma-api`\n Dust template. Otherwise, (e.g. `\"readme\"`) we'll render `docma-content`\n Dust template, then  fetch `content/readme.html` and load it in the\n `docma-main` element.\n\n Note that rendering and the callback will be cancelled if the given\n content is the latest content rendered.","params":[{"type":{"names":["Route"]},"description":"Route information of the page to be rendered.","name":"routeInfo"},{"type":{"names":["function"]},"optional":true,"description":"Function to be executed when the rendering is complete.\n        `function (httpStatus:Number) { .. }`","name":"callback"}],"fires":["docma.Event.event:Render"],"name":"render","longname":"docma.render","kind":"function","memberof":"docma","scope":"static","$longname":"docma.render"},{"comment":"/**\n     *  Creates SPA route information object for the given route name and type.\n     *  @class\n     *  @memberof docma\n     *\n     *  @param {String} name\n     *         Name of the route.\n     *  @param {String} type\n     *         Type of the SPA route. See {@link #docma.Route.Type|`Route.Type`}\n     *         enumeration for possible values.\n     */","meta":{"range":[10186,10884],"filename":"core.js","lineno":339,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000326","name":"Route","type":"FunctionDeclaration","paramnames":["name","type"]},"vars":{"name":"docma.Route~name","info":"docma.Route~info"}},"description":"Creates SPA route information object for the given route name and type.","kind":"class","memberof":"docma","params":[{"type":{"names":["String"]},"description":"Name of the route.","name":"name"},{"type":{"names":["String"]},"description":"Type of the SPA route. See {@link #docma.Route.Type|`Route.Type`}\n        enumeration for possible values.","name":"type"}],"name":"Route","longname":"docma.Route","scope":"static","$longname":"docma.Route"},{"comment":"/**\n     *  Applies the route to the application.\n     *  @memberof docma\n     *\n     *  @returns {Route} - The route instance for chaining.\n     */","meta":{"range":[13181,13732],"filename":"core.js","lineno":436,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000473","name":"Route.prototype.apply","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":[]},"vars":{"docma._.documentation":"docma._.documentation","docma._.symbols":"docma._.symbols"}},"description":"Applies the route to the application.","memberof":"docma","returns":[{"type":{"names":["Route"]},"description":"- The route instance for chaining."}],"name":"Route#apply","longname":"docma.Route#apply","kind":"function","scope":"static","$longname":"docma.Route#apply"},{"comment":"/**\n     *  Creates a new Route instance. This is equivalent to `new docma.Route()`.\n     *  @memberof docma\n     *\n     *  @param {String} name\n     *         Name of the route.\n     *  @param {String} type\n     *         Type of the SPA route. See {@link #docma.Route.Type|`Route.Type`}\n     *         enumeration for possible values.\n     *\n     *  @returns {Route} - Route instance.\n     */","meta":{"range":[14354,14436],"filename":"core.js","lineno":473,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000575","name":"Route.create","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["name","type"]}},"description":"Creates a new Route instance. This is equivalent to `new docma.Route()`.","memberof":"docma","params":[{"type":{"names":["String"]},"description":"Name of the route.","name":"name"},{"type":{"names":["String"]},"description":"Type of the SPA route. See {@link #docma.Route.Type|`Route.Type`}\n        enumeration for possible values.","name":"type"}],"returns":[{"type":{"names":["Route"]},"description":"- Route instance."}],"name":"Route.create","longname":"docma.Route.create","kind":"function","scope":"static","$longname":"docma.Route.create"},{"comment":"/**\n     *  Checks whether the route actually exists.\n     *  @memberof docma\n     *\n     *  @returns {Boolean}\n     */","meta":{"range":[12260,12337],"filename":"core.js","lineno":403,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000406","name":"Route.prototype.exists","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":[]}},"description":"Checks whether the route actually exists.","memberof":"docma","returns":[{"type":{"names":["Boolean"]}}],"name":"Route#exists","longname":"docma.Route#exists","kind":"function","scope":"static","$longname":"docma.Route#exists"},{"comment":"/**\n     *  Checks whether the route is currently being viewed.\n     *  @memberof docma\n     *\n     *  @param {Object} routeInfo - Object to be checked.\n     *  @returns {Boolean}\n     */","meta":{"range":[12923,13021],"filename":"core.js","lineno":426,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000456","name":"Route.prototype.isCurrent","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":[]}},"description":"Checks whether the route is currently being viewed.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Object to be checked.","name":"routeInfo"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"Route#isCurrent","longname":"docma.Route#isCurrent","kind":"function","scope":"static","$longname":"docma.Route#isCurrent"},{"comment":"/**\n     *  Checks whether the route is equal to the given route.\n     *  @memberof docma\n     *\n     *  @param {Route} routeInfo - Route to be checked against.\n     *  @returns {Boolean}\n     */","meta":{"range":[12544,12724],"filename":"core.js","lineno":414,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000421","name":"Route.prototype.isEqualTo","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["routeInfo"]}},"description":"Checks whether the route is equal to the given route.","memberof":"docma","params":[{"type":{"names":["Route"]},"description":"Route to be checked against.","name":"routeInfo"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"Route#isEqualTo","longname":"docma.Route#isEqualTo","kind":"function","scope":"static","$longname":"docma.Route#isEqualTo"},{"comment":"/**\n     *  Gets the string representation of the route.\n     *  @memberof docma\n     *\n     *  @returns {String}\n     */","meta":{"range":[13865,13948],"filename":"core.js","lineno":457,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000560","name":"Route.prototype.toString","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":[]}},"description":"Gets the string representation of the route.","memberof":"docma","returns":[{"type":{"names":["String"]}}],"name":"Route#toString","longname":"docma.Route#toString","kind":"function","scope":"static","$longname":"docma.Route#toString"},{"comment":"/**\n     *  Docma SPA route types enumeration.\n     *  @memberof docma\n     *  @enum {String}\n     *  @readonly\n     *\n     *  @example\n     *  // docma.app.routing = \"query\"\n     *  type     name              path\n     *  -------  ----------------  --------------------------\n     *  api      _def_             /?api\n     *  api      docma-web         /?api=docma-web\n     *  content  templates         /?content=templates\n     *  content  guide             /?content=guide\n     *\n     *  @example\n     *  // docma.app.routing = \"path\"\n     *  type     name              path\n     *  -------  ----------------  --------------------------\n     *  api      _def_             /api\n     *  api      docma-web         /api/docma-web\n     *  content  templates         /templates\n     *  content  guide             /guide\n     *\n     */","meta":{"range":[11726,12081],"filename":"core.js","lineno":382,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000386","name":"Route.Type","type":"ObjectExpression","funcscope":"<anonymous>","value":"{\"API\":\"api\",\"CONTENT\":\"content\"}","paramnames":[]}},"description":"Docma SPA route types enumeration.","memberof":"docma","kind":"member","isEnum":true,"type":{"names":["String"]},"readonly":true,"examples":["// docma.app.routing = \"query\"\n type     name              path\n -------  ----------------  --------------------------\n api      _def_             /?api\n api      docma-web         /?api=docma-web\n content  templates         /?content=templates\n content  guide             /?content=guide\n\n ","// docma.app.routing = \"path\"\n type     name              path\n -------  ----------------  --------------------------\n api      _def_             /api\n api      docma-web         /api/docma-web\n content  templates         /templates\n content  guide             /guide"],"name":"Route.Type","longname":"docma.Route.Type","scope":"static","properties":[{"comment":"/**\n         *  Indicates that the route is for API documentation content.\n         *  @type {String}\n         */","meta":{"range":[11871,11881],"filename":"core.js","lineno":387,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000391","name":"API","type":"Literal","value":"api"}},"description":"Indicates that the route is for API documentation content.","type":{"names":["String"]},"name":"API","longname":"docma.Route.Type.API","kind":"member","memberof":"docma.Route.Type","scope":"static","defaultvalue":"api"},{"comment":"/**\n         *  Indicates that the route is for other content, such as HTML files\n         *  generated from markdown.\n         *  @type {String}\n         */","meta":{"range":[12057,12075],"filename":"core.js","lineno":393,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000393","name":"CONTENT","type":"Literal","value":"content"}},"description":"Indicates that the route is for other content, such as HTML files\n generated from markdown.","type":{"names":["String"]},"name":"CONTENT","longname":"docma.Route.Type.CONTENT","kind":"member","memberof":"docma.Route.Type","scope":"static","defaultvalue":"content"}],"$longname":"docma.Route.Type","$members":[{"comment":"/**\n         *  Indicates that the route is for API documentation content.\n         *  @type {String}\n         */","meta":{"range":[11871,11881],"filename":"core.js","lineno":387,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000391","name":"API","type":"Literal","value":"api"}},"description":"Indicates that the route is for API documentation content.","type":{"names":["String"]},"name":"API","longname":"docma.Route.Type.API","kind":"member","memberof":"docma.Route.Type","scope":"static","defaultvalue":"api","$longname":"docma.Route.Type.API"},{"comment":"/**\n         *  Indicates that the route is for other content, such as HTML files\n         *  generated from markdown.\n         *  @type {String}\n         */","meta":{"range":[12057,12075],"filename":"core.js","lineno":393,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000393","name":"CONTENT","type":"Literal","value":"content"}},"description":"Indicates that the route is for other content, such as HTML files\n generated from markdown.","type":{"names":["String"]},"name":"CONTENT","longname":"docma.Route.Type.CONTENT","kind":"member","memberof":"docma.Route.Type","scope":"static","defaultvalue":"content","$longname":"docma.Route.Type.CONTENT"}]},{"comment":"/**\n *  Array of available SPA routes of the documentation.\n *  This is created at build-time and defined via the `src` param of the\n *  {@link ?api=docma#Docma~BuildConfiguration|build configuration}.\n *\n *  @name docma.routes\n *  @type {Array}\n *\n *  @see {@link ?api=docma-web#docma.Route|docma.Route}\n */","meta":{"range":[28553,28861],"filename":"core.js","lineno":874,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{}},"description":"Array of available SPA routes of the documentation.\n This is created at build-time and defined via the `src` param of the\n {@link ?api=docma#Docma~BuildConfiguration|build configuration}.","name":"routes","type":{"names":["Array"]},"see":["{@link ?api=docma-web#docma.Route|docma.Route}"],"memberof":"docma","longname":"docma.routes","scope":"static","kind":"member","$longname":"docma.routes"},{"comment":"/**\n     *\tA flat array of JSDoc documentation symbol names. This is useful for\n     *\tbuilding menus, etc... If current route is not an API route, this will\n     *\tbe `null`.\n     *\n     *  See {@link ?api=docma#Docma~BuildConfiguration|build configuration} for more\n     *  details on how Javascript files can be grouped (and named) to form\n     *  separate API documentations and SPA routes.\n     *\n     *  @name docma.symbols\n     *  @type {Array}\n\n     *  @example\n     *  <!-- Usage in (Dust) partial -->\n     *  <ul class=\"menu\">\n     *      {#symbols}\n     *          <li><a href=\"#{.}\">{.}</a></li>\n     *      {/symbols}\n     *  </ul>\n     */","meta":{"range":[8902,9554],"filename":"core.js","lineno":297,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{}},"description":"A flat array of JSDoc documentation symbol names. This is useful for\n\tbuilding menus, etc... If current route is not an API route, this will\n\tbe `null`.\n\n See {@link ?api=docma#Docma~BuildConfiguration|build configuration} for more\n details on how Javascript files can be grouped (and named) to form\n separate API documentations and SPA routes.","name":"symbols","type":{"names":["Array"]},"examples":["<!-- Usage in (Dust) partial -->\n <ul class=\"menu\">\n     {#symbols}\n         <li><a href=\"#{.}\">{.}</a></li>\n     {/symbols}\n </ul>"],"memberof":"docma","longname":"docma.symbols","scope":"static","kind":"member","$longname":"docma.symbols"},{"comment":"/**\n *  Provides template specific configuration data.\n *  This is also useful within the Dust partials of the Docma template.\n *  @name docma.template\n *  @type {Object}\n *\n *  @property {Object} options - Docma template options. Defined at build-time,\n *  by the user.\n *  @property {String} name\n *            Name of the Docma template.\n *  @property {String} version\n *            Version of the Docma template.\n *  @property {String} author\n *            Author information for the Docma template.\n *  @property {String} license\n *            License information for the Docma template.\n *  @property {String} main\n *            Name of the main file of the template. i.e. `index.html`\n *\n *  @example\n *  <!-- Usage in a Dust partial -->\n *  <div>\n *      {?template.options.someOption}\n *      <span>Displayed if someOption is true.</span>\n *      {/template.options.someOption}\n *  </div>\n *  <div class=\"footer\">{template.name} by {template.author}</div>\n */","meta":{"range":[28863,29831],"filename":"core.js","lineno":885,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{}},"description":"Provides template specific configuration data.\n This is also useful within the Dust partials of the Docma template.","name":"template","type":{"names":["Object"]},"properties":[{"type":{"names":["String"]},"description":"Author information for the Docma template.","name":"author"},{"type":{"names":["String"]},"description":"License information for the Docma template.","name":"license"},{"type":{"names":["String"]},"description":"Name of the main file of the template. i.e. `index.html`","name":"main"},{"type":{"names":["String"]},"description":"Name of the Docma template.","name":"name"},{"type":{"names":["Object"]},"description":"Docma template options. Defined at build-time,\n by the user.","name":"options"},{"type":{"names":["String"]},"description":"Version of the Docma template.","name":"version"}],"examples":["<!-- Usage in a Dust partial -->\n <div>\n     {?template.options.someOption}\n     <span>Displayed if someOption is true.</span>\n     {/template.options.someOption}\n </div>\n <div class=\"footer\">{template.name} by {template.author}</div>"],"memberof":"docma","longname":"docma.template","scope":"static","kind":"member","$longname":"docma.template"},{"comment":"/**\n  *  Utilities for inspecting JSDoc documentation and symbols; and parsing\n  *  documentation data into proper HTML.\n  *  See {@link ?api=docma-web-utils|`docma.utils` documentation}.\n  *  @name docma.utils\n  *  @type {Object}\n  *  @namespace\n  */","meta":{"range":[29834,30085],"filename":"core.js","lineno":914,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{}},"description":"Utilities for inspecting JSDoc documentation and symbols; and parsing\n documentation data into proper HTML.\n See {@link ?api=docma-web-utils|`docma.utils` documentation}.","name":"utils","type":{"names":["Object"]},"kind":"namespace","memberof":"docma","longname":"docma.utils","scope":"static","$longname":"docma.utils"}]}],"symbols":["docma","docma.addFilter","docma.apis","docma.app","docma.currentRoute","docma.documentation","docma.Event","docma.fetch","docma.filterExists","docma.location","docma.off","docma.on","docma.once","docma.removeFilter","docma.render","docma.Route","docma.Route#apply","docma.Route.create","docma.Route#exists","docma.Route#isCurrent","docma.Route#isEqualTo","docma.Route#toString","docma.Route.Type","docma.routes","docma.symbols","docma.template","docma.utils"]},"docma-web-utils":{"documentation":[{"comment":"/**\n *  Utilities for inspecting JSDoc documentation and symbols; and parsing\n *  documentation data into proper HTML.\n *  @name docma.utils\n *  @type {Object}\n *  @namespace\n */","meta":{"range":[87,265],"filename":"core.utils.js","lineno":7,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{}},"description":"Utilities for inspecting JSDoc documentation and symbols; and parsing\n documentation data into proper HTML.","name":"utils","type":{"names":["Object"]},"kind":"namespace","memberof":"docma","longname":"docma.utils","scope":"static","$longname":"docma.utils"},{"comment":"/**\n     *  Gets the code name of the given symbol.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {String} - If no code name, falls back to long name.\n     */","meta":{"range":[3490,3649],"filename":"core.utils.js","lineno":108,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000244","name":"utils.getCodeName","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Gets the code name of the given symbol.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["String"]},"description":"- If no code name, falls back to long name."}],"name":"utils.getCodeName","longname":"docma.utils.getCodeName","kind":"function","scope":"static","$longname":"docma.utils.getCodeName"},{"comment":"/**\n     *  Builds a string of keywords from the given symbol.\n     *  This is useful for filter/search features of a template.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Target documentation symbol.\n     *  @returns {String}\n     */","meta":{"range":[17467,18324],"filename":"core.utils.js","lineno":562,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100001143","name":"utils.getKeywords","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]},"vars":{"k":"docma.utils.getKeywords~k"}},"description":"Builds a string of keywords from the given symbol.\n This is useful for filter/search features of a template.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Target documentation symbol.","name":"symbol"}],"returns":[{"type":{"names":["String"]}}],"name":"utils.getKeywords","longname":"docma.utils.getKeywords","kind":"function","scope":"static","$longname":"docma.utils.getKeywords"},{"comment":"/**\n     *  Gets the original long name of the given symbol.\n     *  JSDoc overwrites the `longname` and `name` of the symbol, if it has an\n     *  alias. This returns the correct long name.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {String}\n     */","meta":{"range":[2619,3216],"filename":"core.utils.js","lineno":86,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000147","name":"utils.getLongName","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]},"vars":{"longName":"docma.utils.getLongName~longName","codeName":"docma.utils.getLongName~codeName","memberOf":"docma.utils.getLongName~memberOf","re":"docma.utils.getLongName~re","dot":"docma.utils.getLongName~dot"}},"description":"Gets the original long name of the given symbol.\n JSDoc overwrites the `longname` and `name` of the symbol, if it has an\n alias. This returns the correct long name.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["String"]}}],"name":"utils.getLongName","longname":"docma.utils.getLongName","kind":"function","scope":"static","$longname":"docma.utils.getLongName"},{"comment":"/**\n     *  Gets the short name of the given symbol.\n     *  JSDoc overwrites the `longname` and `name` of the symbol, if it has an\n     *  alias. This returns the correct short name.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {String}\n     */","meta":{"range":[1937,2293],"filename":"core.utils.js","lineno":68,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000108","name":"utils.getName","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]},"vars":{"codeName":"docma.utils.getName~codeName"}},"description":"Gets the short name of the given symbol.\n JSDoc overwrites the `longname` and `name` of the symbol, if it has an\n alias. This returns the correct short name.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["String"]}}],"name":"utils.getName","longname":"docma.utils.getName","kind":"function","scope":"static","$longname":"docma.utils.getName"},{"comment":"/**\n     *  Gets the return types of the symbol as a string (joined with pipes `|`).\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Target documentation symbol.\n     *  @returns {String}\n     */","meta":{"range":[12133,12616],"filename":"core.utils.js","lineno":406,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000751","name":"utils.getReturnTypes","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]},"vars":{"ret":"docma.utils.getReturnTypes~ret","names":"docma.utils.getReturnTypes~names","allNames":"docma.utils.getReturnTypes~allNames","":null}},"description":"Gets the return types of the symbol as a string (joined with pipes `|`).","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Target documentation symbol.","name":"symbol"}],"returns":[{"type":{"names":["String"]}}],"name":"utils.getReturnTypes","longname":"docma.utils.getReturnTypes","kind":"function","scope":"static","$longname":"docma.utils.getReturnTypes"},{"comment":"/**\n     *  Gets the first matching symbol by the given name.\n     *  @memberof docma\n     *\n     *  @param {Array} docs - Documentation symbols array.\n     *  @param {String} name - Symbol name to be checked.\n     *  @returns {Object} - Symbol object if found. Otherwise, returns `null`.\n     */","meta":{"range":[3957,4487],"filename":"core.utils.js","lineno":121,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000269","name":"utils.getSymbolByName","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["docs","name"]},"vars":{"i":"docma.utils.getSymbolByName~i","symbol":"docma.utils.getSymbolByName~symbol","sym":"docma.utils.getSymbolByName~sym"}},"description":"Gets the first matching symbol by the given name.","memberof":"docma","params":[{"type":{"names":["Array"]},"description":"Documentation symbols array.","name":"docs"},{"type":{"names":["String"]},"description":"Symbol name to be checked.","name":"name"}],"returns":[{"type":{"names":["Object"]},"description":"- Symbol object if found. Otherwise, returns `null`."}],"name":"utils.getSymbolByName","longname":"docma.utils.getSymbolByName","kind":"function","scope":"static","$longname":"docma.utils.getSymbolByName"},{"comment":"/**\n     *  GGets the types of the symbol as a string (joined with pipes `|`).\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Target documentation symbol.\n     *  @returns {String}\n     *\n     *  @example\n     *  var symbol = { \"type\": { \"names\": [\"Number\", \"String\"] } };\n     *  docma.util.getTypes(symbol); // Number|String\n     */","meta":{"range":[11508,11760],"filename":"core.utils.js","lineno":384,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000705","name":"utils.getTypes","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]},"vars":{"types":"docma.utils.getTypes~types"}},"description":"GGets the types of the symbol as a string (joined with pipes `|`).","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Target documentation symbol.","name":"symbol"}],"returns":[{"type":{"names":["String"]}}],"examples":["var symbol = { \"type\": { \"names\": [\"Number\", \"String\"] } };\n docma.util.getTypes(symbol); // Number|String"],"name":"utils.getTypes","longname":"docma.utils.getTypes","kind":"function","scope":"static","$longname":"docma.utils.getTypes"},{"comment":"/**\n     *  Checks whether the given symbol has description.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[11002,11132],"filename":"core.utils.js","lineno":367,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000683","name":"utils.hasDescription","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol has description.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.hasDescription","longname":"docma.utils.hasDescription","kind":"function","scope":"static","$longname":"docma.utils.hasDescription"},{"comment":"/**\n     *  Checks whether the given symbol is a class.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[5522,5730],"filename":"core.utils.js","lineno":178,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000388","name":"utils.isClass","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol is a class.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isClass","longname":"docma.utils.isClass","kind":"function","scope":"static","$longname":"docma.utils.isClass"},{"comment":"/**\n     *  Checks whether the given symbol is a constructor.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[5928,6092],"filename":"core.utils.js","lineno":191,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000418","name":"utils.isConstructor","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol is a constructor.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isConstructor","longname":"docma.utils.isConstructor","kind":"function","scope":"static","$longname":"docma.utils.isConstructor"},{"comment":"/**\n     *  Checks whether the given symbol is an enumeration.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[9880,9950],"filename":"core.utils.js","lineno":329,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000646","name":"utils.isEnum","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol is an enumeration.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isEnum","longname":"docma.utils.isEnum","kind":"function","scope":"static","$longname":"docma.utils.isEnum"},{"comment":"/**\n     *  Checks whether the given symbol has global scope.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[4685,4769],"filename":"core.utils.js","lineno":145,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000346","name":"utils.isGlobal","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol has global scope.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isGlobal","longname":"docma.utils.isGlobal","kind":"function","scope":"static","$longname":"docma.utils.isGlobal"},{"comment":"/**\n     *  Checks whether the given symbol has an inner scope.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[6729,6811],"filename":"core.utils.js","lineno":220,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000463","name":"utils.isInner","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol has an inner scope.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isInner","longname":"docma.utils.isInner","kind":"function","scope":"static","$longname":"docma.utils.isInner"},{"comment":"/**\n     *  Checks whether the given symbol is an instance member.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[7014,7108],"filename":"core.utils.js","lineno":231,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000477","name":"utils.isInstanceMember","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol is an instance member.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isInstanceMember","longname":"docma.utils.isInstanceMember","kind":"function","scope":"static","$longname":"docma.utils.isInstanceMember"},{"comment":"/**\n     *  Checks whether the given symbol is an instance method.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[7788,7911],"filename":"core.utils.js","lineno":256,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000530","name":"utils.isInstanceMethod","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol is an instance method.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isInstanceMethod","longname":"docma.utils.isInstanceMethod","kind":"function","scope":"static","$longname":"docma.utils.isInstanceMethod"},{"comment":"/**\n     *  Checks whether the given symbol is an instance property.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[8790,8917],"filename":"core.utils.js","lineno":290,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000584","name":"utils.isInstanceProperty","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol is an instance property.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isInstanceProperty","longname":"docma.utils.isInstanceProperty","kind":"function","scope":"static","$longname":"docma.utils.isInstanceProperty"},{"comment":"/**\n     *  Checks whether the given symbol is a method (function).\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[7312,7546],"filename":"core.utils.js","lineno":242,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000491","name":"utils.isMethod","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]},"vars":{"codeType":"docma.utils.isMethod~codeType"}},"description":"Checks whether the given symbol is a method (function).","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isMethod","longname":"docma.utils.isMethod","kind":"function","scope":"static","$longname":"docma.utils.isMethod"},{"comment":"/**\n     *  Checks whether the given symbol is a module.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[5247,5330],"filename":"core.utils.js","lineno":167,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000374","name":"utils.isModule","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol is a module.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isModule","longname":"docma.utils.isModule","kind":"function","scope":"static","$longname":"docma.utils.isModule"},{"comment":"/**\n     *  Checks whether the given symbol is a namespace.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[4965,5054],"filename":"core.utils.js","lineno":156,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000360","name":"utils.isNamespace","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol is a namespace.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isNamespace","longname":"docma.utils.isNamespace","kind":"function","scope":"static","$longname":"docma.utils.isNamespace"},{"comment":"/**\n     *  Checks whether the given symbol is a property.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[8425,8585],"filename":"core.utils.js","lineno":278,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000570","name":"utils.isProperty","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol is a property.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isProperty","longname":"docma.utils.isProperty","kind":"function","scope":"static","$longname":"docma.utils.isProperty"},{"comment":"/**\n     *  Checks whether the given symbol is read-only.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[10144,10220],"filename":"core.utils.js","lineno":340,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000658","name":"utils.isReadOnly","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol is read-only.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isReadOnly","longname":"docma.utils.isReadOnly","kind":"function","scope":"static","$longname":"docma.utils.isReadOnly"},{"comment":"/**\n     *  Checks whether the given symbol is a static member.\n     *  @memberof docma\n     *  @alias utils.isStatic\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[6322,6412],"filename":"core.utils.js","lineno":204,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000441","name":"utils.isStaticMember","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol is a static member.","memberof":"docma","alias":"utils.isStatic","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isStatic","longname":"docma.utils.isStatic","kind":"function","scope":"static","$longname":"docma.utils.isStaticMember"},{"comment":"/**\n     *  Checks whether the given symbol is a static method.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[8111,8230],"filename":"core.utils.js","lineno":267,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000550","name":"utils.isStaticMethod","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol is a static method.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isStaticMethod","longname":"docma.utils.isStaticMethod","kind":"function","scope":"static","$longname":"docma.utils.isStaticMethod"},{"comment":"/**\n     *  Checks whether the given symbol is a static property.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[9119,9242],"filename":"core.utils.js","lineno":301,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000604","name":"utils.isStaticProperty","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol is a static property.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isStaticProperty","longname":"docma.utils.isStaticProperty","kind":"function","scope":"static","$longname":"docma.utils.isStaticProperty"},{"comment":"/**\n     *  Checks whether the given symbol is a custom type definition.\n     *  @memberof docma\n     *  @alias utils.isCustomType\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[9485,9570],"filename":"core.utils.js","lineno":313,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000624","name":"utils.isTypeDef","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol is a custom type definition.","memberof":"docma","alias":"utils.isCustomType","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isCustomType","longname":"docma.utils.isCustomType","kind":"function","scope":"static","$longname":"docma.utils.isTypeDef"},{"comment":"/**\n     *  Checks whether the given symbol is undocumented.\n     *  This checks if the symbol has any comments.\n     *  @memberof docma\n     *\n     *  @param {Object} symbol - Documented symbol object.\n     *  @returns {Boolean}\n     */","meta":{"range":[10469,10805],"filename":"core.utils.js","lineno":352,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000670","name":"utils.isUndocumented","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["symbol"]}},"description":"Checks whether the given symbol is undocumented.\n This checks if the symbol has any comments.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Documented symbol object.","name":"symbol"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"utils.isUndocumented","longname":"docma.utils.isUndocumented","kind":"function","scope":"static","$longname":"docma.utils.isUndocumented"},{"comment":"/**\n     *  Normalizes the number of spaces/tabs to multiples of 2 spaces, in the\n     *  beginning of each line. Useful for fixing mixed indets of a description\n     *  or example.\n     *  @memberof docma\n     *\n     *  @param {String} string - String to process.\n     *  @returns {String}\n     */","meta":{"range":[16860,17201],"filename":"core.utils.js","lineno":545,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100001087","name":"utils.normalizeTabs","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["string"]},"vars":{"spaces":"docma.utils.normalizeTabs~spaces","":null}},"description":"Normalizes the number of spaces/tabs to multiples of 2 spaces, in the\n beginning of each line. Useful for fixing mixed indets of a description\n or example.","memberof":"docma","params":[{"type":{"names":["String"]},"description":"String to process.","name":"string"}],"returns":[{"type":{"names":["String"]}}],"name":"utils.normalizeTabs","longname":"docma.utils.normalizeTabs","kind":"function","scope":"static","$longname":"docma.utils.normalizeTabs"},{"comment":"/**\n     *  Gets the value of the target property by the given dot\n     *  {@link https://github.com/onury/notation|notation}.\n     *  @memberof docma\n     *\n     *  @param {Object} obj - Source object.\n     *  @param {String} notation - Path of the property in dot-notation.\n     *\n     *  @returns {*} - The value of the notation. If the given notation does\n     *  not exist, safely returns `undefined`.\n     *\n     *  @example\n     *  var symbol = { code: { meta: { type: \"MethodDefinition\" } } };\n     *  docma.utils.notate(symbol, \"code.meta.type\"); // returns \"MethodDefinition\"\n     */","meta":{"range":[1191,1618],"filename":"core.utils.js","lineno":43,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000039","name":"utils.notate","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["obj","notation"]},"vars":{"o":"docma.utils.notate~o","props":"docma.utils.notate~props","prop":"docma.utils.notate~prop"}},"description":"Gets the value of the target property by the given dot\n {@link https://github.com/onury/notation|notation}.","memberof":"docma","params":[{"type":{"names":["Object"]},"description":"Source object.","name":"obj"},{"type":{"names":["String"]},"description":"Path of the property in dot-notation.","name":"notation"}],"returns":[{"type":{"names":["*"]},"description":"- The value of the notation. If the given notation does\n not exist, safely returns `undefined`."}],"examples":["var symbol = { code: { meta: { type: \"MethodDefinition\" } } };\n docma.utils.notate(symbol, \"code.meta.type\"); // returns \"MethodDefinition\""],"name":"utils.notate","longname":"docma.utils.notate","kind":"function","scope":"static","$longname":"docma.utils.notate"},{"comment":"/**\n     *  Parses the given string into proper HTML. Removes leading whitespace,\n     *  converts new lines to paragraphs, ticks to code tags and JSDoc links to\n     *  anchors.\n     *  @memberof docma\n     *\n     *  @param {String} string\n     *         String to be parsed.\n     *  @param {Object} [options]\n     *         Parse options.\n     *         @param {Object} [options.keepIfSingle=false]\n     *                If enabled, single lines will not be converted to paragraphs.\n     *         @param {String} [options.target]\n     *                Href target for links. e.g. `\"_blank\"`\n     *\n     *  @returns {String}\n     */","meta":{"range":[16280,16550],"filename":"core.utils.js","lineno":528,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100001040","name":"utils.parse","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["string","options"]},"vars":{"options":"docma.utils.parse~options","string":"docma.utils.parse~string"}},"description":"Parses the given string into proper HTML. Removes leading whitespace,\n converts new lines to paragraphs, ticks to code tags and JSDoc links to\n anchors.","memberof":"docma","params":[{"type":{"names":["String"]},"description":"String to be parsed.","name":"string"},{"type":{"names":["Object"]},"optional":true,"description":"Parse options.","name":"options"},{"type":{"names":["Object"]},"optional":true,"defaultvalue":false,"description":"If enabled, single lines will not be converted to paragraphs.","name":"options.keepIfSingle"},{"type":{"names":["String"]},"optional":true,"description":"Href target for links. e.g. `\"_blank\"`","name":"options.target"}],"returns":[{"type":{"names":["String"]}}],"name":"utils.parse","longname":"docma.utils.parse","kind":"function","scope":"static","$longname":"docma.utils.parse"},{"comment":"/**\n     *  Converts JSDoc `@link` directives to HTML anchor tags.\n     *  @memberof docma\n     *\n     *  @param {String} string\n     *         String to be parsed.\n     *  @param {Object} [options]\n     *         Parse options.\n     *         @param {String} [options.target]\n     *                Href target. e.g. `\"_blank\"`\n     *\n     *  @returns {String}\n     */","meta":{"range":[14479,15634],"filename":"core.utils.js","lineno":484,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000924","name":"utils.parseLinks","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["string","options"]},"vars":{"options":"docma.utils.parseLinks~options","re":"docma.utils.parseLinks~re","out":"docma.utils.parseLinks~out","":null}},"description":"Converts JSDoc `@link` directives to HTML anchor tags.","memberof":"docma","params":[{"type":{"names":["String"]},"description":"String to be parsed.","name":"string"},{"type":{"names":["Object"]},"optional":true,"description":"Parse options.","name":"options"},{"type":{"names":["String"]},"optional":true,"description":"Href target. e.g. `\"_blank\"`","name":"options.target"}],"returns":[{"type":{"names":["String"]}}],"name":"utils.parseLinks","longname":"docma.utils.parseLinks","kind":"function","scope":"static","$longname":"docma.utils.parseLinks"},{"comment":"/**\n     *  Converts new lines to HTML paragraphs.\n     *  @memberof docma\n     *\n     *  @param {String} string\n     *         String to be parsed.\n     *  @param {Object} [options]\n     *         Parse options.\n     *         @param {Boolean} [options.keepIfSingle=false]\n     *                If `true`, lines will not be converted to paragraphs.\n     *\n     *  @returns {String}\n     */","meta":{"range":[13790,14099],"filename":"core.utils.js","lineno":462,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000871","name":"utils.parseNewLines","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["string","options"]},"vars":{"options":"docma.utils.parseNewLines~options","parts":"docma.utils.parseNewLines~parts","":null}},"description":"Converts new lines to HTML paragraphs.","memberof":"docma","params":[{"type":{"names":["String"]},"description":"String to be parsed.","name":"string"},{"type":{"names":["Object"]},"optional":true,"description":"Parse options.","name":"options"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"If `true`, lines will not be converted to paragraphs.","name":"options.keepIfSingle"}],"returns":[{"type":{"names":["String"]}}],"name":"utils.parseNewLines","longname":"docma.utils.parseNewLines","kind":"function","scope":"static","$longname":"docma.utils.parseNewLines"},{"comment":"/**\n     *  Converts ticks to HTML code tags.\n     *  @memberof docma\n     *\n     *  @param {String} string - String to be parsed.\n     *  @returns {String}\n     */","meta":{"range":[13160,13388],"filename":"core.utils.js","lineno":442,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000841","name":"utils.parseTicks","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["string"]},"vars":{"re":"docma.utils.parseTicks~re","":null}},"description":"Converts ticks to HTML code tags.","memberof":"docma","params":[{"type":{"names":["String"]},"description":"String to be parsed.","name":"string"}],"returns":[{"type":{"names":["String"]}}],"name":"utils.parseTicks","longname":"docma.utils.parseTicks","kind":"function","scope":"static","$longname":"docma.utils.parseTicks"},{"comment":"/**\n     *  Removes leading spaces and dashes. Useful when displaying symbol\n     *  descriptions.\n     *  @memberof docma\n     *\n     *  @param {String} string - String to be trimmed.\n     *  @returns {String}\n     */","meta":{"range":[12846,12984],"filename":"core.utils.js","lineno":430,"path":"/Users/oy/developer/javascript/docma/lib/web","code":{"id":"astnode100000826","name":"utils.trimLeft","type":"FunctionExpression","funcscope":"<anonymous>","paramnames":["string"]}},"description":"Removes leading spaces and dashes. Useful when displaying symbol\n descriptions.","memberof":"docma","params":[{"type":{"names":["String"]},"description":"String to be trimmed.","name":"string"}],"returns":[{"type":{"names":["String"]}}],"name":"utils.trimLeft","longname":"docma.utils.trimLeft","kind":"function","scope":"static","$longname":"docma.utils.trimLeft"}],"symbols":["docma.utils","docma.utils.getCodeName","docma.utils.getKeywords","docma.utils.getLongName","docma.utils.getName","docma.utils.getReturnTypes","docma.utils.getSymbolByName","docma.utils.getTypes","docma.utils.hasDescription","docma.utils.isClass","docma.utils.isConstructor","docma.utils.isEnum","docma.utils.isGlobal","docma.utils.isInner","docma.utils.isInstanceMember","docma.utils.isInstanceMethod","docma.utils.isInstanceProperty","docma.utils.isMethod","docma.utils.isModule","docma.utils.isNamespace","docma.utils.isProperty","docma.utils.isReadOnly","docma.utils.isStaticMember","docma.utils.isStaticMethod","docma.utils.isStaticProperty","docma.utils.isTypeDef","docma.utils.isUndocumented","docma.utils.normalizeTabs","docma.utils.notate","docma.utils.parse","docma.utils.parseLinks","docma.utils.parseNewLines","docma.utils.parseTicks","docma.utils.trimLeft"]}},"app":{"title":"Docma Documentation","meta":null,"base":"/docma/","entrance":"content:guide","routing":"query","server":"github"},"template":{"name":"Docma Default Template","version":"1.3.0","author":"Onur Yıldırım (onur@cutepilot.com)","license":"MIT","main":"index.html","options":{"title":"Docma","sidebar":true,"collapsed":false,"badges":true,"search":true,"navbar":true,"navItems":[{"iconClass":"ico-book","label":"Building Docs","items":[{"label":"Guide","href":"./"},{"separator":true},{"label":"Docma (Builder) API","href":"?api=docma"},{"label":"Build Configuration","href":"?api=docma#Docma~BuildConfiguration"}]},{"iconClass":"ico-mouse-pointer","label":"Templates","items":[{"label":"Docma Default Template","href":"?content=default-template"},{"separator":true},{"label":"Creating Docma Templates","href":"?content=templates"},{"separator":true},{"label":"Docma Web API","href":"?api=docma-web"},{"label":"Docma Filters","href":"?content=docma-filters"}]},{"iconClass":"ico-md ico-download","label":"Download","href":"index.html","items":[{"label":"<code>npm i docma</code>"},{"label":"Docma Releases","href":"https://github.com/onury/docma/releases","target":"_blank"},{"separator":true},{"label":"Change Log","href":"?content=changelog"}]},{"iconClass":"ico-md ico-github","label":"GitHub","href":"https://github.com/onury/docma","target":"_blank"}]}},"_":{"partials":{"api":"docma-api","content":"docma-content","notFound":"docma-404"},"elementID":"docma-main","contentElementID":"docma-content","logsEnabled":false}};
!function(){var e={};e.createChild=function(e,t,n){n=n||{};var o=document.createElement(t||"div");return Object.keys(n).forEach(function(e){o[e]=n[e]}),e.appendChild(o),o},e.getDocmaElem=function(){var t=document.getElementById(docma._.elementID);return t||(t=e.createChild(document.body,"div",{id:docma._.elementID})),t},e.getContentElem=function(){var e=document.getElementById(docma._.contentElementID);if(!e)throw new Error("Partial "+docma._.partials.content+' should have an element with id="'+docma._.contentElementID+'".');return e},e.loadCompiledContent=function(t){var n=e.getDocmaElem();n.innerHTML=t},e.loadContent=function(t){var n=e.getContentElem();n.innerHTML=t,e.scrollTo()},e.getOffset=function(e){var t="object"==typeof e?e:document.getElementById(e);if(t){var n=t.getBoundingClientRect();if(n.width||n.height||t.getClientRects().length){var o=document.documentElement;return{top:n.top+window.pageYOffset-o.clientTop,left:n.left+window.pageXOffset-o.clientLeft}}}},e.scrollTo=function(t){if(t=(t||window.location.hash||"").replace(/^#/,""),!t)return void(document.body.scrollTop=0);var n=document.getElementById(t);n&&(document.body.scrollTop=e.getOffset(n).top)},e.fixAnchors=function(){docma.app.base&&setTimeout(function(){var e,t,n=document.querySelectorAll('a[href^="#"');for(e=0;e<n.length;e++){t=n[e];var o=t.getAttribute("href");"#"===o.slice(0,1)&&(o=window.location.pathname+(window.location.search||"")+o,t.setAttribute("href",o))}},50)},docma.dom=Object.freeze(e)}();
!function(){dust.filters=dust.filters||{},dust.filters.$pt=function(t){return docma.utils.parseTicks(t)},dust.filters.$pnl=function(t){return docma.utils.parseNewLines(t,{keepIfSingle:!0})},dust.filters.$pl=function(t){return docma.utils.parseLinks(t)},dust.filters.$tl=function(t){return docma.utils.trimLeft(t)},dust.filters.$p=function(t){return docma.utils.parse(t,{keepIfSingle:!0})},dust.filters.$nt=function(t){return docma.utils.normalizeTabs(t)},dust.filters.$desc=function(t){return docma.utils.parse(t.classdesc||t.description||"")},dust.filters.$def=function(t){return t.optional?String(t.defaultvalue):""},dust.filters.$val=function(t){var e=docma.utils.notate(t,"meta.code.value");return void 0===e?"":e},dust.filters.$id=function(t){var e;if("string"==typeof t)e=t;else{var s=docma.utils.isConstructor(t)?"new-":"";e=s+t.$longname}return e.replace(/ /g,"-")}}();
!function(){function o(o,e,n){return e?(o&&"/"!==e.slice(0,1)&&(e="/"+e),n&&"/"!==e.slice(-1)&&(e+="/"),e):o||n?"/":""}function e(o,e){e=void 0===e?window.location.search||"":e,"?"===e.slice(0,1)&&(e=e.slice(1)),o=o.replace(/[\[\]]/g,"\\$&");var n=new RegExp("&?"+o+"(=([^&#]*)|&|#|$)"),a=n.exec(e);return a&&a[2]?decodeURIComponent(a[2].replace(/\+/g," ")):""}Object.defineProperty(docma,"location",{configurable:!1,get:function(){var n=o(!0,window.location.pathname,!0),a=o(!0,docma.app.base,!0),c=n;return n.slice(0,a.length)===a&&(c=n.slice(a.length-1,n.length)),{host:window.location.host,hostname:window.location.hostname,origin:window.location.origin,port:window.location.port,protocol:(window.location.protocol||"").replace(/:$/,""),entrance:o(!0,docma.app.entrance,!1),base:a,hash:(window.location.hash||"").replace(/^#/,""),query:(window.location.search||"").replace(/^\?/,""),href:window.location.href,fullpath:n,pathname:c,path:c+(window.location.search||""),getQuery:e}}}),docma.location=Object.freeze(docma.location)}();
!function(){function e(e){return e&&""!==e.trim()?e:null}function n(e){return(e||"").replace(/([^>]+>)?~?(.*)/,"$2")}var t={};t.notate=function(e,n){if("object"==typeof e){var r,i=Array.isArray(n)?n:n.split("."),o=i[0];if(o)return r=e[o],i.length>1?(i.shift(),t.notate(r,i)):r}},t.getName=function(e){if(e.alias){var r=n(t.notate(e,"meta.code.name")||"");if(r)return r.replace(/.*?[#\.~:](\w+)$/i,"$1")}return e.name},t.getLongName=function(e){var r=n(e.longname);if(e.alias){var i=n(t.notate(e,"meta.code.name")||"");if(!i)return r;var o=n(e.memberof||"");if(!o)return i;var a=new RegExp("^"+o+"[#\\.~:]"),s="instance"===e.scope?"#":".";return a.test(i)?i:o+s+i}return r},t.getFullName=t.getLongName,t.getCodeName=function(e){return n(t.notate(e,"meta.code.name")||"")||t.getLongName(e)},t.getSymbolByName=function(e,n){var r,i;for(r=0;r<e.length;r++){if(i=e[r],i.name===n||i.longname===n||t.getFullName(i)===n)return i;if(i.$members){var o=t.getSymbolByName(i.$members,n);if(o)return o}}return null},t.isGlobal=function(e){return"global"===e.scope},t.isNamespace=function(e){return"namespace"===e.kind},t.isModule=function(e){return"module"===e.kind},t.isClass=function(e){return!t.isConstructor(e)&&("class"===e.kind||"ClassDeclaration"===t.notate(e,"meta.code.type"))},t.isConstructor=function(e){return"class"===e.kind&&"MethodDefinition"===t.notate(e,"meta.code.type")},t.isStaticMember=function(e){return"static"===e.scope},t.isStatic=t.isStaticMember,t.isInner=function(e){return"inner"===e.scope},t.isInstanceMember=function(e){return"instance"===e.scope},t.isMethod=function(e){var n=t.notate(e,"meta.code.type");return"function"===e.kind||"MethodDefinition"===n||"FunctionExpression"===n},t.isFunction=t.isMethod,t.isInstanceMethod=function(e){return t.isInstanceMember(e)&&t.isMethod(e)},t.isStaticMethod=function(e){return t.isStaticMember(e)&&t.isMethod(e)},t.isProperty=function(e){return"member"===e.kind},t.isInstanceProperty=function(e){return t.isInstanceMember(e)&&t.isProperty(e)},t.isStaticProperty=function(e){return t.isStaticMember(e)&&t.isProperty(e)},t.isTypeDef=function(e){return"typedef"===e.kind},t.isCustomType=t.isTypeDef,t.isEnum=function(e){return e.isEnum},t.isReadOnly=function(e){return e.readonly},t.isUndocumented=function(e){return!e.comments},t.hasDescription=function(n){return Boolean(e(n.classdesc)||e(n.description))},t.getTypes=function(e){if("class"===e.kind)return"class";var n=t.notate(e,"type.names")||[];return n=n.join("|"),e.isEnum?"enum<"+n+">":n},t.getReturnTypes=function(e){var n=e.returns;if(!Array.isArray(n))return"void";var r,i=n.reduce(function(e,n){return r=t.notate(n,"type.names"),Array.isArray(r)?e.concat(r):e},[]);return i.length>0?i.join("|"):"void"},t.trimLeft=function(e){return e.replace(/^[\s\n\r\-—]*/,"")},t.parseTicks=function(e){var n=/(`)(.*?)(`)/g;return e.replace(n,function(e,n,t){return"<code>"+t+"</code>"})},t.parseNewLines=function(e,n){n=n||{};var t=e.split(/\n{2,}/);return t.length<=1&&n.keepIfSingle?e:t.map(function(e){return"<p>"+e+"</p>"}).join("")},t.parseLinks=function(e,n){n=n||{};var r=/\{@link +([^\}]*?)\}/g,i=e.replace(r,function(e,t){var r,i,o=t.split("|");1===o.length?r=i=o[0].trim():(r=o[0].trim(),i=o[1].trim());var a=n.target?' target="'+n.target+'"':"";return'<a href="'+r+'"'+a+">"+i+"</a>"});return t.parseTicks(i)},t.parse=function(e,n){return n=n||{},e=t.trimLeft(e),e=t.parseNewLines(e,n),e=t.parseTicks(e),t.parseLinks(e,n)},t.normalizeTabs=function(e){var n;return e.replace(/(\n+)(\s+)/gm,function(e,t,r){return n=r.replace(/\t/g,"  "),n=new Array(n.length-n.length%2+1).join(" "),t+n})},t.getKeywords=function(e){if("string"==typeof e)return e.toLowerCase();var n=t.getFullName(e)+" "+e.longname+" "+e.name+" "+(e.alias||"")+" "+(e.memberOf||"")+" "+(e.kind||"")+" "+(e.scope||"")+" "+(e.classdesc||"")+" "+(e.description||"")+" "+(e.filename||"")+" "+(e.readonly?"readonly":"")+(e.isEnum?"enum":"");return t.isConstructor(e)&&(n+=" constructor"),t.isMethod(e)&&(n+=" method"),t.isProperty(e)&&(n+=" property"),n.replace(/[><"'`\n\r]/g,"").toLowerCase()},t.listType=function(e){return e.map(function(e){return"<code>"+e+"</code>"}).join(", ")},t.listTypeDesc=function(e){if(!e||0===e.length)return"";var n,r=e.map(function(e){return n=t.parse(e.description||"",{keepIfSingle:!0}),n&&(n="&nbsp;&nbsp;—&nbsp;&nbsp;"+n),"<code>"+e.type.names.join("|")+"</code>"+n});return r.length>1?"<ul>\n"+r.join("</li>\n<li>")+"\n</ul>":r},t._find=function(e,n){if(!e||!n)return null;var t,r,i=null;for(t=0;t<e.length;t++)if(r=e[t],r&&"object"==typeof r){for(var o in n)if(void 0!==n[o]&&n.hasOwnProperty(o)){if(n[o]!==r[o]){i=null;break}i=r}if(i)break}return i},t._assign=function(e,n,t){e=e||{};var r;for(r in n)n.hasOwnProperty(r)&&(t?Object.defineProperty(e,r,{enumerable:!0,value:n[r]}):e[r]=n[r]);return e},t._values=function(e){if(Array.isArray(e))return e;var n,t=[];for(n in e)e.hasOwnProperty(n)&&t.push(e[n]);return t},docma.utils=t}();
!function(){function e(e,t){l.info("Event:",e,t?t[0]:""),y.trigger(e,t)}function t(e,n){if(e||n!==t.Type.API||(e=f),e&&!(n&&u.indexOf(n)<0)){var o=p._find(docma.routes,{type:n,name:e});o&&p._assign(this,o)}}function n(e,t){dust.render(e,docma,function(e,n){if(e)throw e;m.loadCompiledContent(n),"function"==typeof t&&t()})}function o(){e(docma.Event.Render,[docma.currentRoute]),d&&(e(docma.Event.Ready),d=!1)}function r(o){docma._.currentRoute=t.create(null),n(docma._.partials.notFound,function(){if(e(docma.Event.Render,[null]),m.scrollTo(),"function"==typeof o)return o(404);throw new Error("Page or content not found.")})}function a(){if(s){var e=sessionStorage.getItem("redirectPath")||null;if(e)return sessionStorage.removeItem("redirectPath"),l.info("Redirecting to:",e),page.redirect(e),!0}return!1}function i(e){var t=e||window.location.search;return/^[\?&]/.test(t)&&(t=t.slice(1)),t||null}var c,u,d=!1,s="path"===docma.app.routing,f="_def_",p=docma.utils,m=docma.dom,l={};["log","info","warn","error"].forEach(function(e){!function(){l[e]=function(){docma._.logsEnabled&&console[e].apply(console,arguments)}}()}),docma.addFilter=function(e,t){if(docma.filterExists(e))throw new Error('Filter "'+e+'" already exists.');return dust.filters[e]=t,docma},docma.removeFilter=function(e){return delete dust.filters[e],docma},docma.filterExists=function(e){return"function"==typeof dust.filters[e]};var y=new EventEmitter;docma.Event={Ready:"ready",Render:"render",Route:"route"},docma.on=function(e,t){return y.on.apply(y,arguments),docma},docma.once=function(){return y.once.apply(y,arguments),docma},docma.off=function(){return y.off.apply(y,arguments),docma},docma.addListener=docma.on,docma.addListenerOnce=docma.once,docma.removeListener=docma.off,Object.defineProperty(docma,"currentRoute",{configurable:!1,get:function(){return docma._.currentRoute}}),Object.defineProperty(docma,"documentation",{configurable:!1,get:function(){return docma._.documentation}}),Object.defineProperty(docma,"symbols",{configurable:!1,get:function(){return docma._.symbols}}),t.Type={API:"api",CONTENT:"content"},u=p._values(t.Type),t.prototype.exists=function(){return Boolean(this.id)},t.prototype.isEqualTo=function(e){return e&&e.exists()&&this.exists()?e.path===this.path:!1},t.prototype.isCurrent=function(){return this.isEqualTo(docma.currentRoute)},t.prototype.apply=function(){return this.type===t.Type.API?(docma._.documentation=docma.apis[this.name].documentation,docma._.symbols=docma.apis[this.name].symbols):(docma._.documentation=null,docma._.symbols=null),e(docma.Event.Route,[this]),docma.render(this),this},t.prototype.toString=function(){return JSON.stringify(this)},t.create=function(e,n){return new t(e,n)},t.fromID=function(e){var n=e.split(":");return 2!==n.length?new t(null):new t(n[1],n[0])},t.fromQuery=function(e){if(!e)return new t(null);var n=e.split("&")[0].split("="),o=n[0].toLowerCase(),r=(n[1]||"").toLowerCase()||f;return u.indexOf(o)<0?new t(null):(r||o===t.Type.API&&(r=f),new t(r,o))},Object.defineProperty(docma,"Route",{configurable:!1,get:function(){return t}}),docma.fetch=function(e,t){var n=new XMLHttpRequest;n.onreadystatechange=function(){if(4===n.readyState){var o=200===n.status?n.responseText:"";return l.log("XHR GET:",n.status,e),t(n.status,o)}},n.open("GET",e,!0),n.send()},docma.render=function(e,a){if(!e||!e.exists())return r(a);if(!e.isEqualTo(docma.currentRoute)){docma._.currentRoute=e;var i="function"==typeof a;e.type===t.Type.API?n(docma._.partials.api,function(){o(),i&&a(200),m.fixAnchors(),m.scrollTo()}):docma.fetch(e.contentPath,function(e,t){return 404===e?r(a):void n(docma._.partials.content,function(){m.loadContent(t),o(),i&&a(e),m.fixAnchors()})})}},docma.app.base&&page.base(docma.app.base),page.redirect("(/)?"+docma.template.main,""),s&&(page("(/)?api/:apiName?",function(e,n){var o=e.params.apiName||f,r=t.create(o,t.Type.API);return r&&r.exists()?void r.apply():n()}),page("(/)?:content",function(e,n){var o=e.params.content,r=t.create(o,t.Type.CONTENT);return r&&r.exists()?void r.apply():n()})),page("(/)?",function(e,n){a()||setTimeout(function(){var o,r=i(e.querystring);if(s){if(r)return n();o=c}else l.log("Query-string:",r),o=r?t.fromQuery(r):c;return o&&o.exists()?void(o.isCurrent()||o.apply()):n()},100)}),page("*",function(e){l.warn("Unknown Route:",e.path),t.create(null).apply()}),l.info("Docma SPA Configuration:"),l.info("App Title:          ",docma.app.title),l.info("Routing by:         ",docma.app.routing),l.info("App Server:         ",docma.app.server),l.info("Base Path:          ",docma.app.base),l.info("Entrance Route ID:  ",docma.app.entrance),window.onload=function(){d=!0,c=t.fromID(docma.app.entrance),page.start({click:!0,popstate:!0,dispatch:!0,hashbang:!1,decodeURLComponents:!0}),l.info("Docma SPA loaded!")}}();
docma = Object.freeze(docma);