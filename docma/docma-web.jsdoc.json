[
  {
    "comment": "/**\n *  Docma (web) core.\n *\n *  When you build the documentation with a template, `docma-web.js` will be\n *  generated (and linked in the main HTML); which is the core engine for the\n *  documentation web app. This will include everything the app needs such as\n *  the documentation data, compiled partials, dustjs engine, etc...\n *\n *  This object is globally accessible from the generated SPA (Single Page\n *  Application).\n *\n *  Note that the size of this script depends especially on the generated\n *  documentation data.\n *\n *  @type {Object}\n *  @global\n *  @name docma\n */",
    "meta": {
      "range": [
        128,
        709
      ],
      "filename": "core.js",
      "lineno": 7,
      "path": "/Users/oy/developer/javascript/docma/lib/web",
      "code": {}
    },
    "description": "Docma (web) core.\n\n When you build the documentation with a template, `docma-web.js` will be\n generated (and linked in the main HTML); which is the core engine for the\n documentation web app. This will include everything the app needs such as\n the documentation data, compiled partials, dustjs engine, etc...\n\n This object is globally accessible from the generated SPA (Single Page\n Application).\n\n Note that the size of this script depends especially on the generated\n documentation data.",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "global",
    "name": "docma",
    "longname": "docma",
    "kind": "member",
    "$longname": "docma",
    "$members": [
      {
        "comment": "/**\n *\tHash-map of JSDoc documentation outputs.\n *\tEach key is the name of an API (formed by grouped Javascript files).\n *\te.g. `docma.apis[\"some-api\"]`\n *\n *  Unnamed documentation data (consisting of ungrouped Javascript files) can be\n *  accessed via `docma.apis._def_`.\n *\n *\tEach value is an `Object` with the following signature:\n *\t`{ documentation:Array, symbols:Array }`. `documentation` is the actual\n *\tJSDoc data, and `symbols` is a flat array of symbol names.\n *\n *  See {@link /?content=build-configuration|build configuration} for more\n *  details on how Javascript files can be grouped (and named) to form separate\n *  API documentations and SPA routes.\n *\n *  @name docma.apis\n *  @type {Object}\n *\n *  @example\n *  // output ungrouped (unnamed) API documentation data\n *  console.log(docma.apis._def_.documentation);\n *  console.log(docma.apis._def_.symbols); // flat list of symbol names\n *  // output one of the grouped (named) API documentation data\n *  console.log(docma.apis['my-scondary-api'].documentation);\n *\n *  @example\n *  <!-- Usage in a Dust partial\n *  \tEach API data is passed to the partial, according to the route.\n *  \tSo you'll always use `documentation` within the partials.\n *  -->\n *  {#documentation}\n *      <h4>{longname}</h4>\n *      <p>{description}</p>\n *      <hr />\n *  {/documentation}\n */",
        "meta": {
          "range": [
            23607,
            24946
          ],
          "filename": "core.js",
          "lineno": 698,
          "path": "/Users/oy/developer/javascript/docma/lib/web",
          "code": {}
        },
        "description": "Hash-map of JSDoc documentation outputs.\n\tEach key is the name of an API (formed by grouped Javascript files).\n\te.g. `docma.apis[\"some-api\"]`\n\n Unnamed documentation data (consisting of ungrouped Javascript files) can be\n accessed via `docma.apis._def_`.\n\n\tEach value is an `Object` with the following signature:\n\t`{ documentation:Array, symbols:Array }`. `documentation` is the actual\n\tJSDoc data, and `symbols` is a flat array of symbol names.\n\n See {@link /?content=build-configuration|build configuration} for more\n details on how Javascript files can be grouped (and named) to form separate\n API documentations and SPA routes.",
        "name": "apis",
        "type": {
          "names": [
            "Object"
          ]
        },
        "examples": [
          "// output ungrouped (unnamed) API documentation data\n console.log(docma.apis._def_.documentation);\n console.log(docma.apis._def_.symbols); // flat list of symbol names\n // output one of the grouped (named) API documentation data\n console.log(docma.apis['my-scondary-api'].documentation);\n\n ",
          "<!-- Usage in a Dust partial\n \tEach API data is passed to the partial, according to the route.\n \tSo you'll always use `documentation` within the partials.\n -->\n {#documentation}\n     <h4>{longname}</h4>\n     <p>{description}</p>\n     <hr />\n {/documentation}"
        ],
        "memberof": "docma",
        "longname": "docma.apis",
        "scope": "static",
        "kind": "member",
        "$longname": "docma.apis"
      },
      {
        "comment": "/**\n *  Provides configuration data of the generated SPA, which is originally set\n *  at build-time, by the user.\n *  See {@link /?content=build-configuration|build configuration} for more\n *  details on how these settings take affect.\n *  @name docma.app\n *  @type {Object}\n *\n *  @property {String} title - Document title for the main file of the generated\n *  app. (Value of the `&lt;title/>` tag.)\n *  @property {Array} meta - Array of arbitrary objects set for main document\n *  meta (tags).\n *  @property {String} base - Base path of the generated web app.\n *  @property {String} entrance - Name of the initial content displayed, when\n *  the web app is first loaded.\n *  @property {String} routing - Routing type of the generated SPA.\n *  @property {String} server - Server/host type of the generated SPA.\n */",
        "meta": {
          "range": [
            22789,
            23605
          ],
          "filename": "core.js",
          "lineno": 679,
          "path": "/Users/oy/developer/javascript/docma/lib/web",
          "code": {}
        },
        "description": "Provides configuration data of the generated SPA, which is originally set\n at build-time, by the user.\n See {@link /?content=build-configuration|build configuration} for more\n details on how these settings take affect.",
        "name": "app",
        "type": {
          "names": [
            "Object"
          ]
        },
        "properties": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Base path of the generated web app.",
            "name": "base"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Name of the initial content displayed, when\n the web app is first loaded.",
            "name": "entrance"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Array of arbitrary objects set for main document\n meta (tags).",
            "name": "meta"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Routing type of the generated SPA.",
            "name": "routing"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Server/host type of the generated SPA.",
            "name": "server"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Document title for the main file of the generated\n app. (Value of the `&lt;title/>` tag.)",
            "name": "title"
          }
        ],
        "memberof": "docma",
        "longname": "docma.app",
        "scope": "static",
        "kind": "member",
        "$longname": "docma.app"
      },
      {
        "comment": "/**\n     *  Gets the route information for the current rendered content being\n     *  displayed.\n     *\n     *  @name docma.currentRoute\n     *  @type {Route}\n     *  @readonly\n     *\n     *  @property {String} type - Type of the current route. If a generated\n     *  JSDoc API documentation is being displayed, this is set to `\"api\"`.\n     *  If any other HTML content (such as a converted markdown) is being\n     *  displayed; this is set to `\"content\"`.\n     *  @property {String} name - Name of the current route. For `api` routes,\n     *  this is the name of the grouped JS files parsed. If no name is given,\n     *  this is set to `\"_def_\"` by default. For `content` routes, this is\n     *  either the custom name given at build-time or, by default; the name of\n     *  the generated HTML file; lower-cased, without the extension. e.g.\n     *  `\"README.md\"` will have the route name `\"readme\"` after the build.\n     *  @property {String} path - Path of the current route.\n     */",
        "meta": {
          "range": [
            4658,
            5643
          ],
          "filename": "core.js",
          "lineno": 161,
          "path": "/Users/oy/developer/javascript/docma/lib/web",
          "code": {}
        },
        "description": "Gets the route information for the current rendered content being\n displayed.",
        "name": "currentRoute",
        "type": {
          "names": [
            "Route"
          ]
        },
        "readonly": true,
        "properties": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Name of the current route. For `api` routes,\n this is the name of the grouped JS files parsed. If no name is given,\n this is set to `\"_def_\"` by default. For `content` routes, this is\n either the custom name given at build-time or, by default; the name of\n the generated HTML file; lower-cased, without the extension. e.g.\n `\"README.md\"` will have the route name `\"readme\"` after the build.",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Path of the current route.",
            "name": "path"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Type of the current route. If a generated\n JSDoc API documentation is being displayed, this is set to `\"api\"`.\n If any other HTML content (such as a converted markdown) is being\n displayed; this is set to `\"content\"`.",
            "name": "type"
          }
        ],
        "memberof": "docma",
        "longname": "docma.currentRoute",
        "scope": "static",
        "kind": "member",
        "$longname": "docma.currentRoute"
      },
      {
        "comment": "/**\n     *\tJSDoc documentation data for the current API route.\n     *\tIf current route is not an API route, this will be `null`.\n     *\n     *  See {@link /?content=build-configuration|build configuration} for more\n     *  details on how Javascript files can be grouped (and named) to form\n     *  separate API documentations and SPA routes.\n     *\n     *  @name docma.documentation\n     *  @type {Array}\n     *\n     *  @example\n     *  // output current API documentation data\n     *  if (docma.currentRoute.type === 'api') {\n     *  \tconsole.log(docma.documentation);\n     *  }\n     *\n     *  @example\n     *  <!-- Usage in (Dust) partial -->\n     *  {#documentation}\n     *      <h4>{longname}</h4>\n     *      <p>{description}</p>\n     *      <hr />\n     *  {/documentation}\n     */",
        "meta": {
          "range": [
            5815,
            6601
          ],
          "filename": "core.js",
          "lineno": 188,
          "path": "/Users/oy/developer/javascript/docma/lib/web",
          "code": {}
        },
        "description": "JSDoc documentation data for the current API route.\n\tIf current route is not an API route, this will be `null`.\n\n See {@link /?content=build-configuration|build configuration} for more\n details on how Javascript files can be grouped (and named) to form\n separate API documentations and SPA routes.",
        "name": "documentation",
        "type": {
          "names": [
            "Array"
          ]
        },
        "examples": [
          "// output current API documentation data\n if (docma.currentRoute.type === 'api') {\n \tconsole.log(docma.documentation);\n }\n\n ",
          "<!-- Usage in (Dust) partial -->\n {#documentation}\n     <h4>{longname}</h4>\n     <p>{description}</p>\n     <hr />\n {/documentation}"
        ],
        "memberof": "docma",
        "longname": "docma.documentation",
        "scope": "static",
        "kind": "member",
        "$longname": "docma.documentation"
      },
      {
        "comment": "/**\n     *  Docma SPA events enumeration.\n     *  @enum {String}\n     */",
        "meta": {
          "range": [
            1936,
            2375
          ],
          "filename": "core.js",
          "lineno": 71,
          "path": "/Users/oy/developer/javascript/docma/lib/web",
          "code": {
            "id": "astnode100000110",
            "name": "docma.Event",
            "type": "ObjectExpression",
            "value": "{\"Ready\":\"ready\",\"Render\":\"render\",\"Route\":\"route\"}",
            "paramnames": []
          }
        },
        "description": "Docma SPA events enumeration.",
        "kind": "member",
        "isEnum": true,
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "Event",
        "longname": "docma.Event",
        "memberof": "docma",
        "scope": "static",
        "properties": [
          {
            "comment": "/**\n         *  Emitted when Docma is ready and the initial content is rendered.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                2088,
                2102
              ],
              "filename": "core.js",
              "lineno": 76,
              "path": "/Users/oy/developer/javascript/docma/lib/web",
              "code": {
                "id": "astnode100000115",
                "name": "Ready",
                "type": "Literal",
                "value": "ready"
              }
            },
            "description": "Emitted when Docma is ready and the initial content is rendered.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "Ready",
            "longname": "docma.Event.Ready",
            "kind": "member",
            "memberof": "docma.Event",
            "scope": "static",
            "defaultvalue": "ready"
          },
          {
            "comment": "/**\n         *  Emitted when page content (a Dust partial) is rendered.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                2231,
                2247
              ],
              "filename": "core.js",
              "lineno": 81,
              "path": "/Users/oy/developer/javascript/docma/lib/web",
              "code": {
                "id": "astnode100000117",
                "name": "Render",
                "type": "Literal",
                "value": "render"
              }
            },
            "description": "Emitted when page content (a Dust partial) is rendered.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "Render",
            "longname": "docma.Event.Render",
            "kind": "member",
            "memberof": "docma.Event",
            "scope": "static",
            "defaultvalue": "render"
          },
          {
            "comment": "/**\n         *  Emitted when SPA route is changed.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                2355,
                2369
              ],
              "filename": "core.js",
              "lineno": 86,
              "path": "/Users/oy/developer/javascript/docma/lib/web",
              "code": {
                "id": "astnode100000119",
                "name": "Route",
                "type": "Literal",
                "value": "route"
              }
            },
            "description": "Emitted when SPA route is changed.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "Route",
            "longname": "docma.Event.Route",
            "kind": "member",
            "memberof": "docma.Event",
            "scope": "static",
            "defaultvalue": "route"
          }
        ],
        "$longname": "docma.Event",
        "$members": [
          {
            "comment": "/**\n         *  Emitted when Docma is ready and the initial content is rendered.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                2088,
                2102
              ],
              "filename": "core.js",
              "lineno": 76,
              "path": "/Users/oy/developer/javascript/docma/lib/web",
              "code": {
                "id": "astnode100000115",
                "name": "Ready",
                "type": "Literal",
                "value": "ready"
              }
            },
            "description": "Emitted when Docma is ready and the initial content is rendered.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "Ready",
            "longname": "docma.Event.Ready",
            "kind": "member",
            "memberof": "docma.Event",
            "scope": "static",
            "defaultvalue": "ready",
            "$longname": "docma.Event.Ready"
          },
          {
            "comment": "/**\n         *  Emitted when page content (a Dust partial) is rendered.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                2231,
                2247
              ],
              "filename": "core.js",
              "lineno": 81,
              "path": "/Users/oy/developer/javascript/docma/lib/web",
              "code": {
                "id": "astnode100000117",
                "name": "Render",
                "type": "Literal",
                "value": "render"
              }
            },
            "description": "Emitted when page content (a Dust partial) is rendered.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "Render",
            "longname": "docma.Event.Render",
            "kind": "member",
            "memberof": "docma.Event",
            "scope": "static",
            "defaultvalue": "render",
            "$longname": "docma.Event.Render"
          },
          {
            "comment": "/**\n         *  Emitted when SPA route is changed.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                2355,
                2369
              ],
              "filename": "core.js",
              "lineno": 86,
              "path": "/Users/oy/developer/javascript/docma/lib/web",
              "code": {
                "id": "astnode100000119",
                "name": "Route",
                "type": "Literal",
                "value": "route"
              }
            },
            "description": "Emitted when SPA route is changed.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "Route",
            "longname": "docma.Event.Route",
            "kind": "member",
            "memberof": "docma.Event",
            "scope": "static",
            "defaultvalue": "route",
            "$longname": "docma.Event.Route"
          }
        ]
      },
      {
        "comment": "/**\n     *  Asynchronously fetches (text) content from the given URL via an\n     *  `XmlHttpRequest`. Note that the URL has to be in the same-origin, for\n     *  this to work.\n     *\n     *  @param {String} url - URL to be fetched.\n     *  @param {Function} callback - Function to be executed when the content\n     *  is fetched; with the following signature:\n     *  `function (status, responseText) { .. }`\n     */",
        "meta": {
          "range": [
            14670,
            15112
          ],
          "filename": "core.js",
          "lineno": 464,
          "path": "/Users/oy/developer/javascript/docma/lib/web",
          "code": {
            "id": "astnode100000773",
            "name": "docma.fetch",
            "type": "FunctionExpression",
            "paramnames": [
              "url",
              "callback"
            ]
          },
          "vars": {
            "xhr": "docma.fetch~xhr",
            "xhr.onreadystatechange": "docma.fetch~xhr.onreadystatechange",
            "": null
          }
        },
        "description": "Asynchronously fetches (text) content from the given URL via an\n `XmlHttpRequest`. Note that the URL has to be in the same-origin, for\n this to work.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "URL to be fetched.",
            "name": "url"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Function to be executed when the content\n is fetched; with the following signature:\n `function (status, responseText) { .. }`",
            "name": "callback"
          }
        ],
        "name": "fetch",
        "longname": "docma.fetch",
        "kind": "function",
        "memberof": "docma",
        "scope": "static",
        "$longname": "docma.fetch"
      },
      {
        "comment": "/**\n     *  Similar to `window.location` but with differences and additional\n     *  information.\n     *\n     *  @name docma.location\n     *  @type {Object}\n     *  @readonly\n     *\n     *  @property {String} origin - Gets the protocol, hostname and port number of the current URL.\n     *  @property {String} host - Gets the hostname and port number of the current URL.\n     *  @property {String} hostname - Gets the domain name of the web host.\n     *  @property {String} protocol - Gets the web protocol used, without `:` suffix.\n     *  @property {String} href - Gets the href (URL) of the current location.\n     *  @property {String} entrance - Gets the application entrance route, which is set at Docma build-time.\n     *  @property {String} base - Gets the base path of the application URL, which is set at Docma build-time.\n     *  @property {String} fullpath - Gets the path and filename of the current URL.\n     *  @property {String} pathname - Gets the path and filename of the current URL, without the base.\n     *  @property {String} path - Gets the path, filename and query-string of the current URL, without the base.\n     *  @property {String} hash - Gets the anchor `#` of the current URL, without `#` prefix.\n     *  @property {String} query - Gets the querystring part of the current URL, without `?` prefix.\n     *  @property {Function} getQuery() - Gets the value of the given querystring parameter.\n     */",
        "meta": {
          "range": [
            1167,
            2594
          ],
          "filename": "core.location.js",
          "lineno": 40,
          "path": "/Users/oy/developer/javascript/docma/lib/web",
          "code": {}
        },
        "description": "Similar to `window.location` but with differences and additional\n information.",
        "name": "location",
        "type": {
          "names": [
            "Object"
          ]
        },
        "readonly": true,
        "properties": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Gets the base path of the application URL, which is set at Docma build-time.",
            "name": "base"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Gets the application entrance route, which is set at Docma build-time.",
            "name": "entrance"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Gets the path and filename of the current URL.",
            "name": "fullpath"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Gets the value of the given querystring parameter.",
            "name": "getQuery()"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Gets the anchor `#` of the current URL, without `#` prefix.",
            "name": "hash"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Gets the hostname and port number of the current URL.",
            "name": "host"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Gets the domain name of the web host.",
            "name": "hostname"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Gets the href (URL) of the current location.",
            "name": "href"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Gets the protocol, hostname and port number of the current URL.",
            "name": "origin"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Gets the path, filename and query-string of the current URL, without the base.",
            "name": "path"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Gets the path and filename of the current URL, without the base.",
            "name": "pathname"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Gets the web protocol used, without `:` suffix.",
            "name": "protocol"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Gets the querystring part of the current URL, without `?` prefix.",
            "name": "query"
          }
        ],
        "memberof": "docma",
        "longname": "docma.location",
        "scope": "static",
        "kind": "member",
        "$longname": "docma.location"
      },
      {
        "comment": "/**\n     *  Adds a listener that will be automatically removed after its first\n     *  execution.\n     *  @alias docma.removeListener\n     *\n     *  @param {String} eventName - Name of the event to remove the listener\n     *  from. See {@link docma.Event|`docma.Event`} enumeration.\n     *  @param {Function} listener - Function to be removed from the event.\n     *\n     *  @returns {Object} - `docma` for chaining.\n     */",
        "meta": {
          "range": [
            4147,
            4249
          ],
          "filename": "core.js",
          "lineno": 136,
          "path": "/Users/oy/developer/javascript/docma/lib/web",
          "code": {
            "id": "astnode100000160",
            "name": "docma.off",
            "type": "FunctionExpression",
            "paramnames": []
          }
        },
        "description": "Adds a listener that will be automatically removed after its first\n execution.",
        "alias": "docma.removeListener",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Name of the event to remove the listener\n from. See {@link docma.Event|`docma.Event`} enumeration.",
            "name": "eventName"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Function to be removed from the event.",
            "name": "listener"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "- `docma` for chaining."
          }
        ],
        "name": "removeListener",
        "longname": "docma.removeListener",
        "kind": "function",
        "memberof": "docma",
        "scope": "static",
        "$longname": "docma.off"
      },
      {
        "comment": "/**\n     *  Adds a listener function to the specified event.\n     *  Note that the listener will not be added if it is a duplicate.\n     *  If the listener returns true then it will be removed after it is called.\n     *  @alias docma.addListener\n     *\n     *  @param {String} eventName - Name of the event to attach the listener to.\n     *  See {@link docma.Event|`docma.Event`} enumeration.\n     *  @param {Function} listener - Function to be called when the event is\n     *  emitted. If the function returns true then it will be removed after\n     *  calling.\n     *\n     *  @returns {Object} - `docma` for chaining.\n     */",
        "meta": {
          "range": [
            3014,
            3156
          ],
          "filename": "core.js",
          "lineno": 103,
          "path": "/Users/oy/developer/javascript/docma/lib/web",
          "code": {
            "id": "astnode100000122",
            "name": "docma.on",
            "type": "FunctionExpression",
            "paramnames": [
              "eventName",
              "listener"
            ]
          }
        },
        "description": "Adds a listener function to the specified event.\n Note that the listener will not be added if it is a duplicate.\n If the listener returns true then it will be removed after it is called.",
        "alias": "docma.addListener",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Name of the event to attach the listener to.\n See {@link docma.Event|`docma.Event`} enumeration.",
            "name": "eventName"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Function to be called when the event is\n emitted. If the function returns true then it will be removed after\n calling.",
            "name": "listener"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "- `docma` for chaining."
          }
        ],
        "name": "addListener",
        "longname": "docma.addListener",
        "kind": "function",
        "memberof": "docma",
        "scope": "static",
        "$longname": "docma.on"
      },
      {
        "comment": "/**\n     *  Adds a listener that will be automatically removed after its first\n     *  execution.\n     *  @alias docma.addOnceListener\n     *\n     *  @param {String} eventName - Name of the event to attach the listener to.\n     *  See {@link docma.Event|`docma.Event`} enumeration.\n     *  @param {Function} listener - Function to be called when the event is\n     *  emitted.\n     *\n     *  @returns {Object} - `docma` for chaining.\n     */",
        "meta": {
          "range": [
            3608,
            3712
          ],
          "filename": "core.js",
          "lineno": 120,
          "path": "/Users/oy/developer/javascript/docma/lib/web",
          "code": {
            "id": "astnode100000142",
            "name": "docma.once",
            "type": "FunctionExpression",
            "paramnames": []
          }
        },
        "description": "Adds a listener that will be automatically removed after its first\n execution.",
        "alias": "docma.addOnceListener",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Name of the event to attach the listener to.\n See {@link docma.Event|`docma.Event`} enumeration.",
            "name": "eventName"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Function to be called when the event is\n emitted.",
            "name": "listener"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "- `docma` for chaining."
          }
        ],
        "name": "addOnceListener",
        "longname": "docma.addOnceListener",
        "kind": "function",
        "memberof": "docma",
        "scope": "static",
        "$longname": "docma.once"
      },
      {
        "comment": "/**\n     *  Renders content into docma-main element, by the given route informatio.\n     *\n     *  If the content is empty or `\"api\"`, we'll render the `docma-api`\n     *  Dust template. Otherwise, (e.g. `\"readme\"`) we'll render `docma-content`\n     *  Dust template, then  fetch `content/readme.html` and load it in the\n     *  `docma-main` element.\n     *\n     *  Note that rendering and the callback will be cancelled if the given\n     *  content is the latest content rendered.\n     *\n     *  @param {Route} routeInfo - Route information of the page to be rendered.\n     *  @param {Function} [callback] - Function to be executed when the\n     *  rendering is complete. `function (httpStatus:Number) { .. }`\n     *\n     *  @emits docma.Event.Render\n     */",
        "meta": {
          "range": [
            15883,
            17110
          ],
          "filename": "core.js",
          "lineno": 494,
          "path": "/Users/oy/developer/javascript/docma/lib/web",
          "code": {
            "id": "astnode100000844",
            "name": "docma.render",
            "type": "FunctionExpression",
            "paramnames": [
              "routeInfo",
              "callback"
            ]
          },
          "vars": {
            "docma._.currentRoute": "docma._.currentRoute",
            "isCbFn": "docma.render~isCbFn",
            "": null
          }
        },
        "description": "Renders content into docma-main element, by the given route informatio.\n\n If the content is empty or `\"api\"`, we'll render the `docma-api`\n Dust template. Otherwise, (e.g. `\"readme\"`) we'll render `docma-content`\n Dust template, then  fetch `content/readme.html` and load it in the\n `docma-main` element.\n\n Note that rendering and the callback will be cancelled if the given\n content is the latest content rendered.",
        "params": [
          {
            "type": {
              "names": [
                "Route"
              ]
            },
            "description": "Route information of the page to be rendered.",
            "name": "routeInfo"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "description": "Function to be executed when the\n rendering is complete. `function (httpStatus:Number) { .. }`",
            "name": "callback"
          }
        ],
        "fires": [
          "docma.Event.event:Render"
        ],
        "name": "render",
        "longname": "docma.render",
        "kind": "function",
        "memberof": "docma",
        "scope": "static",
        "$longname": "docma.render"
      },
      {
        "comment": "/**\n     *  Creates SPA route information object for the given route name and type.\n     *  @class\n     *  @memberof docma\n     *\n     *  @param {String} name - Name of the route.\n     *  @param {String} type - Type of the SPA route.\n     *  See {@link docma.Route.Type|`Route.Type`} enumeration for possible\n     *  values.\n     */",
        "meta": {
          "range": [
            8027,
            8725
          ],
          "filename": "core.js",
          "lineno": 261,
          "path": "/Users/oy/developer/javascript/docma/lib/web",
          "code": {
            "id": "astnode100000258",
            "name": "Route",
            "type": "FunctionDeclaration",
            "paramnames": [
              "name",
              "type"
            ]
          },
          "vars": {
            "name": "docma.Route~name",
            "info": "docma.Route~info"
          }
        },
        "description": "Creates SPA route information object for the given route name and type.",
        "kind": "class",
        "memberof": "docma",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Name of the route.",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Type of the SPA route.\n See {@link docma.Route.Type|`Route.Type`} enumeration for possible\n values.",
            "name": "type"
          }
        ],
        "name": "Route",
        "longname": "docma.Route",
        "scope": "static",
        "$longname": "docma.Route"
      },
      {
        "comment": "/**\n     *  Docma SPA route types enumeration.\n     *  @memberof docma\n     *  @enum {String}\n     *  @readonly\n     *\n     *  @example\n     *  // docma.app.routing = \"query\"\n     *  type     name              path\n     *  -------  ----------------  --------------------------\n     *  api      _def_             /?api\n     *  api      docma-web         /?api=docma-web\n     *  content  templates         /?content=templates\n     *  content  guide             /?content=guide\n     *\n     *  @example\n     *  // docma.app.routing = \"path\"\n     *  type     name              path\n     *  -------  ----------------  --------------------------\n     *  api      _def_             /api\n     *  api      docma-web         /api/docma-web\n     *  content  templates         /templates\n     *  content  guide             /guide\n     *\n     */",
        "meta": {
          "range": [
            9567,
            9922
          ],
          "filename": "core.js",
          "lineno": 304,
          "path": "/Users/oy/developer/javascript/docma/lib/web",
          "code": {
            "id": "astnode100000318",
            "name": "Route.Type",
            "type": "ObjectExpression",
            "funcscope": "<anonymous>",
            "value": "{\"API\":\"api\",\"CONTENT\":\"content\"}",
            "paramnames": []
          }
        },
        "description": "Docma SPA route types enumeration.",
        "memberof": "docma",
        "kind": "member",
        "isEnum": true,
        "type": {
          "names": [
            "String"
          ]
        },
        "readonly": true,
        "examples": [
          "// docma.app.routing = \"query\"\n type     name              path\n -------  ----------------  --------------------------\n api      _def_             /?api\n api      docma-web         /?api=docma-web\n content  templates         /?content=templates\n content  guide             /?content=guide\n\n ",
          "// docma.app.routing = \"path\"\n type     name              path\n -------  ----------------  --------------------------\n api      _def_             /api\n api      docma-web         /api/docma-web\n content  templates         /templates\n content  guide             /guide"
        ],
        "name": "Route.Type",
        "longname": "docma.Route.Type",
        "scope": "static",
        "properties": [
          {
            "comment": "/**\n         *  Indicates that the route is for API documentation content.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                9712,
                9722
              ],
              "filename": "core.js",
              "lineno": 309,
              "path": "/Users/oy/developer/javascript/docma/lib/web",
              "code": {
                "id": "astnode100000323",
                "name": "API",
                "type": "Literal",
                "value": "api"
              }
            },
            "description": "Indicates that the route is for API documentation content.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "API",
            "longname": "docma.Route.Type.API",
            "kind": "member",
            "memberof": "docma.Route.Type",
            "scope": "static",
            "defaultvalue": "api"
          },
          {
            "comment": "/**\n         *  Indicates that the route is for other content, such as HTML files\n         *  generated from markdown.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                9898,
                9916
              ],
              "filename": "core.js",
              "lineno": 315,
              "path": "/Users/oy/developer/javascript/docma/lib/web",
              "code": {
                "id": "astnode100000325",
                "name": "CONTENT",
                "type": "Literal",
                "value": "content"
              }
            },
            "description": "Indicates that the route is for other content, such as HTML files\n generated from markdown.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "CONTENT",
            "longname": "docma.Route.Type.CONTENT",
            "kind": "member",
            "memberof": "docma.Route.Type",
            "scope": "static",
            "defaultvalue": "content"
          }
        ],
        "$longname": "docma.Route.Type",
        "$members": [
          {
            "comment": "/**\n         *  Indicates that the route is for API documentation content.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                9712,
                9722
              ],
              "filename": "core.js",
              "lineno": 309,
              "path": "/Users/oy/developer/javascript/docma/lib/web",
              "code": {
                "id": "astnode100000323",
                "name": "API",
                "type": "Literal",
                "value": "api"
              }
            },
            "description": "Indicates that the route is for API documentation content.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "API",
            "longname": "docma.Route.Type.API",
            "kind": "member",
            "memberof": "docma.Route.Type",
            "scope": "static",
            "defaultvalue": "api",
            "$longname": "docma.Route.Type.API"
          },
          {
            "comment": "/**\n         *  Indicates that the route is for other content, such as HTML files\n         *  generated from markdown.\n         *  @type {String}\n         */",
            "meta": {
              "range": [
                9898,
                9916
              ],
              "filename": "core.js",
              "lineno": 315,
              "path": "/Users/oy/developer/javascript/docma/lib/web",
              "code": {
                "id": "astnode100000325",
                "name": "CONTENT",
                "type": "Literal",
                "value": "content"
              }
            },
            "description": "Indicates that the route is for other content, such as HTML files\n generated from markdown.",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "CONTENT",
            "longname": "docma.Route.Type.CONTENT",
            "kind": "member",
            "memberof": "docma.Route.Type",
            "scope": "static",
            "defaultvalue": "content",
            "$longname": "docma.Route.Type.CONTENT"
          }
        ]
      },
      {
        "comment": "/**\n     *\tA flat array of JSDoc documentation symbol names. This is useful for\n     *\tbuilding menus, etc... If current route is not an API route, this will\n     *\tbe `null`.\n     *\n     *  See {@link /?content=build-configuration|build configuration} for more\n     *  details on how Javascript files can be grouped (and named) to form\n     *  separate API documentations and SPA routes.\n     *\n     *  @name docma.symbols\n     *  @type {Array}\n\n     *  @example\n     *  <!-- Usage in (Dust) partial -->\n     *  <ul class=\"menu\">\n     *      {#symbols}\n     *          <li><a href=\"#{.}\">{.}</a></li>\n     *      {/symbols}\n     *  </ul>\n     */",
        "meta": {
          "range": [
            6775,
            7421
          ],
          "filename": "core.js",
          "lineno": 220,
          "path": "/Users/oy/developer/javascript/docma/lib/web",
          "code": {}
        },
        "description": "A flat array of JSDoc documentation symbol names. This is useful for\n\tbuilding menus, etc... If current route is not an API route, this will\n\tbe `null`.\n\n See {@link /?content=build-configuration|build configuration} for more\n details on how Javascript files can be grouped (and named) to form\n separate API documentations and SPA routes.",
        "name": "symbols",
        "type": {
          "names": [
            "Array"
          ]
        },
        "examples": [
          "<!-- Usage in (Dust) partial -->\n <ul class=\"menu\">\n     {#symbols}\n         <li><a href=\"#{.}\">{.}</a></li>\n     {/symbols}\n </ul>"
        ],
        "memberof": "docma",
        "longname": "docma.symbols",
        "scope": "static",
        "kind": "member",
        "$longname": "docma.symbols"
      },
      {
        "comment": "/**\n *  Provides template specific configuration data.\n *  This is also useful within the Dust partials of the Docma template.\n *  @name docma.template\n *  @type {Object}\n *\n *  @property {Object} options - Docma template options. Defined at build-time,\n *  by the user.\n *  @property {String} name - Name of the Docma template.\n *  @property {String} version - Version of the Docma template.\n *  @property {String} author - Author information for the Docma template.\n *  @property {String} license - License information for the Docma template.\n *  @property {String} main - Name of the main file of the template.\n *  i.e. `index.html`\n *\n *  @example\n *  <!-- Usage in a Dust partial -->\n *  <div>\n *      {?template.options.someOption}\n *      <span>Displayed if someOption is true.</span>\n *      {/template.options.someOption}\n *  </div>\n *  <div class=\"footer\">{template.name} by {template.author}</div>\n */",
        "meta": {
          "range": [
            24948,
            25860
          ],
          "filename": "core.js",
          "lineno": 736,
          "path": "/Users/oy/developer/javascript/docma/lib/web",
          "code": {}
        },
        "description": "Provides template specific configuration data.\n This is also useful within the Dust partials of the Docma template.",
        "name": "template",
        "type": {
          "names": [
            "Object"
          ]
        },
        "properties": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Author information for the Docma template.",
            "name": "author"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "License information for the Docma template.",
            "name": "license"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Name of the main file of the template.\n i.e. `index.html`",
            "name": "main"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Name of the Docma template.",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Docma template options. Defined at build-time,\n by the user.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Version of the Docma template.",
            "name": "version"
          }
        ],
        "examples": [
          "<!-- Usage in a Dust partial -->\n <div>\n     {?template.options.someOption}\n     <span>Displayed if someOption is true.</span>\n     {/template.options.someOption}\n </div>\n <div class=\"footer\">{template.name} by {template.author}</div>"
        ],
        "memberof": "docma",
        "longname": "docma.template",
        "scope": "static",
        "kind": "member",
        "$longname": "docma.template"
      },
      {
        "comment": "/**\n  *  Utilities for inspecting JSDoc documentation and symbols; and parsing\n  *  documentation data into proper HTML.\n  *  See {@link ./?api=docma-web-utils|`docma.utils` documentation}.\n  *  @name docma.utils\n  *  @type {Object}\n  *  @namespace\n  */",
        "meta": {
          "range": [
            25863,
            26116
          ],
          "filename": "core.js",
          "lineno": 761,
          "path": "/Users/oy/developer/javascript/docma/lib/web",
          "code": {}
        },
        "description": "Utilities for inspecting JSDoc documentation and symbols; and parsing\n documentation data into proper HTML.\n See {@link ./?api=docma-web-utils|`docma.utils` documentation}.",
        "name": "utils",
        "type": {
          "names": [
            "Object"
          ]
        },
        "kind": "namespace",
        "memberof": "docma",
        "longname": "docma.utils",
        "scope": "static",
        "$longname": "docma.utils"
      }
    ]
  }
]